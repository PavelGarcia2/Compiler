/**
 Per compilar aquest fitxer s'ha d'haver instal·lat JavaCup

  java -jar java-cup-11b.jar Parser.cup
 **/

/**
 * Assignatura 21742 - Compiladors I 
 * Estudis: Grau en Informàtica 
 * Itinerari: Computació 
 * Curs: 2017-2018
 *
 * Professor: Pere Palmer
 */
package sintactico;

//import java_cup.runtime.*;
import java.io.*;
import sintactico.arbol.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import semantico.Semantico;
import herramientas.*;

class Parser;

/**
 ** Aquí es podria posar un codi 'ad hoc' però en aquest cas no és necessari.
 **/
parser code {:

   // private Scanner scanner;
    int errores = 0;
    BufferedWriter bf;

    String file = "error.log";

    // public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
    //     super(s,sf);
    // } 

    @Override
    public void report_error(String msg, Object nodo){
        errores++;
        if(nodo!=null){
            if(nodo instanceof java_cup.runtime.Symbol){
                ComplexSymbol token = (ComplexSymbol) nodo;
                Location l = token.getLeft();
                msg += ", (Linea,Columna) => ("+l.getLine()+","+l.getColumn()+")\n";
            }

            if(nodo instanceof Nodo){
                Nodo n = (Nodo) nodo;
                    msg += "Error Semantico, (Linea,Columna) => ("+n.getLine()+","+n.getColumn()+")\n";
            }
            escribeEnFichero(msg);
        }
    }

    public void escribeEnFichero(String msg){
        try{
            if(errores == 1){
                bf = new BufferedWriter(new FileWriter(file));
            }
            bf.write(msg);
        } catch( IOException e ){

        }
    }


    public int getErrores(){
        return errores;
    }

    private int extractLine(ComplexSymbol symbol) {
        System.out.println("hoola");
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getLine();
        }
        return 0;
    }

    private int extractColumn(ComplexSymbol symbol) {
        System.out.println("hoola2");
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getColumn();
        }
        return 0;
    }

    private int getLineaToken(ComplexSymbol sym){
        System.out.println(sym.toString());
        Location l = sym.getLeft();
        if(l!=null){
            return l.getLine();
        }
        return 0;
    }

    private int getColumnaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getColumn();
        }
        return 0;
    }

    private String getValor(ComplexSymbol sym){
        return (String) sym.value;
    }
:}

/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:     next_token(); :}
**/

/*
De los terminales capaz falte definir cual es un int, char, string, etc.
*/

terminal ComplexSymbol tReturn,tMain,tFun,tIn,tAnd,tOr,tNot,tIgual;

terminal ComplexSymbol tSuma,tResta,tMult,tDiv,tMod,tMayor,tMenor,tIgualMay,tIgualMenor,tIgualIgual;
    
terminal ComplexSymbol tNew,tCase,tBreak,tDefault;

terminal ComplexSymbol tIf,tElse,tElif,tWhile,tFor,tSwitch;

terminal ComplexSymbol tChar,tFloat,tInt,tBool,tStr,tConst,tLinea,tCaracter,tDecimal,tTrue,tFalse;

terminal ComplexSymbol tPrint,tPrintln,tId,tEntero,tRparen,tLparen,tRbracket,tLbracket,tRcorchete,tLcorchete,tComa,tPuntocoma,tDospuntos,tError,tVoid;



non terminal NodoPrograma PROGRAMA;
non terminal NodoMain MAIN;
non terminal NodoDeclVars DECL_VARS;
non terminal NodoVar DECL_VAR;
non terminal NodoDeclArray DECL_ARRAY;
non terminal NodoAsignacion ASIGN;
non terminal NodoTipoAsignacion T_ASIGN;
non terminal NodoAsignacionNormal ASIGN_NORMAL;
non terminal NodoAsignacionArray ASIGN_ARRAY;
non terminal NodoDimArray DIM_ARRAY;
non terminal NodoRealAsign REAL_ASIGN;
non terminal NodoTipo TIPO;
non terminal NodoFunc FUNC;
non terminal NodoDeclFunc DECL_FUNCIONES;
non terminal NodoSents SENTS;
non terminal NodoSent SENT;
non terminal NodoOtrasSent OTRAS_SENTS;
non terminal NodoCase CASOS;
non terminal NodoCaseDefault CASO_DEFAULT;
non terminal NodoInitCases INIT_CASES;
non terminal NodoOpLog OP_LOG;
non terminal NodoOpArit OP_ARIT;
non terminal NodoOpRapidos OP_RAPIDOS;
non terminal NodoOpRapidosSuma OP_RAPIDO_S;
non terminal NodoOpRapidosResta OP_RAPIDO_R;
non terminal NodoTermino TERMINO_1;
non terminal NodoTermino TERMINO_2;
non terminal NodoTerminoLog TERMINOLOG_1;
non terminal NodoTerminoLog TERMINOLOG_2;
non terminal NodoExpresionArit EXPRESION_ARITM;
non terminal NodoExpresionLog EXPRESION_LOG;
non terminal NodoExpresion EXPRESION;
non terminal NodoLlamadaFunc LLAMADA_FUNC;
non terminal NodoParametros PARAMETROS;
non terminal NodoParamSimple PARAM_SIMPLE;
non terminal NodoParamCompuesto PARAM_COMPUESTO;
non terminal NodoElse ELSE_COND;
non terminal NodoDeclFuncP DECL_FUNCP;
non terminal NodoDeclFuncParams DECL_FUNCPARAMS;
non terminal NodoDeclFuncParam DECL_FUNCPARAM;
non terminal NodoReturn RETURN;
non terminal NodoId ID;
non terminal NodoLiteral LITERAL;

non terminal NodoDeclConst DECL_CONST;
non terminal NodoConst DECL_CON;
non terminal NodoReturnParam RETURN_PARAM;
//non terminal NodoRealArrAsign REAL_ARRAY_ASSIGN;






start with PROGRAMA;

PROGRAMA ::= DECL_CONST:dconst DECL_VARS:dvars MAIN:main DECL_FUNCIONES:dfuncs                                                                                                                              {: RESULT = new NodoPrograma(dconst,dvars, dfuncs, main, main.getLine(), main.getColumn());
                                                                                                                                                                                                            Semantico semantico = new Semantico(RESULT, parser); if(errores == 0){semantico.runProgram();} :}                                                                                           
           ;

DECL_CONST ::= DECL_CON:dcon DECL_CONST:dconst                                                                                                                                                              {: RESULT = new NodoDeclConst(dcon,dconst,dcon.getLine(),dcon.getColumn()); :}
             |                                                                                                                                                                                              {: RESULT = new NodoDeclConst(); :}
             ;

DECL_CON ::= tConst:c TIPO:tipo ID:id ASIGN:asign tPuntocoma                                                                                                                                                {: RESULT = new NodoConst(tipo,id,asign,extractLine(c),extractColumn(c)); :}                                                                                                                        
            ;

// TODO
MAIN ::= tMain:main tLbracket DECL_VARS:dvars SENTS:sents tRbracket                                                                                                                                         {: RESULT= new NodoMain(dvars,sents,extractLine(main),extractColumn(main)); :}
        ;                                                   
 
 
DECL_VARS ::= DECL_VAR:dvar DECL_VARS:dvars                                                                                                                                                                 {: RESULT = new NodoDeclVars(dvars,dvar,dvar.getLine(),dvar.getColumn()); :}
             |                                                                                                                                                                                              {: RESULT = new NodoDeclVars(); :}
             ;

DECL_VAR ::= TIPO:t ID:id DECL_ARRAY:darr ASIGN:asign  tPuntocoma                                                                                                                                           {: RESULT = new NodoVar(t,id,darr,asign,t.getLine(),t.getColumn()); :}
          ; 

DECL_ARRAY ::= DECL_ARRAY:dArr tLcorchete:lCor tRcorchete:rCor                                                                                                                                              {: RESULT = new NodoDeclArray(dArr,dArr.getLine(),dArr.getColumn()); :}
               |                                                                                                                                                                                            {: RESULT = new NodoDeclArray(); :}
		       ;

ASIGN ::= tIgual:igual T_ASIGN:tAsign                                                                                                                                                                       {: RESULT = new NodoAsignacion(tAsign,extractLine(igual),extractColumn(igual)); :} 
          |                                                                                                                                                                                                 {: RESULT = new NodoAsignacion(); :} 
          ; 

T_ASIGN ::= ASIGN_NORMAL:asignNormal                                                                                                                                                                        {: RESULT = new NodoTipoAsignacion(asignNormal,null,asignNormal.getLine(),asignNormal.getColumn()); :}
            | ASIGN_ARRAY:asignArray                                                                                                                                                                        {: RESULT = new NodoTipoAsignacion(null,asignArray,asignArray.getLine(),asignArray.getColumn()); :}         
            ;

ASIGN_NORMAL ::= EXPRESION:expr                                                                                                                                                                             {: RESULT = new NodoAsignacionNormal(expr, expr.getLine(), expr.getColumn()); :}
                ;

ASIGN_ARRAY ::= tNew:n TIPO:tipo DIM_ARRAY:dimArray                                                                                                                                                         {: RESULT = new NodoAsignacionArray(tipo,dimArray,extractLine(n),extractColumn(n)); :}
                ;

DIM_ARRAY ::= DIM_ARRAY:dimArr tLcorchete:lCor EXPRESION:expr tRcorchete:rCor                                                                                                                               {: RESULT = new NodoDimArray(dimArr,expr,dimArr.getLine(),dimArr.getColumn()); :}                                                                                                
            |                                                                                                                                                                                               {: RESULT = new NodoDimArray(); :}
		    ;
// TODO
REAL_ASIGN ::= ID:id tIgual:igual EXPRESION:exp tPuntocoma:pcoma                                                                                                                                            {: RESULT= new NodoRealAsign(id,exp,id.getLine(),id.getColumn()); :}
            ;

/*
REAL_ARRAY_ASSIGN ::= ID:id DIM_ARRAY:dim tIgual EXPRESION:exp tPuntocoma                                                                                                                                   {: RESULT= new NodoRealArrAsign(id,dim,exp,id.getLine(),id.getColumn()); :}
                    ;
*/

TIPO ::= tInt:i                                                                                                                                                                                             {: RESULT = new NodoTipo(Tipo.tsb_int,extractLine(i),extractColumn(i)); :}
    | tCaracter:c                                                                                                                                                                                           {: RESULT = new NodoTipo(Tipo.tsb_char,extractLine(c),extractColumn(c)); :}
    | tFloat:f                                                                                                                                                                                              {: RESULT = new NodoTipo(Tipo.tsb_float,extractLine(f),extractColumn(f)); :}                                     
    | tBool:b                                                                                                                                                                                               {: RESULT = new NodoTipo(Tipo.tsb_bool,extractLine(b),extractColumn(b)); :}                               
    | tStr:s                                                                                                                                                                                                {: RESULT = new NodoTipo(Tipo.tsb_str,extractLine(s),extractColumn(s)); :}                                       
    | tVoid:v                                                                                                                                                                                               {: RESULT = new NodoTipo(Tipo.tsb_void,extractLine(v),extractColumn(v)); :}                     
	;

// TODO
FUNC ::= tFun:fun TIPO:tipo DECL_ARRAY:decarr ID:id tLparen DECL_FUNCP:decfuncp tRparen tLbracket DECL_VARS:declvars SENTS:sents RETURN:retorno tRbracket                                                   {:RESULT= new NodoFunc(tipo,decarr,id,decfuncp,declvars,sents,retorno,extractLine(fun),extractColumn(fun)); :}
    ;
// TODO
RETURN ::= tReturn:retorno RETURN_PARAM:exp tPuntocoma                                                                                                                                                      {: RESULT= new NodoReturn(exp,extractLine(retorno),extractColumn(retorno)); :}                                                                                                                           
        |                                                                                                                                                                                                   {: RESULT= new NodoReturn(); :} 
        ;

RETURN_PARAM ::= ID:id                                                                                                                                                                                      {: RESULT= new NodoReturnParam(id,extractLine(id),extractColumn(id));:} 
                | LITERAL:lit                                                                                                                                                                               {: RESULT= new NodoReturnParam(lit,extractLine(lit),extractColumn(lit)); :}
                ;
// TODO
DECL_FUNCP ::= DECL_FUNCPARAMS:funcpa                                                                                                                                                                       {: RESULT= new NodoDeclFuncP(funcpa, funcpa.getLine(),funcpa.getColumn()); :}
               |                                                                                                                                                                                            {: RESULT= new NodoDeclFuncP(); :}
               ;
// TODO
DECL_FUNCPARAMS ::= DECL_FUNCPARAM:declparam                                                                                                                                                                {: RESULT= new NodoDeclFuncParams(declparam,declparam.getLine(),declparam.getColumn());:}
                |   DECL_FUNCPARAM:declparam tComa DECL_FUNCPARAMS:declparams                                                                                                                               {: RESULT= new NodoDeclFuncParams(declparam,declparams,declparam.getLine(),declparam.getColumn());:}
                ;
// TODO
DECL_FUNCPARAM ::= TIPO:tipo ID:id DECL_ARRAY:declarr                                                                                                                                                       {: RESULT= new NodoDeclFuncParam(tipo,id,declarr,tipo.getLine(),tipo.getColumn()); :}
                ;
// TODO
DECL_FUNCIONES ::= DECL_FUNCIONES:declfunc FUNC:func                                                                                                                                                        {: RESULT = new NodoDeclFunc(declfunc,func,declfunc.getLine(),declfunc.getColumn()); :}
              |                                                                                                                                                                                             {: RESULT = new NodoDeclFunc(); :}
			  ;
// TODO			  
SENTS ::= SENTS:sents SENT:sent                                                                                                                                                                             {: RESULT= new NodoSents(sents,sent,sents.getLine(),sents.getColumn()); :}
        |                                                                                                                                                                                                   {: RESULT= new NodoSents(); :}
	    ;
// TODO
SENT ::= OTRAS_SENTS:otras                                                                                                                                                                                  {: RESULT= new NodoSent(otras,null,otras.getLine(),otras.getColumn()); :}
        | REAL_ASIGN:real                                                                                                                                                                                   {: RESULT= new NodoSent(null,real,real.getLine(),real.getColumn()); :}
        ;

// TODO
OTRAS_SENTS ::= tIf:tif tLparen PARAMETROS:parametros tRparen tLbracket SENTS:sents tRbracket ELSE_COND:elsecond                                                                                            {: RESULT= new NodoOtrasSent(0,parametros,sents,elsecond,extractLine(tif), extractColumn(tif)); :}                                                 
           | tWhile:tw tLparen PARAMETROS:parametros tRparen tLbracket SENTS:sents tRbracket                                                                                                                {: RESULT= new NodoOtrasSent(1,parametros,sents,extractLine(tw), extractColumn(tw)); :}                      
           | tFor:tf tLparen ID:tid tPuntocoma EXPRESION:exp tPuntocoma OP_RAPIDOS:oprapidos tRparen tLbracket SENTS:sents tRbracket                                                                        {: RESULT= new NodoOtrasSent(2,tid,exp,oprapidos,sents,extractLine(tf), extractColumn(tf)); :}
           | tSwitch:ts tLparen ID:tid tRparen tLbracket CASOS:casos tRbracket                                                                                                                              {: RESULT= new NodoOtrasSent(3,tid,casos,extractLine(ts), extractColumn(ts)); :}    
           | tPrint:tp tLparen EXPRESION:exp tRparen tPuntocoma                                                                                                                                             {: RESULT= new NodoOtrasSent(4,exp,extractLine(tp), extractColumn(tp),-1); :}
           | tPrintln:tpl tLparen EXPRESION:exp tRparen tPuntocoma                                                                                                                                          {: RESULT= new NodoOtrasSent(5,exp,extractLine(tpl), extractColumn(tpl)); :}  
           | LLAMADA_FUNC:llamFunc tPuntocoma                                                                                                                                                               {: RESULT= new NodoOtrasSent(6,llamFunc,llamFunc.getLine(),llamFunc.getColumn()); :}
           | tIn:in tLparen tRparen tPuntocoma                                                                                                                                                              {: RESULT= new NodoOtrasSent(7,extractLine(in),extractColumn(in)); :}                                    
           ;


// TODO
ELSE_COND ::= tElif:elif tLparen EXPRESION:exp tRparen tLbracket SENTS:sents tRbracket  ELSE_COND:elsecond                                                                                                  {: RESULT= new NodoElse(exp,sents,elsecond,extractLine(elif),extractColumn(elif)); :}
          | tElse:telse tLbracket SENTS:sents tRbracket                                                                                                                                                     {: RESULT= new NodoElse(sents,extractLine(telse),extractColumn(telse)); :}                                      
          |                                                                                                                                                                                                 {: RESULT= new NodoElse(); :}                   
          ; 

// TODO
CASOS ::= CASOS:casos tCase INIT_CASES:icase tDospuntos SENTS:sents tBreak tPuntocoma                                                                                                                       {: RESULT= new NodoCase(casos,icase,sents,casos.getLine(), casos.getColumn()); :}    
     | CASO_DEFAULT:def                                                                                                                                                                                     {: RESULT= new NodoCase(def,def.getLine(),def.getColumn()); :}
     |                                                                                                                                                                                                      {: RESULT= new NodoCase(); :}                                                
	 ;

// TODO
CASO_DEFAULT ::= tDefault:def tDospuntos SENTS:sents tBreak tPuntocoma                                                                                                                                       {: RESULT= new NodoCaseDefault(sents,extractLine(def),extractColumn(def)); :}
                ;

// TODO
INIT_CASES ::= tEntero:e                                                                                                                                                                                    {: RESULT= new NodoInitCases(Tipo.tsb_int,getValor(e),extractLine(e),extractColumn(e)); :}
          | tLinea:s                                                                                                                                                                                        {: RESULT= new NodoInitCases(Tipo.tsb_str,getValor(s),extractLine(s),extractColumn(s)); :}
          | tCaracter:c                                                                                                                                                                                     {: RESULT= new NodoInitCases(Tipo.tsb_char,getValor(c),extractLine(c),extractColumn(c)); :}
		  ;

// TODO
OP_LOG ::= tAnd:and                                                                                                                                                                                         {: RESULT= new NodoOpLog(TipoLog.AND, extractLine(and),extractColumn(and)); :}
      | tOr:or                                                                                                                                                                                              {: RESULT= new NodoOpLog(TipoLog.OR,extractLine(or),extractColumn(or)); :}
      | tMayor:may                                                                                                                                                                                          {: RESULT= new NodoOpLog(TipoLog.MAYOR,extractLine(may),extractColumn(may)); :}
      | tMenor:men                                                                                                                                                                                          {: RESULT= new NodoOpLog(TipoLog.MENOR, extractLine(men),extractColumn(men)); :}
      | tIgualMay:imay                                                                                                                                                                                      {: RESULT= new NodoOpLog(TipoLog.IGUALMAYOR,extractLine(imay),extractColumn(imay)); :}
      | tIgualMenor:imen                                                                                                                                                                                    {: RESULT= new NodoOpLog(TipoLog.IGUALMENOR,extractLine(imen),extractColumn(imen)); :}
      | tIgualIgual:ii                                                                                                                                                                                      {: RESULT= new NodoOpLog(TipoLog.IGUALIGUAL,extractLine(ii),extractColumn(ii)); :}
	  ;
// TODO
OP_ARIT ::= tSuma:s                                                                                                                                                                                          {: RESULT= new NodoOpArit(TipoArit.SUMA, extractLine(s),extractColumn(s)); :}
       | tResta:r                                                                                                                                                                                            {: RESULT= new NodoOpArit(TipoArit.RESTA, extractLine(r),extractColumn(r)); :}
       | tMult:mu                                                                                                                                                                                            {: RESULT= new NodoOpArit(TipoArit.MULT, extractLine(mu),extractColumn(mu)); :}
       | tDiv:d                                                                                                                                                                                              {: RESULT= new NodoOpArit(TipoArit.DIV, extractLine(d),extractColumn(d)); :}
       | tMod:m                                                                                                                                                                                              {: RESULT= new NodoOpArit(TipoArit.MOD, extractLine(m),extractColumn(m)); :}
	   ;

// TODO
OP_RAPIDOS ::= OP_RAPIDO_S:rapidossuma                                                                                                                                                                      {: RESULT= new NodoOpRapidos(rapidossuma, rapidossuma.getLine(), rapidossuma.getColumn()); :}
          | OP_RAPIDO_R:rapidosresta                                                                                                                                                                        {: RESULT= new NodoOpRapidos(rapidosresta ,rapidosresta.getLine(), rapidosresta.getColumn()); :}
          ;

// TODO
OP_RAPIDO_S ::= ID:tid tSuma tSuma                                                                                                                                                                           {: RESULT= new NodoOpRapidosSuma(tid, tid.getLine(), tid.getColumn()); :}
            ;

// TODO
OP_RAPIDO_R ::= ID:tid tResta tResta                                                                                                                                                                         {: RESULT= new NodoOpRapidosResta(tid, tid.getLine(), tid.getColumn()); :}
            ;

// TODO
TERMINO_1 ::= ID:id                                                                                                                                                                                         {: RESULT = new NodoTermino(id,id.getLine(),id.getColumn()); :}
         | tEntero:entero                                                                                                                                                                                   {: RESULT = new NodoTermino(Integer.parseInt(getValor(entero)),extractLine(entero),extractColumn(entero)); :}
         | LLAMADA_FUNC:funcCall                                                                                                                                                                            {: RESULT = new NodoTermino(funcCall,funcCall.getLine(),funcCall.getColumn()); :}
         | tDecimal:decimal                                                                                                                                                                                 {: RESULT = new NodoTermino(Float.parseFloat(getValor(decimal)), extractLine(decimal),extractColumn(decimal)); :}
         ;


// TODO
TERMINO_2 ::= ID:id                                                                                                                                                                                         {: RESULT = new NodoTermino(id,id.getLine(),id.getColumn()); :}
         | tEntero:entero                                                                                                                                                                                   {: RESULT = new NodoTermino(Integer.parseInt(getValor(entero)),extractLine(entero),extractColumn(entero)); :}
         | LLAMADA_FUNC:funcCall                                                                                                                                                                            {: RESULT = new NodoTermino(funcCall,funcCall.getLine(),funcCall.getColumn()); :}
         | tDecimal:decimal                                                                                                                                                                                 {: RESULT = new NodoTermino(Float.parseFloat(getValor(decimal)), extractLine(decimal),extractColumn(decimal)); :}
         ;


// TODO
TERMINOLOG_1 ::= ID:id                                                                                                                                                                                      {: RESULT = new NodoTerminoLog(id, -1,null,id.getLine(),id.getColumn()); :}
         | tTrue:t                                                                                                                                                                                          {: RESULT = new NodoTerminoLog(null, 1,null, extractLine(t),extractColumn(t)); :}
         | tFalse:f                                                                                                                                                                                         {: RESULT = new NodoTerminoLog(null,0,null,extractLine(f),extractColumn(f)); :}
         | LLAMADA_FUNC:funcCall                                                                                                                                                                            {: RESULT = new NodoTerminoLog(null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); :}
         ;
 
// TODO
TERMINOLOG_2 ::= ID:id                                                                                                                                                                                      {: RESULT = new NodoTerminoLog(id,-1,null,id.getLine(),id.getColumn()); :}
         | tTrue:t                                                                                                                                                                                          {: RESULT = new NodoTerminoLog(null,1,null,extractLine(t),extractColumn(t)); :}
         | tFalse:f                                                                                                                                                                                         {: RESULT = new NodoTerminoLog(null,0,null,extractLine(f),extractColumn(f)); :}
         | LLAMADA_FUNC:funcCall                                                                                                                                                                            {: RESULT = new NodoTerminoLog(null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); :}
         ;

// PEDRO   
EXPRESION_ARITM ::= TERMINO_1:term1 OP_ARIT:oparit TERMINO_2:term2                                                                                                                                          {: RESULT= new NodoExpresionArit(term1,oparit,term2,term1.getLine(),term2.getColumn()); :}
                ;       

 // PEDRO                 
EXPRESION_LOG ::= TERMINOLOG_1:tlog1 OP_LOG:oplog TERMINOLOG_2:tlog2                                                                                                                                        {: RESULT= new NodoExpresionLog(tlog1,oplog,tlog2,tlog1.getLine(),tlog1.getColumn()); :}
                ;
//PEDRO
EXPRESION ::= tLparen:v EXPRESION:e tRparen                                                                                                                                                                 {: RESULT = new NodoExpresion(e, null, null, null,null, null, -1, null, extractLine(v),extractColumn(v)); :}        
         | tNot:v EXPRESION:e                                                                                                                                                                               {: RESULT = new NodoExpresion(null, e, null, null,null, null, -1, null, extractLine(v),extractColumn(v)); :}
         | EXPRESION_LOG:elog                                                                                                                                                                               {: RESULT = new NodoExpresion(null, null, null, elog,null, null, -1, null, elog.getLine(), elog.getColumn()); :}
         | EXPRESION_ARITM:earit                                                                                                                                                                            {: RESULT = new NodoExpresion(null, null, earit, null,null, null, -1, null, earit.getLine(), earit.getColumn()); :}
         | ID:id                                                                                                                                                                                            {: RESULT = new NodoExpresion(null, null, null, null,id, null, -1, null, id.getLine(), id.getColumn()); :}
         | LITERAL:l                                                                                                                                                                                        {: RESULT = new NodoExpresion(null, null, null, null,null, l, -1, null, l.getLine(), l.getColumn()); :}
         | LLAMADA_FUNC:funcCall                                                                                                                                                                            {: RESULT = new NodoExpresion(null, null, null, null,null, null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); :}
		 ;

LITERAL ::= tEntero:i                                                                                                                                                                                       {: RESULT = new NodoLiteral(getValor(i),Tipo.tsb_int,extractLine(i),extractColumn(i)); :}
         | tDecimal:d                                                                                                                                                                                       {: RESULT = new NodoLiteral(getValor(d),Tipo.tsb_float,extractLine(d),extractColumn(d)); :}
         | tChar:c                                                                                                                                                                                          {: RESULT = new NodoLiteral(getValor(c),Tipo.tsb_char,extractLine(c),extractColumn(c)); :}
         | tLinea:l                                                                                                                                                                                         {: RESULT = new NodoLiteral(getValor(l),Tipo.tsb_str,extractLine(l),extractColumn(l)); :}
         | tTrue:t                                                                                                                                                                                          {: RESULT = new NodoLiteral("-1",Tipo.tsb_bool,extractLine(t),extractColumn(t)); :}
         | tFalse:f                                                                                                                                                                                         {: RESULT = new NodoLiteral("0",Tipo.tsb_bool,extractLine(f),extractColumn(f)); :}
        ;



// TODO
LLAMADA_FUNC ::= ID:id tLparen PARAMETROS:param tRparen                                                                                                                                                     {: RESULT= new NodoLlamadaFunc(id,param,id.getLine(),id.getColumn()); :}
                ;
// TODO
PARAMETROS ::= PARAM_SIMPLE:simple                                                                                                                                                                          {: RESULT= new NodoParametros(simple,simple.getLine(),simple.getColumn());:}
          | PARAM_COMPUESTO:compuesto                                                                                                                                                                       {: RESULT= new NodoParametros(compuesto, compuesto.getLine(),compuesto.getColumn());:}
		  ;
// TODO
PARAM_SIMPLE ::= EXPRESION:exp                                                                                                                                                                              {: RESULT= new NodoParamSimple(exp,exp.getLine(),exp.getColumn()); :}
        ;
// TODO
PARAM_COMPUESTO ::= PARAMETROS:param tComa EXPRESION:exp                                                                                                                                               {: RESULT= new NodoParamCompuesto(param,exp,param.getLine(),param.getColumn()); :}
        ;

ID ::= tId:valor                                                                                                                                                                                           {: RESULT = new NodoId((String) getValor(valor), extractLine(valor),extractColumn(valor)); :}                                                         
    ;