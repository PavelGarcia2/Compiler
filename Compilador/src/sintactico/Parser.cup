/**
 Per compilar aquest fitxer s'ha d'haver instal·lat JavaCup

  java -jar java-cup-11b.jar Parser.cup
 **/

/**
 * Assignatura 21742 - Compiladors I 
 * Estudis: Grau en Informàtica 
 * Itinerari: Computació 
 * Curs: 2017-2018
 *
 * Professor: Pere Palmer
 */
package sintactico;

import java_cup.runtime.*;

class Parser;

/**
 ** Aquí es podria posar un codi 'ad hoc' però en aquest cas no és necessari.
 **/
parser code {:
/*
    private Scanner scanner;
    int errores = 0;

    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }

    private int getLineaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getLine();
        }
        return 0;
    }

    private int getColumnaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getColumn();
        }
        return 0;
    }

*/
:}

/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:     next_token(); :}
**/

/*
De los terminales capaz falte definir cual es un int, char, string, etc.
*/

terminal ComplexSymbol tReturn,tMain,tFun,tIn,tSys,tAnd,tOr,tNot,tIgual;

terminal ComplexSymbol tSuma,tResta,tMult,tDiv,tMod,tMayor,tMenor,tIgualMay,tIgualMenor,tIgualIgual;
    
terminal ComplexSymbol tNew,tCase,tBreak,tDefault;

terminal ComplexSymbol tIf,tElse,tElif,tWhile,tFor,tSwitch;

terminal ComplexSymbol tChar,tFloat,tInt,tBool,tStr,tConst,tArray,tLinea,tCaracter,tDecimal,tTrue,tFalse;

terminal ComplexSymbol tPrint,tPrintln,tId,tEntero,tRparen,tLparen,tRbracket,tLbracket,tRcorchete,tLcorchete,tComa,tPuntocoma,tPunto,tDospuntos,tError,tVoid;



non terminal NodoPrograma PROGRAMA;
non terminal NodoMain MAIN;
non terminal NodoDeclVars DECL_VARS;
non terminal NodoVar DECL_VAR;
non terminal NodoDeclArray DECL_ARRAY;
non terminal NodoAsignacion ASIGN;
non terminal NodoTipoAsignacion T_ASIGN;
non terminal NodoAsignacionNormal ASIGN_NORMAL;
non terminal NodoAsignacionArray ASIGN_ARRAY;
non terminal NodoDimArray DIM_ARRAY;
non terminal NodoRealAsign REAL_ASIGN;
non terminal NodoTipo TIPO;
non terminal NodFunc FUNC;
non terminal NodoDeclFunc DECL_FUNCIONES;
non terminal NodoSents SENTS;
non terminal NodoSent SENT;
non terminal NodoOtrasSent OTRAS_SENTS;
non terminal NodoCase CASOS;
non terminal NodoCaseDefault CASO_DEFAULT;
non terminal NodoInitCases INIT_CASES;
non terminal OP_LOG;
non terminal OP_ARIT;
non terminal NodoOpRapidos OP_RAPIDOS;
non terminal NodoOpRapidosSuma OP_RAPIDO_S;
non terminal NodoOpRapidosResta OP_RAPIDO_R;
non terminal TERMINO_1;
non terminal TERMINO_2;
non terminal TERMINOLOG_1;
non terminal TERMINOLOG_2;
non terminal EXPRESION_ARITM;
non terminal EXPRESION_LOG;
non terminal NodoExpresion EXPRESION;
non terminal NodoLlamadaFunc LLAMADA_FUNC;
non terminal NodoParametros PARAMETROS;
non terminal NodoParamSimple PARAM_SIMPLE;
non terminal NodoParamCompuesto PARAM_COMPUESTO;
non terminal NodoElse ELSE_COND;
non terminal NodoDeclFuncP DECL_FUNCP;
non terminal NodoDeclFuncParams DECL_FUNCPARAMS;
non terminal NodoDeclFuncParam DECL_FUNCPARAM;
non terminal NodoReturn RETURN;






start with PROGRAMA;

PROGRAMA ::= DECL_VARS:dvars MAIN:main DECL_FUNCIONES:dfuncs  {: RETURN = new NodoPrograma(dvars, dfuncs, main, main.getLine(), main.getColumn());Semantico semantico = new Semantico(RETURN, parser); if(errores == 0){semantico.runProgram();} :}                                                                                                 {::
           ;

// TODO
MAIN ::= tMain:main tLbracket:lbr DECL_VARS:dvars SENTS:sents tRbracket:rbr                                        {:RETURN= new NodoMain(main,lbr,dvars,sents,rbr,main.getLine(),main.getColumn());:}
        ;
 
 
DECL_VARS ::= DECL_VAR:dvar DECL_VARS:dvars      {: RETURN = new NodoDeclVars(dvars,dvar,dvar.getLine(),dvar.getColumn()); :}
             |                                   {: RETURN = new NodoDeclVars(); :}
		     ;

DECL_VAR ::= TIPO:t tId:id DECL_ARRAY:darr ASIGN:asign  tPuntocoma:pC   {: RETURN = new NodoVar(t,id,darr,asign,pC,t.getLine(),t.getColumn()); :}
          ; 

DECL_ARRAY ::= DECL_ARRAY:dArr tLcorchete:lCor tRcorchete:rCor   {RETURN = new NodoDeclArray(dArr,lCor,rCor,dArr.getLine(),dArr.getColumn());}
               |                                                 {RETURN = new NodoDeclArray();}
		       ;

ASIGN ::= tIgual:igual T_ASIGN:tAsign     {RETURN = new NodoAsignacion(tigual,tAsign,tAsign.getLine(),tAsign.getColumn());} 
          |                               {RETURN = new NodoAsignacion();} 
          ; 

T_ASIGN ::= ASIGN_NORMAL:asignNormal     {RETURN = asignNormal;}
            | ASIGN_ARRAY:asignArray     {RETURN = asignArray;}         
            ;

ASIGN_NORMAL ::= EXPRESION:expr  {RETURN = new NodoAsignacionNormal(expr, expr.getLine(), expr.getColumn());}
                ;

ASIGN_ARRAY ::= tNew:n TIPO:tipo DIM_ARRAY:dimArray   {RETURN = new NodoAsignacionArray(n,tipo,dimArray,dimArray.getLine(),dimArray.getColumn());}
                ;

DIM_ARRAY ::= DIM_ARRAY:dimArr tLcorchete:lCor EXPRESION:expr tRcorchete:rCor {RETURN = new NodoDimArray(dimArr,lCor,expr,rCor,dimArr.getLine(),dimArr.getColumn());}                                                                                                   {::}
            |                                                                 {RETURN = new NodoDimArray();}
		    ;
// TODO
REAL_ASIGN ::= tId tIgual EXPRESION tPuntocoma                                                                                                             {::}
            ;

TIPO ::= tInt:i      {RETURN = new NodoTipo("int",i.getLine(),i.getColumn());}
    | tCaracter:c    {RETURN = new NodoTipo("char",c.getLine(),c.getColumn());}
    | tFloat:f       {RETURN = new NodoTipo("float",f.getLine(),f.getColumn());}                                     
    | tBool:b        {RETURN = new NodoTipo("bool",b.getLine(),b.getColumn());}                               
    | tStr:s         {RETURN = new NodoTipo("str",s.getLine(),s.getColumn());}                                       
    | tVoid:v        {RETURN = new NodoTipo("void",v.getLine(),v.getColumn());}                     
	;

// TODO
FUNC ::= tFun TIPO DECL_ARRAY tId tLparen DECL_FUNCP tRparen tLbracket DECL_VARS SENTS RETURN tRbracket                                                    {::}
    ;
// TODO
RETURN ::= tReturn EXPRESION tPuntocoma                                                                                                                    {::}                                                                                                                           
        |                                                                                                                                                  {::} 
        ;
// TODO
DECL_FUNCP ::= DECL_FUNCPARAMS                                                                                                                             {::}
               |                                                                                                                                           {::}
               ;
// TODO
DECL_FUNCPARAMS ::= DECL_FUNCPARAM 
                    |DECL_FUNCPARAM tComa DECL_FUNCPARAMS 
                    ;
// TODO
DECL_FUNCPARAM ::= TIPO tId DECL_ARRAY;
// TODO
DECL_FUNCIONES ::= DECL_FUNCIONES FUNC                                                                                                                     {::}
              |                                                                                                                                            {::}
			  ;
// TODO			  
SENTS ::= SENTS SENT                                                                                                                                       {::}
        |                                                                                                                                                  {::}
	    ;
// TODO
SENT ::= OTRAS_SENTS                                                                                                                                       {::}
        | REAL_ASIGN                                                                                                                                       {::}
        ;

// TODO
OTRAS_SENTS ::= tIf tLparen PARAMETROS tRparen tLbracket SENTS tRbracket ELSE_COND                                                                         {::}                                                 
           | tWhile tLparen PARAMETROS tRparen tLbracket SENTS tRbracket                                                                                   {::}                      
           | tFor tLparen tId tPuntocoma EXPRESION tPuntocoma OP_RAPIDOS tRparen tLbracket SENTS tRbracket                                                 {::}
           | tSwitch tLparen tId tRparen tLbracket CASOS tRbracket                                                                                         {::}    
           | tPrint tLparen EXPRESION tRparen tPuntocoma                                                                                                   {::}
           | tPrintln tLparen EXPRESION tRparen tPuntocoma                                                                                                 {::}  
           | LLAMADA_FUNC tPuntocoma                                                                                                                       {::}
           ;


// TODO
ELSE_COND ::= tElif tLparen EXPRESION tRparen tLbracket SENTS tRbracket  ELSE_COND                                                                         {::}
          | tElse tLbracket SENTS tRbracket                                                                                                                {::}                                      
          |                                                                                                                                                {::}                   
          ; 

// TODO
CASOS ::= CASOS tCase INIT_CASES tDospuntos SENTS tBreak tPuntocoma                                                                                        {::}    
     | CASO_DEFAULT                                                                                                                                        {::}
     |                                                                                                                                                     {::}                                                
	 ;

// TODO
CASO_DEFAULT ::= tDefault tDospuntos SENTS tBreak tPuntocoma                                                                                               {::}
                ;

// TODO
INIT_CASES ::= tEntero                                                                                                                                     {::}
          | tLinea                                                                                                                                         {::}
          | tCaracter                                                                                                                                      {::}
		  ;

// TODO
OP_LOG ::= tAnd                                                                                                                                            {::}
      | tOr                                                                                                                                                {::}
      | tMayor                                                                                                                                             {::}
      | tMenor                                                                                                                                             {::}
      | tIgualMay                                                                                                                                          {::}
      | tIgualMenor                                                                                                                                        {::}
      | tIgualIgual                                                                                                                                        {::}
	  ;

// TODO
OP_ARIT ::= tSuma                                                                                                                                          {::}
       | tResta                                                                                                                                            {::}
       | tMult                                                                                                                                             {::}
       | tDiv                                                                                                                                              {::}
       | tMod                                                                                                                                              {::}
	   ;

// TODO
OP_RAPIDOS ::= OP_RAPIDO_S                                                                                                                                 {::}
          | OP_RAPIDO_R                                                                                                                                    {::}
          ;

// TODO
OP_RAPIDO_S ::= tId tSuma tSuma                                                                                                                            {::}
            ;

// TODO
OP_RAPIDO_R ::= tId tResta tResta                                                                                                                          {::}
            ;

// TODO
TERMINO_1 ::= tId                                                                                                                                          {::}
         | tEntero                                                                                                                                         {::}
         | LLAMADA_FUNC                                                                                                                                    {::}
         | tDecimal                                                                                                                                        {::}
         ;


// TODO
TERMINO_2 ::= tId                                                                                                                                          {::}
         | tEntero                                                                                                                                         {::}
         | LLAMADA_FUNC                                                                                                                                    {::}
         | tDecimal                                                                                                                                        {::}
         ;


// TODO
TERMINOLOG_1 ::= tId                                                                                                                                                {::}
         | tTrue                                                                                                                                           {::}
         | tFalse                                                                                                                                          {::}
         | LLAMADA_FUNC                                                                                                                                    {::}
         ;
 
// TODO
TERMINOLOG_2 ::= tId                                                                                                                                                           {::}
         | tTrue                                                                                                                                           {::}
         | tFalse                                                                                                                                          {::}
         | LLAMADA_FUNC                                                                                                                                    {::}
         ;


EXPRESION_ARITM ::= TERMINO_1 OP_ARIT TERMINO_2     // PEDRO                                                                                                       {::}
                ;       
               
EXPRESION_LOG ::= TERMINOLOG_1 OP_LOG TERMINOLOG_2    // PEDRO                                                                                                     {::}
                ;

EXPRESION ::= tLparen EXPRESION tRparen      {RETURN = new NodoExpresion();}        //PEDRO
         | tNot EXPRESION                    {RETURN = new NodoExpresion();}
         | EXPRESION_LOG                     {RETURN = new NodoExpresion();}
         | EXPRESION_ARITM                   {RETURN = new NodoExpresion();}
         | tId:id                            {RETURN = new NodoExpresion();}
         | tEntero:i                         {RETURN = new NodoExpresion();}
         | tDecimal                          {RETURN = new NodoExpresion();}
         | tChar                             {RETURN = new NodoExpresion();}
         | tLinea                            {RETURN = new NodoExpresion();}
         | tTrue                             {RETURN = new NodoExpresion();}
         | tFalse                            {RETURN = new NodoExpresion();}
         | LLAMADA_FUNC                      {RETURN = new NodoExpresion();}
		 
// TODO
LLAMADA_FUNC ::= tId tLparen PARAMETROS tRparen                                                                                                            {::}
                ;
// TODO
PARAMETROS ::= PARAM_SIMPLE                                                                                                                                {::}
          | PARAM_COMPUESTO                                                                                                                                {::}
		  ;
// TODO
PARAM_SIMPLE ::= EXPRESION                                                                                                                                 {::}
        ;
// TODO
PARAM_COMPUESTO ::= PARAMETROS tComa EXPRESION                                                                                                             {::}
    ;