/**
 Per compilar aquest fitxer s'ha d'haver instal·lat JavaCup

  java -jar java-cup-11b.jar Parser.cup
 **/

/**
 * Assignatura 21742 - Compiladors I 
 * Estudis: Grau en Informàtica 
 * Itinerari: Computació 
 * Curs: 2017-2018
 *
 * Professor: Pere Palmer
 */
package sintactico;

import java_cup.runtime.*;

class Parser;

/**
 ** Aquí es podria posar un codi 'ad hoc' però en aquest cas no és necessari.
parser code {:
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
:}
**/

/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:     next_token(); :}
**/

terminal                ADD, SUB, MUL, DIV, MOD, LPAREN, RPAREN;
terminal      String    valor;
non terminal  Integer   E, T, F;


precedence left  ADD, SUB;
precedence left  MUL, DIV, MOD;

start with PROGRAMA;

PROGRAMA ::= DECL_VARS MAIN DECL_FUNCIONES                            {::}
          ;


MAIN ::= EJECUTAR LCORCHETE SENTS RCORCHETE                           {::}
          ;
 
 
DECL_VARS ::= DECL_VAR DECL_VARS                                      {::}
          |                                                           {::}
		;

DECL_VAR ::= TIPO ID DECL_ESP ASIGN  PUNTOCOMA                        {::}
          ; 

DECL_ESP ::= DECL_ARRAY
         | DECL_TUPLA;

DECL_ARRAY ::= DECL_ARRAY LCORCHETE RCORCHETE
          |
		  ;

DECL_TUPLA ::= LPAREN TIPO COMA TIPO RPAREN;

ASIGN ::= ASIGNACION T_ASIGN;

T_ASIGN ::= ASIGN_NORMAL
       | ASIGN_ARRAY
       | ASIGN_TUPLA;

ASIGN_NORMAL ::= EXPRESION;

ASIGN_ARRAY ::= NEW TIPO DIM_ARRAY;

DIM_ARRAY ::= DIM_ARRAY LCORCHETE EXPRESION RCORCHETE 
         | 
		 ;

ASIGN_TUPLA ::= NEW TUPLA DIM_TUPLA;

DIM_TUPLA ::= LPAREN EXPRESION COMA EXPRESION RPAREN;

REAL_ASIGN ::= ID ASIGNACION EXPRESION PUNTOCOMA;

TIPO ::= ENTERO
    | CHARACTER
    | FLOAT
    | BOLEANO
    | TUPLA
    | STRING
	;

/*******         las declaraciones iría antes que las instrucciones ----v----         *******/
FUNC: FUNCION TIPO DECL_ARRAY ID LPAREN PARAMETROS RPAREN LCORCHETE DECL_VARS SENTS RCORCHETE;

/* ** QUITAR ESTAS PRODUCCIONES (quitadas Pedro 18-12-23)
 ** */

DECL_FUNCIONES ::= DECL_FUNCIONES FUNC
              | 
			  ;
			  
SENTS: SENTS SENT 
     | 
	 ;

SENT ::= OTRAS_SENTS
 /* | DECL_VARS       <--  esto lía*/
    | REAL_ASIGN;


OTRAS_SENTS: CONDICIONAL LPAREN PARAMETROS RPAREN LCORCHETE SENTS RCORCHETE
           | BUCLE LPAREN PARAMETROS RPAREN LCORCHETE SENTS RCORCHETE
           | ITERATIVO LPAREN ID PUNTOCOMA EXPRESION PUNTOCOMA OP_RAPIDOS RPAREN LCORCHETE SENTS RCORCHETE
           | MULTIPLE LPAREN ID RPAREN LCORCHETE CASOS RCORCHETE;


CASOS: CASOS CASE INIT_CASES DOSPUNTOS SENTS BREAK PUNTOCOMA
     | CASO_DEFAULT
     | 
	 ;

CASO_DEFAULT: DEFAULT DOSPUNTOS SENTS BREAK PUNTOCOMA;

INIT_CASES: NUMERO
          | STR
          | CHAR
		  ;

OP_LOG: AND
      | OR
      | MAYOR
      | MENOR
      | IGUALMAY
      | IGUALMEN
      | IGUAL
	  ;

OP_ARIT: SUMA 
       | RESTA
       | MULTI
       | DIV 
       | MODULO
	   ;

OP_RAPIDOS: OP_RAPIDO_S
          | OP_RAPIDO_R;

OP_RAPIDO_S: ID SUMA SUMA;

OP_RAPIDO_R: ID RESTA RESTA;

TERMINO_1: ID
         | NUMERO
         | LLAMADA_FUNC
         | DECIMAL;
/* PREGUNTAR COMO SE PUEDE HACER PARA QUE UN TERMINO PUEDA SER UN ENTERO Y UN REAL*/
TERMINO_2: ID
         | NUMERO
         | LLAMADA_FUNC
         | DECIMAL;

TERMINOLOG_1: ID
         | BOLEANO
         | LLAMADA_FUNC;

TERMINOLOG_2: ID
         | BOLEANO
         | LLAMADA_FUNC;


EXPRESION_ARITM: TERMINO_1 OP_ARIT TERMINO_2 {$$ = $1 $2 $3};       
               
EXPRESION_LOG: TERMINOLOG_1 OP_LOG TERMINOLOG_2;

EXPRESION: LPAREN EXPRESION RPAREN
         | NOT EXPRESION
         | EXPRESION_LOG
         | EXPRESION_ARITM
         | ID
         | NUMERO
         | DECIMAL
         | CHAR
         | STR
         | LLAMADA_FUNC
		 ;

LLAMADA_FUNC: ID LPAREN PARAMETROS RPAREN PUNTOCOMA;

PARAMETROS: PARAM_SIMPLE
          | PARAM_COMPUESTO
		  ;

PARAM_SIMPLE: EXPRESION;

PARAM_COMPUESTO: PARAMETROS COMA EXPRESION;