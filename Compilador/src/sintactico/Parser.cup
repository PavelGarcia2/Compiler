/**
 Per compilar aquest fitxer s'ha d'haver instal·lat JavaCup

  java -jar java-cup-11b.jar Parser.cup
 **/

/**
 * Assignatura 21742 - Compiladors I 
 * Estudis: Grau en Informàtica 
 * Itinerari: Computació 
 * Curs: 2017-2018
 *
 * Professor: Pere Palmer
 */
package sintactico;

import java.io.*;
import java_cup.runtime.*;
import sintactico.arbol.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import semantico.Semantico;

class Parser;

/**
 ** Aquí es podria posar un codi 'ad hoc' però en aquest cas no és necessari.
 **/
parser code {:

    private Scanner scanner;
    int errores = 0;

    private int getLineaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getLine();
        }
        return 0;
    }

    private int getColumnaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getColumn();
        }
        return 0;
    }

:}

/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:     next_token(); :}
**/

/*
De los terminales capaz falte definir cual es un int, char, string, etc.
*/

terminal ComplexSymbol tReturn,tMain,tFun,tIn,tAnd,tOr,tNot,tIgual;

terminal ComplexSymbol tSuma,tResta,tMult,tDiv,tMod,tMayor,tMenor,tIgualMay,tIgualMenor,tIgualIgual;
    
terminal ComplexSymbol tNew,tCase,tBreak,tDefault;

terminal ComplexSymbol tIf,tElse,tElif,tWhile,tFor,tSwitch;

terminal ComplexSymbol tChar,tFloat,tInt,tBool,tStr,tConst,tLinea,tCaracter,tDecimal,tTrue,tFalse;

terminal ComplexSymbol tPrint,tPrintln,tId,tEntero,tRparen,tLparen,tRbracket,tLbracket,tRcorchete,tLcorchete,tComa,tPuntocoma,tDospuntos,tError,tVoid;



non terminal NodoPrograma PROGRAMA;
non terminal NodoMain MAIN;
non terminal NodoDeclVars DECL_VARS;
non terminal NodoVar DECL_VAR;
non terminal NodoDeclArray DECL_ARRAY;
non terminal NodoAsignacion ASIGN;
non terminal NodoTipoAsignacion T_ASIGN;
non terminal NodoAsignacionNormal ASIGN_NORMAL;
non terminal NodoAsignacionArray ASIGN_ARRAY;
non terminal NodoDimArray DIM_ARRAY;
non terminal NodoRealAsign REAL_ASIGN;
non terminal NodoTipo TIPO;
non terminal NodFunc FUNC;
non terminal NodoDeclFunc DECL_FUNCIONES;
non terminal NodoSents SENTS;
non terminal NodoSent SENT;
non terminal NodoOtrasSent OTRAS_SENTS;
non terminal NodoCase CASOS;
non terminal NodoCaseDefault CASO_DEFAULT;
non terminal NodoInitCases INIT_CASES;
non terminal NodoOpLog OP_LOG;
non terminal NodoOpArit OP_ARIT;
non terminal NodoOpRapidos OP_RAPIDOS;
non terminal NodoOpRapidosSuma OP_RAPIDO_S;
non terminal NodoOpRapidosResta OP_RAPIDO_R;
non terminal NodoTermino TERMINO_1;
non terminal NodoTermino TERMINO_2;
non terminal NodoTerminoLog TERMINOLOG_1;
non terminal NodoTerminoLog TERMINOLOG_2;
non terminal NodoExpresionArit EXPRESION_ARITM;
non terminal NodoExpresionLog EXPRESION_LOG;
non terminal NodoExpresion EXPRESION;
non terminal NodoLlamadaFunc LLAMADA_FUNC;
non terminal NodoParametros PARAMETROS;
non terminal NodoParamSimple PARAM_SIMPLE;
non terminal NodoParamCompuesto PARAM_COMPUESTO;
non terminal NodoElse ELSE_COND;
non terminal NodoDeclFuncP DECL_FUNCP;
non terminal NodoDeclFuncParams DECL_FUNCPARAMS;
non terminal NodoDeclFuncParam DECL_FUNCPARAM;
non terminal NodoReturn RETURN;
non terminal NodoId ID;
non terminal NodoLiteral LITERAL;

non terminal NodoDeclConst DECL_CONST;
non terminal NodoConst DECL_CON;






start with PROGRAMA;

PROGRAMA ::= DECL_CONST:dconst DECL_VARS:dvars MAIN:main DECL_FUNCIONES:dfuncs                                                                                                                              {: RESULT = new NodoPrograma(dvars, dfuncs, main, main.getLine(), main.getColumn());
                                                                                                                                                                                                            Semantico semantico = new Semantico(RESULT, parser); if(errores == 0){semantico.runProgram();} :}                                                                                           
           ;

DECL_CONST ::= DECL_CON:dcon DECL_CONST:dconst                                                                                                                                                              {: RESULT = new NodoDeclConst(dcon,dconst,dcon.getLine(),dcon.getColumn()); :}
             |                                                                                                                                                                                              {: RESULT = new NodoDeclConst(); :}
             ;

DECL_CON ::= tConst:tConst TIPO:tipo ID:id ASIGN:asign tPuntocoma                                                                                                                                            {: RESULT = new NodoConst(tipo,id,asign,getLineaToken(tConst),getColumnaToken(tConst)); :}                                                                                                                        
            ;

// TODO
MAIN ::= tMain:main tLbracket DECL_VARS:dvars SENTS:sents tRbracket                                                                                                                                         {: RESULT= new NodoMain(dvars,sents,getLineaToken(main),getColumnaToken(main)); :}
        ;                                                   
 
 
DECL_VARS ::= DECL_VAR:dvar DECL_VARS:dvars                                                                                                                                                                 {: RESULT = new NodoDeclVars(dvars,dvar,dvar.getLine(),dvar.getColumn()); :}
             |                                                                                                                                                                                              {: RESULT = new NodoDeclVars(); :}
             ;

DECL_VAR ::= TIPO:t ID:id DECL_ARRAY:darr ASIGN:asign  tPuntocoma                                                                                                                                       {: RESULT = new NodoVar(t,id,darr,asign,t.getLine(),t.getColumn()); :}
          ; 

DECL_ARRAY ::= DECL_ARRAY:dArr tLcorchete:lCor tRcorchete:rCor                                                                                                                                              {: RESULT = new NodoDeclArray(dArr,dArr.getLine(),dArr.getColumn()); :}
               |                                                                                                                                                                                            {: RESULT = new NodoDeclArray(); :}
		       ;

ASIGN ::= tIgual:igual T_ASIGN:tAsign                                                                                                                                                                       {: RESULT = new NodoAsignacion(tAsign,tAsign.getLine(),tAsign.getColumn()); :} 
          |                                                                                                                                                                                                 {: RESULT = new NodoAsignacion(); :} 
          ; 

T_ASIGN ::= ASIGN_NORMAL:asignNormal                                                                                                                                                                        {: RESULT = asignNormal; :}
            | ASIGN_ARRAY:asignArray                                                                                                                                                                        {: RESULT = asignArray; :}         
            ;

ASIGN_NORMAL ::= EXPRESION:expr                                                                                                                                                                             {: RESULT = new NodoAsignacionNormal(expr, expr.getLine(), expr.getColumn()); :}
                ;

ASIGN_ARRAY ::= tNew:n TIPO:tipo DIM_ARRAY:dimArray                                                                                                                                                         {: RESULT = new NodoAsignacionArray(tipo,dimArray,dimArray.getLine(),dimArray.getColumn()); :}
                ;

DIM_ARRAY ::= DIM_ARRAY:dimArr tLcorchete:lCor EXPRESION:expr tRcorchete:rCor                                                                                                                               {: RESULT = new NodoDimArray(dimArr,lCor,expr,rCor,dimArr.getLine(),dimArr.getColumn()); :}                                                                                                
            |                                                                                                                                                                                               {: RESULT = new NodoDimArray(); :}
		    ;
// TODO
REAL_ASIGN ::= ID:id tIgual:igual EXPRESION:exp tPuntocoma:pcoma                                                                                                                                            {: RESULT= new NodoRealAsign(id,igual,exp,pcoma,id.getLine(),id.getColumn()); :}
            ;

TIPO ::= tInt:i                                                                                                                                                                                             {: RESULT = new NodoTipo("int",i.getLine(),i.getColumn()); :}
    | tCaracter:c                                                                                                                                                                                           {: RESULT = new NodoTipo("char",c.getLine(),c.getColumn()); :}
    | tFloat:f                                                                                                                                                                                              {: RESULT = new NodoTipo("float",f.getLine(),f.getColumn()); :}                                     
    | tBool:b                                                                                                                                                                                               {: RESULT = new NodoTipo("bool",b.getLine(),b.getColumn()); :}                               
    | tStr:s                                                                                                                                                                                                {: RESULT = new NodoTipo("str",s.getLine(),s.getColumn()); :}                                       
    | tVoid:v                                                                                                                                                                                               {: RESULT = new NodoTipo("void",v.getLine(),v.getColumn()); :}                     
	;

// TODO
FUNC ::= tFun:func TIPO:tipo DECL_ARRAY:decarr ID:id tLparen DECL_FUNCP:decfuncp tRparen tLbracket DECL_VARS:declvars SENTS:sents RETURN:retorno tRbracket                                                  {:RESULT= new NodoFunc(func,tipo,decarr,id,id,decfuncp,declvars,sents,retorno,func.getLine(),func.getColumn()); :}
    ;
// TODO
RETURN ::= tReturn:retorno EXPRESION:exp tPuntocoma                                                                                                                                                         {: RESULT= new NodoReturn(retorno,exp,retorno.getLine(),retorno.getColumn()); :}                                                                                                                           
        |                                                                                                                                                                                                   {: RESULT= new NodoReturn(); :} 
        ;
// TODO
DECL_FUNCP ::= DECL_FUNCPARAMS:funcpa                                                                                                                                                                       {: RESULT= new NodoDeclFuncP(funcpa, funcpa.getLine(),funcpa.getColumn()); :}
               |                                                                                                                                                                                            {: RESULT= new NodoDeclFuncP(); :}
               ;
// TODO
DECL_FUNCPARAMS ::= DECL_FUNCPARAM:declparam                                                                                                                                                                {: RESULT= new NodoDeclFuncParams(declparam,declparam.getLine(),declparam.getColumn());:}
                |   DECL_FUNCPARAM:declparam tComa DECL_FUNCPARAMS:declparams                                                                                                                               {: RESULT= new NodoDeclFuncParams(declparam,declparams,declparam.getLine(),declparam.getColumn());:}
                ;
// TODO
DECL_FUNCPARAM ::= TIPO:tipo ID:id DECL_ARRAY:declarr                                                                                                                                                       {: RESULT= new NodoDeclFuncParam(tipo,id,declarr,tipo.getLine(),tipo.getColumn()); :}
                ;
// TODO
DECL_FUNCIONES ::= DECL_FUNCIONES:declfunc FUNC:func                                                                                                                                                        {: RESULT = new NodoDeclFunc(declfunc,func,declfunc.getLine(),declfunc.getColumn()); :}
              |                                                                                                                                                                                             {: RESULT = new NodoDeclFunc(); :}
			  ;
// TODO			  
SENTS ::= SENTS:sents SENT:sent                                                                                                                                                                             {: RESULT= new NodoSents(sents,sent,sents.getLine(),sents.getColumn()); :}
        |                                                                                                                                                                                                   {: RESULT= new NodoSents() :}
	    ;
// TODO
SENT ::= OTRAS_SENTS:otras                                                                                                                                                                                  {: RESULT= new NodoSent(otras,otras.getLine(),otras.getColumn()); :}
        | REAL_ASIGN:real                                                                                                                                                                                   {: RESULT= new NodoSent(real,real.getLine(),real.getColumn()); :}
        ;

// TODO
OTRAS_SENTS ::= tIf:tif tLparen:tlparen PARAMETROS:parametros tRparen:trparen tLbracket:tlbracket SENTS:sents tRbracket:trbracket ELSE_COND:elsecond                                                        {: RESULT= new NodoOtrasSents(tif,parametros,sents,elsecond,tif.getLine(), tif.getColumn()); :}                                                 
           | tWhile:twhile tLparen:tlparen PARAMETROS:parametros tRparen:trparen tLbracket:tlbracket SENTS:sents tRbracket:trbracket                                                                        {: RESULT= new NodoOtrasSents(twhile,parametros,sents,twhile.getLine(), twhile.getColumn()); :}                      
           | tFor:tfor tLparen:tlparen ID:tid tPuntocoma:tpuntocoma EXPRESION:exp tPuntocoma:tpuntocoma OP_RAPIDOS:oprapidos tRparen:trparen tLbracket:tlbracket SENTS:sents tRbracket:trbracket            {: RESULT= new NodoOtrasSents(tfor,tid,exp,oprapidos,sents, tfor.getLine(), tfor.getColumn()); :}
           | tSwitch:tswitch tLparen:tlparen ID:tid tRparen:trparen tLbracket:tlbracket CASOS:casos tRbracket:trbracket                                                                                     {: RESULT= new NodoOtrasSents(tswitch,tid,casos,tswitch.getLine(), tswitch.getColumn()); :}    
           | tPrint:tprint tLparen:tlparen EXPRESION:exp tRparen:trparen tPuntocoma:tpuntocoma                                                                                                              {: RESULT= new NodoOtrasSents(1,tprint,exp,tprint.getLine(),tprint.getColumn()); :}
           | tPrintln:tprintln tLparen:tlparen EXPRESION:exp tRparen:trparen tPuntocoma:tpuntocoma                                                                                                          {: RESULT= new NodoOtrasSents(tprintln,exp,tprintln.getLine(),tprintln.getColumn()); :}  
           | LLAMADA_FUNC:llamFunc tPuntocoma:pcoma                                                                                                                                                         {: RESULT= new NodoOtrasSents(llamFunc,llamFunc.getLine(),llamFunc.getColumn()); :}
           | tIn:in tLparen:lparen tRparen:rparen tPuntocoma:pcoma                                                                                                                                          {: RESULT= new NodoOtrasSents(in,in.getLine(),in.getColumn()); :}                                    
           ;


// TODO
ELSE_COND ::= tElif:elif tLparen:lparen EXPRESION:exp tRparen:rparen tLbracket:lbr SENTS:sents tRbracket:rbr  ELSE_COND:elsecond                                                                            {: RESULT= new NodoElse(elif,exp,sents,elsecond,elif.getLine(),elif.getColumn()); :}
          | tElse:telse tLbracket:lbr SENTS:sents tRbracket:rbr                                                                                                                                             {: RESULT= new NodoElse(telse,sents,telse.getLine(),telse.getColumn()); :}                                      
          |                                                                                                                                                                                                 {: RESULT= new NodoElse(); :}                   
          ; 

// TODO
CASOS ::= CASOS:casos tCase:tcase INIT_CASES:icase tDospuntos:dosp SENTS:sents tBreak:tbreak tPuntocoma:pco                                                                                                 {: RESULT= new NodoCase(casos,icase,sents,casos.getLine(), casos.getColumn()); :}    
     | CASO_DEFAULT:def                                                                                                                                                                                     {: RESULT= new NodoCase(def,def.getLine(),def.getColumn()); :}
     |                                                                                                                                                                                                      {: RESULT= new NodoCase(); :}                                                
	 ;

// TODO
CASO_DEFAULT ::= tDefault:tbreak tDospuntos:tdospuntos SENTS:sents tBreak:tbreak tPuntocoma:tpuntocoma                                                                                                      {: RESULT= new NodoCaseDefault(sents,tbreak.getLine(),t.break.getColumn()); :}
                ;

// TODO
INIT_CASES ::= tEntero:e                                                                                                                                                                                    {: RESULT= new NodoInitCases(Tipo.INT,e,null,e.getLine,e.getColumn); :}
          | tLinea:l                                                                                                                                                                                        {: RESULT= new NodoInitCases(Tipo.STR,-1,s,s.getLine,s.getColumn); :}
          | tCaracter:c                                                                                                                                                                                     {: RESULT= new NodoInitCases(Tipo.CHAR,-1,c,s.getLine,s.getColumn); :}
		  ;

// TODO
OP_LOG ::= tAnd:and                                                                                                                                                                                         {: RESULT= new NodoOpLog(and, and.getLine(), and.getColumn()); :}
      | tOr:or                                                                                                                                                                                              {: RESULT= new NodoOpLog(or,or.getLine(), or.getColumn()); :}
      | tMayor:may                                                                                                                                                                                          {: RESULT= new NodoOpLog(may,may.getLine(), may.getColumn()); :}
      | tMenor:men                                                                                                                                                                                          {: RESULT= new NodoOpLog(men, men.getLine(), men.getColumn()); :}
      | tIgualMay:imay                                                                                                                                                                                      {: RESULT= new NodoOpLog(imay, imay.getLine(), imay.getColumn()); :}
      | tIgualMenor:imen                                                                                                                                                                                    {: RESULT= new NodoOpLog(imen,imen.getLine(), imen.getColumn()); :}
      | tIgualIgual:ii                                                                                                                                                                                      {: RESULT= new NodoOpLog(ii,ii.getLine(), ii.getColumn()); :}
	  ;

// TODO
OP_ARIT ::= tSuma:s                                                                                                                                                                                          {: RESULT= new NodoOpArit(s, s.getLine(), s.getColumn()); :}
       | tResta:r                                                                                                                                                                                            {: RESULT= new NodoOpArit(r, r.getLine(), r.getColumn()); :}
       | tMult:mu                                                                                                                                                                                            {: RESULT= new NodoOpArit(mu, mu.getLine(), mu.getColumn()); :}
       | tDiv:d                                                                                                                                                                                              {: RESULT= new NodoOpArit(d, d.getLine(), d.getColumn()); :}
       | tMod:m                                                                                                                                                                                              {: RESULT= new NodoOpArit(m, m.getLine(), m.getColumn()); :}
	   ;

// TODO
OP_RAPIDOS ::= OP_RAPIDO_S:rapidossuma                                                                                                                                                                      {: RESULT= new NodoOpRapidos(rapidossuma, rapidossuma.getFila(), rapidossuma.getColumn()); :}
          | OP_RAPIDO_R:rapidosresta                                                                                                                                                                        {: RESULT= new NodoOpRapidos(rapidosresta ,rapidosresta.getFila(), rapidosresta.getColumn()); :}
          ;

// TODO
OP_RAPIDO_S ::= ID:tid tSuma tSuma                                                                                                                                                                           {: RESULT= new NodoOpRapidosSuma(id, tId.getFila(), tId.getColumn()); :}
            ;

// TODO
OP_RAPIDO_R ::= ID:tid tResta tResta                                                                                                                                                                         {: RESULT= new NodoOpRapidosResta(id, tId.getFila(), tId.getColumn()); :}
            ;

// TODO
TERMINO_1 ::= ID:id                                                                                                                                                                                         {: RETURN = new NodoTermino(id,-1,null,-1,id.getLine(),id.getColumn()); :}
         | tEntero:entero                                                                                                                                                                                   {: RETURN = new NodoTermino(null, entero, null, -1, entero.getLine(), entero.getcolumn()); :}
         | LLAMADA_FUNC:funcCall                                                                                                                                                                            {: RETURN = new NodoTermino(null,-1,funcCall,-1,funcCall.getLine(),funcCall.getColumn()); :}
         | tDecimal:decimal                                                                                                                                                                                 {: RETURN = new NodoTermino(null,-1,null,decimal,decimal.getLine(),decimal.getColumn()); :}
         ;


// TODO
TERMINO_2 ::= ID:id                                                                                                                                                                                         {: RESULT = new NodoTermino(id,-1,null,-1,id.getLine(),id.getColumn());:}
         | tEntero:entero                                                                                                                                                                                   {: RESULT = new NodoTermino(null, entero, null, -1, entero.getLine(), entero.getcolumn()); :}
         | LLAMADA_FUNC:funcCall                                                                                                                                                                            {: RESULT = new NodoTermino(null,-1,funcCall,-1,funcCall.getLine(),funcCall.getColumn()); :}
         | tDecimal:decimal                                                                                                                                                                                 {: RESULT = new NodoTermino(null,-1,null,decimal,decimal.getLine(),dedcimal.getColumn()); :}
         ;


// TODO
TERMINOLOG_1 ::= ID:id                                                                                                                                                                                      {: RESULT = new NodoTerminoLog(id, -1,null,id.getLine(),id.getColumn()); :}
         | tTrue:t                                                                                                                                                                                          {: RESULT = new NodoTerminoLog(null, 1,null, t.getLine(),t.getColumn()); :}
         | tFalse:f                                                                                                                                                                                         {: RESULT = new NodoTerminoLog(null,0,null,f.getLine(),f.getColumn()); :}
         | LLAMADA_FUNC:funcCall                                                                                                                                                                            {: RESULT = new NodoTerminoLog(null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); :}
         ;
 
// TODO
TERMINOLOG_2 ::= ID:id                                                                                                                                                                                      {: RESULT = new NodoTerminoLog(id,-1,null,id.getLine(),id.getColumn()); :}
         | tTrue:t                                                                                                                                                                                          {: RESULT = new NodoTerminoLog(null,1,null,t.getLine(),t.getColumn()); :}
         | tFalse:f                                                                                                                                                                                         {: RESULT = new NodoTerminoLog(null,0,null,f.getLine(),f.getColumn()); :}
         | LLAMADA_FUNC:funcCall                                                                                                                                                                            {: RESULT = new NodoTerminoLog(null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); :}
         ;

// PEDRO   
EXPRESION_ARITM ::= TERMINO_1:term1 OP_ARIT:oparit TERMINO_2:term2                                                                                                                                          {: RESULT= new NodoExpresionArit(term1,oparit,term2,term1.getLine(),term2.getColumn()); :}
                ;       

 // PEDRO                 
EXPRESION_LOG ::= TERMINOLOG_1:tlog1 OP_LOG:oplog TERMINOLOG_2:tlog2                                                                                                                                        {: RESULT= new NodoExpresionLog(tlog1,oplog,tlog2,tlog1.getLine(),tlog1.getColumn()); :}
                ;
//PEDRO
EXPRESION ::= tLparen EXPRESION:e tRparen                                                                                                                                                                   {: RESULT = new NodoExpresion(e, null, null, null,null, null, -1, null, e.getLine(), e.getColumn()); :}        
         | tNot EXPRESION:e                                                                                                                                                                                 {: RESULT = new NodoExpresion(null, e, null, null,null, null, -1, null, e.getLine(), e.getColumn()); :}
         | EXPRESION_LOG:elog                                                                                                                                                                               {: RESULT = new NodoExpresion(null, null, null, elog,null, null, -1, null, elog.getLine(), elog.getColumn()); :}
         | EXPRESION_ARITM:earit                                                                                                                                                                            {: RESULT = new NodoExpresion(null, null, earit, null,null, null, -1, null, earit.getLine(), earit.getColumn()); :}
         | ID:id                                                                                                                                                                                            {: RESULT = new NodoExpresion(null, null, null, null,id, null, -1, null, id.getLine(), id.getColumn()); :}
         | LITERAL:l                                                                                                                                                                                        {: RESULT = new NodoExpresion(null, null, null, null,null, l, -1, null, l.getLine(), l.getColumn()); :}
         | tTrue:t                                                                                                                                                                                          {: RESULT = new NodoExpresion(null, null, null, null,null, null, 1, null, t.getLine(), t.getColumn()); :}
         | tFalse:f                                                                                                                                                                                         {: RESULT = new NodoExpresion(null, null, null, null,null, null, 0, null, f.getLine(), f.getColumn()); :}
         | LLAMADA_FUNC:funcCall                                                                                                                                                                            {: RESULT = new NodoExpresion(null, null, null, null,null, null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); :}
		 ;

LITERAL ::= tEntero:i                                                                                                                                                                                       {: RESULT = new NodoLiteral(Integer.toString(i),Tipo.INT,i.getLine(),i.getColumn()); :}
         | tDecimal:d                                                                                                                                                                                       {: RESULT = new NodoLiteral(Float.toString(d),Tipo.FLOAT,d.getLine(),d.getColumn()); :}
         | tChar:c                                                                                                                                                                                          {: RESULT = new NodoLiteral(c,Tipo.CHAR,c.getLine(),c.getColumn()); :}
         | tLinea:l                                                                                                                                                                                         {: RESULT = new NodoLiteral(l,Tipo.STR,l.getLine(),l.getColumn()); :}
        ;


// TODO
LLAMADA_FUNC ::= ID:id tLparen:lparen PARAMETROS:param tRparen:rparen                                                                                                                                       {: RESULT= new NodoLlamadaFunc(id,lparen,param,rparen,id.getLine(),id.getColumn()); :}
                ;
// TODO
PARAMETROS ::= PARAM_SIMPLE:simple                                                                                                                                                                          {: RESULT= new NodoParametros(simple,simple.getLine(),simple.getColumn());:}
          | PARAM_COMPUESTO:compuesto                                                                                                                                                                       {: RESULT= new NodoParametros(compuesto, compuesto.getLine(),compuesto.getColumn());:}
		  ;
// TODO
PARAM_SIMPLE ::= EXPRESION:exp                                                                                                                                                                              {: RESULT= new NodoParamSimple(exp,exp.getLine(),exp.getColumn()); :}
        ;
// TODO
PARAM_COMPUESTO ::= PARAMETROS:param tComa:coma EXPRESION:exp                                                                                                                                               {: RESULT= new NodoParamCompuesto(param,coma,exp,param.getLine(),param.getColumn()); :}
        ;

ID ::= tId:valor                                                                                                                                                                                           {: RESULT = new NodoId((String) valor.getLiteral(), valor.getLine(), valor.getColumn()); :}                                                         
    ;