
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java.io.*;
import sintactico.arbol.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import semantico.Semantico;
import herramientas.*;
import lexico.Literal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\006\000\002\055" +
    "\004\000\002\055\002\000\002\056\007\000\002\003\007" +
    "\000\002\004\004\000\002\004\002\000\002\005\007\000" +
    "\002\005\006\000\002\005\007\000\002\006\005\000\002" +
    "\006\002\000\002\007\004\000\002\007\002\000\002\010" +
    "\003\000\002\010\003\000\002\011\003\000\002\012\005" +
    "\000\002\013\006\000\002\061\003\000\002\061\002\000" +
    "\002\014\006\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\016\000\002\052\005\000\002\052\002" +
    "\000\002\057\003\000\002\057\003\000\002\047\003\000" +
    "\002\047\002\000\002\050\003\000\002\050\005\000\002" +
    "\051\005\000\002\017\004\000\002\017\002\000\002\020" +
    "\004\000\002\020\002\000\002\021\003\000\002\021\003" +
    "\000\002\022\012\000\002\022\011\000\002\022\015\000" +
    "\002\022\011\000\002\022\007\000\002\022\007\000\002" +
    "\022\004\000\002\022\006\000\002\046\012\000\002\046" +
    "\006\000\002\046\002\000\002\023\011\000\002\023\003" +
    "\000\002\023\002\000\002\024\007\000\002\025\004\000" +
    "\002\025\003\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
    "\031\005\000\002\032\005\000\002\033\003\000\002\033" +
    "\004\000\002\033\003\000\002\033\004\000\002\034\003" +
    "\000\002\034\004\000\002\034\003\000\002\034\004\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\037\005\000\002\040\005" +
    "\000\002\041\005\000\002\041\004\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\054\004\000\002\054\004\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\042\006\000\002\043\003\000\002\043\003\000" +
    "\002\044\003\000\002\045\005\000\002\053\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\024\005\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\004\062\ufffe\063\ufffe\001\002\000\016" +
    "\040\013\041\017\042\012\043\015\044\014\062\021\001" +
    "\002\000\022\005\ufffa\040\013\041\017\042\012\043\015" +
    "\044\014\062\021\063\016\001\002\000\024\005\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\004\062\ufffe" +
    "\063\ufffe\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\022\005\uffff\040\uffff\041\uffff\042\uffff" +
    "\043\uffff\044\uffff\062\uffff\063\uffff\001\002\000\006\055" +
    "\uffea\064\uffea\001\002\000\006\055\uffe9\064\uffe9\001\002" +
    "\000\006\055\uffe6\064\uffe6\001\002\000\006\055\uffe7\064" +
    "\uffe7\001\002\000\004\064\035\001\002\000\006\055\uffe8" +
    "\064\uffe8\001\002\000\004\064\035\001\002\000\006\055" +
    "\uffe5\064\uffe5\001\002\000\046\004\ufffa\005\ufffa\007\ufffa" +
    "\032\ufffa\035\ufffa\036\ufffa\037\ufffa\040\013\041\017\042" +
    "\012\043\015\044\014\046\ufffa\047\ufffa\052\ufffa\062\021" +
    "\063\016\064\ufffa\001\002\000\004\005\024\001\002\000" +
    "\004\053\311\001\002\000\006\002\uffd9\006\uffd9\001\002" +
    "\000\006\002\000\006\030\001\002\000\006\002\uffda\006" +
    "\uffda\001\002\000\016\040\013\041\017\042\012\043\015" +
    "\044\014\062\021\001\002\000\006\055\ufff5\064\ufff5\001" +
    "\002\000\006\055\034\064\035\001\002\000\004\051\037" +
    "\001\002\000\004\054\036\001\002\000\050\010\uff8e\011" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e" +
    "\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\050\uff8e\051" +
    "\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\001\002\000\016" +
    "\013\ufff6\050\ufff6\055\ufff6\056\ufff6\057\ufff6\064\ufff6\001" +
    "\002\000\020\040\013\041\017\042\012\043\015\044\014" +
    "\050\uffde\062\021\001\002\000\004\050\uffdf\001\002\000" +
    "\004\064\035\001\002\000\006\050\uffdd\056\305\001\002" +
    "\000\004\050\044\001\002\000\004\053\045\001\002\000" +
    "\044\004\ufffa\007\ufffa\032\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\013\041\017\042\012\043\015\044\014\046\ufffa\047" +
    "\ufffa\052\ufffa\062\021\063\016\064\ufffa\001\002\000\026" +
    "\004\uffd7\007\uffd7\032\uffd7\035\uffd7\036\uffd7\037\uffd7\046" +
    "\uffd7\047\uffd7\052\uffd7\064\uffd7\001\002\000\026\004\051" +
    "\007\050\032\055\035\063\036\054\037\065\046\053\047" +
    "\056\052\uffe2\064\035\001\002\000\004\051\302\001\002" +
    "\000\024\014\077\015\100\064\035\065\uff8b\066\141\067" +
    "\133\070\276\071\272\072\uff8b\001\002\000\004\057\270" +
    "\001\002\000\004\051\264\001\002\000\004\051\243\001" +
    "\002\000\004\051\220\001\002\000\004\051\214\001\002" +
    "\000\030\004\uffd8\007\uffd8\030\uffd8\032\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\046\uffd8\047\uffd8\052\uffd8\064\uffd8\001\002" +
    "\000\030\004\uffd5\007\uffd5\030\uffd5\032\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\046\uffd5\047\uffd5\052\uffd5\064\uffd5\001\002" +
    "\000\006\013\211\051\157\001\002\000\030\004\uffd6\007" +
    "\uffd6\030\uffd6\032\uffd6\035\uffd6\036\uffd6\037\uffd6\046\uffd6" +
    "\047\uffd6\052\uffd6\064\uffd6\001\002\000\004\051\117\001" +
    "\002\000\004\052\116\001\002\000\004\051\066\001\002" +
    "\000\004\064\035\001\002\000\004\050\070\001\002\000" +
    "\004\053\071\001\002\000\010\027\uffc7\031\072\052\uffc7" +
    "\001\002\000\004\060\112\001\002\000\006\027\075\052" +
    "\076\001\002\000\006\027\uffc8\052\uffc8\001\002\000\014" +
    "\014\077\015\100\065\uff8b\066\103\067\104\001\002\000" +
    "\030\004\uffd1\007\uffd1\030\uffd1\032\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\046\uffd1\047\uffd1\052\uffd1\064\uffd1\001\002\000" +
    "\006\065\uff8d\072\uff8d\001\002\000\006\065\uff8c\072\uff8c" +
    "\001\002\000\004\065\111\001\002\000\004\060\105\001" +
    "\002\000\004\060\uffc4\001\002\000\004\060\uffc3\001\002" +
    "\000\024\007\uffd7\030\uffd7\032\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\046\uffd7\047\uffd7\064\uffd7\001\002\000\024\007\050" +
    "\030\107\032\055\035\063\036\054\037\065\046\053\047" +
    "\056\064\035\001\002\000\004\057\110\001\002\000\006" +
    "\027\uffc9\052\uffc9\001\002\000\004\060\uffc5\001\002\000" +
    "\024\007\uffd7\030\uffd7\032\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\046\uffd7\047\uffd7\064\uffd7\001\002\000\024\007\050\030" +
    "\114\032\055\035\063\036\054\037\065\046\053\047\056" +
    "\064\035\001\002\000\004\057\115\001\002\000\006\027" +
    "\uffc6\052\uffc6\001\002\000\006\002\uffe4\006\uffe4\001\002" +
    "\000\030\012\134\014\077\015\100\051\125\064\035\065" +
    "\uff8b\066\141\067\133\070\135\071\132\072\uff8b\001\002" +
    "\000\006\050\uff91\056\uff91\001\002\000\006\050\uff92\056" +
    "\uff92\001\002\000\006\065\207\072\210\001\002\000\042" +
    "\010\uffa7\011\uffa7\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\050\uff9a" +
    "\054\uff9a\056\uff9a\057\uff9a\001\002\000\012\050\uff9e\054" +
    "\uff9e\056\uff9e\057\uff9e\001\002\000\030\012\134\014\077" +
    "\015\100\051\125\064\035\065\uff8b\066\141\067\133\070" +
    "\135\071\132\072\uff8b\001\002\000\012\050\uff9b\054\uff9b" +
    "\056\uff9b\057\uff9b\001\002\000\044\010\uffaa\011\uffaa\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\050\uff9c\051\157\054\uff9c\056" +
    "\uff9c\057\uff9c\001\002\000\014\014\171\015\172\016\174" +
    "\017\175\020\173\001\002\000\006\050\165\056\162\001" +
    "\002\000\030\010\uffa8\011\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\050\uff94\054\uff94\056\uff94\057\uff94\001" +
    "\002\000\012\050\uff97\054\uff97\056\uff97\057\uff97\001\002" +
    "\000\030\012\134\014\077\015\100\051\125\064\035\065" +
    "\uff8b\066\141\067\133\070\135\071\132\072\uff8b\001\002" +
    "\000\030\010\uffa9\011\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\050\uff95\054\uff95\056\uff95\057\uff95\001\002" +
    "\000\020\010\144\011\146\021\151\022\147\023\142\024" +
    "\145\025\143\001\002\000\012\050\uff9d\054\uff9d\056\uff9d" +
    "\057\uff9d\001\002\000\006\050\uff90\056\uff90\001\002\000" +
    "\012\050\uff96\054\uff96\056\uff96\057\uff96\001\002\000\010" +
    "\064\uffbe\070\uffbe\071\uffbe\001\002\000\010\064\uffbc\070" +
    "\uffbc\071\uffbc\001\002\000\010\064\uffc2\070\uffc2\071\uffc2" +
    "\001\002\000\010\064\uffbd\070\uffbd\071\uffbd\001\002\000" +
    "\010\064\uffc1\070\uffc1\071\uffc1\001\002\000\010\064\uffbf" +
    "\070\uffbf\071\uffbf\001\002\000\010\064\035\070\156\071" +
    "\154\001\002\000\010\064\uffc0\070\uffc0\071\uffc0\001\002" +
    "\000\014\050\uffa6\051\157\054\uffa6\056\uffa6\057\uffa6\001" +
    "\002\000\012\050\uffa3\054\uffa3\056\uffa3\057\uffa3\001\002" +
    "\000\012\050\uffa4\054\uffa4\056\uffa4\057\uffa4\001\002\000" +
    "\012\050\uffa1\054\uffa1\056\uffa1\057\uffa1\001\002\000\012" +
    "\050\uffa5\054\uffa5\056\uffa5\057\uffa5\001\002\000\030\012" +
    "\134\014\077\015\100\051\125\064\035\065\uff8b\066\141" +
    "\067\133\070\135\071\132\072\uff8b\001\002\000\006\050" +
    "\161\056\162\001\002\000\042\010\uff93\011\uff93\014\uff93" +
    "\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\050\uff93\054\uff93\056\uff93\057\uff93" +
    "\001\002\000\030\012\134\014\077\015\100\051\125\064" +
    "\035\065\uff8b\066\141\067\133\070\135\071\132\072\uff8b" +
    "\001\002\000\006\050\uff8f\056\uff8f\001\002\000\012\050" +
    "\uff9f\054\uff9f\056\uff9f\057\uff9f\001\002\000\004\053\166" +
    "\001\002\000\024\007\uffd7\032\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\046\uffd7\047\uffd7\052\uffd7\064\uffd7\001\002\000\024" +
    "\007\050\032\055\035\063\036\054\037\065\046\053\047" +
    "\056\052\170\064\035\001\002\000\030\004\uffd3\007\uffd3" +
    "\030\uffd3\032\uffd3\035\uffd3\036\uffd3\037\uffd3\046\uffd3\047" +
    "\uffd3\052\uffd3\064\uffd3\001\002\000\014\014\uffbb\015\uffbb" +
    "\064\uffbb\065\uffbb\072\uffbb\001\002\000\014\014\uffba\015" +
    "\uffba\064\uffba\065\uffba\072\uffba\001\002\000\014\014\uffb7" +
    "\015\uffb7\064\uffb7\065\uffb7\072\uffb7\001\002\000\014\014" +
    "\uffb9\015\uffb9\064\uffb9\065\uffb9\072\uffb9\001\002\000\014" +
    "\014\uffb8\015\uffb8\064\uffb8\065\uffb8\072\uffb8\001\002\000" +
    "\014\014\077\015\100\064\035\065\uff8b\072\uff8b\001\002" +
    "\000\014\050\uffae\051\157\054\uffae\056\uffae\057\uffae\001" +
    "\002\000\012\050\uffa2\054\uffa2\056\uffa2\057\uffa2\001\002" +
    "\000\006\065\203\072\204\001\002\000\012\050\uffac\054" +
    "\uffac\056\uffac\057\uffac\001\002\000\012\050\uffad\054\uffad" +
    "\056\uffad\057\uffad\001\002\000\012\050\uffab\054\uffab\056" +
    "\uffab\057\uffab\001\002\000\004\050\206\001\002\000\012" +
    "\050\uffa0\054\uffa0\056\uffa0\057\uffa0\001\002\000\024\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\050\uff99\054\uff99" +
    "\056\uff99\057\uff99\001\002\000\024\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\050\uff98\054\uff98\056\uff98\057\uff98" +
    "\001\002\000\030\012\134\014\077\015\100\051\125\064" +
    "\035\065\uff8b\066\141\067\133\070\135\071\132\072\uff8b" +
    "\001\002\000\004\057\213\001\002\000\030\004\uffeb\007" +
    "\uffeb\030\uffeb\032\uffeb\035\uffeb\036\uffeb\037\uffeb\046\uffeb" +
    "\047\uffeb\052\uffeb\064\uffeb\001\002\000\030\012\134\014" +
    "\077\015\100\051\125\064\035\065\uff8b\066\141\067\133" +
    "\070\135\071\132\072\uff8b\001\002\000\004\050\216\001" +
    "\002\000\004\057\217\001\002\000\030\004\uffcf\007\uffcf" +
    "\030\uffcf\032\uffcf\035\uffcf\036\uffcf\037\uffcf\046\uffcf\047" +
    "\uffcf\052\uffcf\064\uffcf\001\002\000\030\012\134\014\077" +
    "\015\100\051\125\064\035\065\uff8b\066\141\067\133\070" +
    "\135\071\132\072\uff8b\001\002\000\006\050\222\056\162" +
    "\001\002\000\004\053\223\001\002\000\024\007\uffd7\032" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\046\uffd7\047\uffd7\052\uffd7" +
    "\064\uffd7\001\002\000\024\007\050\032\055\035\063\036" +
    "\054\037\065\046\053\047\056\052\225\064\035\001\002" +
    "\000\034\004\uffca\007\uffca\030\uffca\032\uffca\033\226\034" +
    "\230\035\uffca\036\uffca\037\uffca\046\uffca\047\uffca\052\uffca" +
    "\064\uffca\001\002\000\004\053\240\001\002\000\030\004" +
    "\uffd4\007\uffd4\030\uffd4\032\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\046\uffd4\047\uffd4\052\uffd4\064\uffd4\001\002\000\004\051" +
    "\231\001\002\000\030\012\134\014\077\015\100\051\125" +
    "\064\035\065\uff8b\066\141\067\133\070\135\071\132\072" +
    "\uff8b\001\002\000\004\050\233\001\002\000\004\053\234" +
    "\001\002\000\024\007\uffd7\032\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\046\uffd7\047\uffd7\052\uffd7\064\uffd7\001\002\000\024" +
    "\007\050\032\055\035\063\036\054\037\065\046\053\047" +
    "\056\052\236\064\035\001\002\000\034\004\uffca\007\uffca" +
    "\030\uffca\032\uffca\033\226\034\230\035\uffca\036\uffca\037" +
    "\uffca\046\uffca\047\uffca\052\uffca\064\uffca\001\002\000\030" +
    "\004\uffcc\007\uffcc\030\uffcc\032\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\046\uffcc\047\uffcc\052\uffcc\064\uffcc\001\002\000\024" +
    "\007\uffd7\032\uffd7\035\uffd7\036\uffd7\037\uffd7\046\uffd7\047" +
    "\uffd7\052\uffd7\064\uffd7\001\002\000\024\007\050\032\055" +
    "\035\063\036\054\037\065\046\053\047\056\052\242\064" +
    "\035\001\002\000\030\004\uffcb\007\uffcb\030\uffcb\032\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\046\uffcb\047\uffcb\052\uffcb\064" +
    "\uffcb\001\002\000\004\064\035\001\002\000\004\057\245" +
    "\001\002\000\030\012\134\014\077\015\100\051\125\064" +
    "\035\065\uff8b\066\141\067\133\070\135\071\132\072\uff8b" +
    "\001\002\000\004\057\247\001\002\000\004\064\035\001" +
    "\002\000\006\014\260\015\261\001\002\000\004\050\uffb5" +
    "\001\002\000\004\050\254\001\002\000\004\050\uffb6\001" +
    "\002\000\004\053\255\001\002\000\024\007\uffd7\032\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\046\uffd7\047\uffd7\052\uffd7\064" +
    "\uffd7\001\002\000\024\007\050\032\055\035\063\036\054" +
    "\037\065\046\053\047\056\052\257\064\035\001\002\000" +
    "\030\004\uffd2\007\uffd2\030\uffd2\032\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\046\uffd2\047\uffd2\052\uffd2\064\uffd2\001\002\000" +
    "\004\014\263\001\002\000\004\015\262\001\002\000\004" +
    "\050\uffb3\001\002\000\004\050\uffb4\001\002\000\030\012" +
    "\134\014\077\015\100\051\125\064\035\065\uff8b\066\141" +
    "\067\133\070\135\071\132\072\uff8b\001\002\000\004\050" +
    "\266\001\002\000\004\057\267\001\002\000\030\004\uffd0" +
    "\007\uffd0\030\uffd0\032\uffd0\035\uffd0\036\uffd0\037\uffd0\046" +
    "\uffd0\047\uffd0\052\uffd0\064\uffd0\001\002\000\030\004\uffce" +
    "\007\uffce\030\uffce\032\uffce\035\uffce\036\uffce\037\uffce\046" +
    "\uffce\047\uffce\052\uffce\064\uffce\001\002\000\004\057\uffe0" +
    "\001\002\000\004\057\uff94\001\002\000\006\065\300\072" +
    "\301\001\002\000\004\057\277\001\002\000\004\057\uffe1" +
    "\001\002\000\004\057\uff95\001\002\000\004\052\uffe3\001" +
    "\002\000\004\057\uff99\001\002\000\004\057\uff98\001\002" +
    "\000\004\050\303\001\002\000\004\057\304\001\002\000" +
    "\030\004\uffcd\007\uffcd\030\uffcd\032\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\046\uffcd\047\uffcd\052\uffcd\064\uffcd\001\002\000" +
    "\016\040\013\041\017\042\012\043\015\044\014\062\021" +
    "\001\002\000\004\050\uffdc\001\002\000\010\050\ufff5\055" +
    "\ufff5\056\ufff5\001\002\000\010\050\uffdb\055\034\056\uffdb" +
    "\001\002\000\042\007\ufffa\032\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\013\041\017\042\012\043\015\044\014\046\ufffa" +
    "\047\ufffa\052\ufffa\062\021\063\016\064\ufffa\001\002\000" +
    "\024\007\uffd7\032\uffd7\035\uffd7\036\uffd7\037\uffd7\046\uffd7" +
    "\047\uffd7\052\uffd7\064\uffd7\001\002\000\024\007\050\032" +
    "\055\035\063\036\054\037\065\046\053\047\056\052\314" +
    "\064\035\001\002\000\006\002\ufffc\006\ufffc\001\002\000" +
    "\030\004\ufffb\005\ufffb\007\ufffb\032\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\046\ufffb\047\ufffb\052\ufffb\064\ufffb\001\002\000" +
    "\010\013\ufff5\055\ufff5\057\ufff5\001\002\000\010\013\321" +
    "\055\034\057\ufff3\001\002\000\004\057\335\001\002\000" +
    "\032\012\134\014\077\015\100\026\322\051\125\064\035" +
    "\065\uff8b\066\141\067\133\070\135\071\132\072\uff8b\001" +
    "\002\000\016\040\013\041\017\042\012\043\015\044\014" +
    "\062\021\001\002\000\004\057\ufff2\001\002\000\004\057" +
    "\ufff1\001\002\000\004\057\ufff0\001\002\000\004\057\ufff4" +
    "\001\002\000\004\055\uffec\001\002\000\004\055\332\001" +
    "\002\000\006\055\uffed\057\uffef\001\002\000\030\012\134" +
    "\014\077\015\100\051\125\064\035\065\uff8b\066\141\067" +
    "\133\070\135\071\132\072\uff8b\001\002\000\004\054\334" +
    "\001\002\000\010\013\uffee\055\uffee\057\uffee\001\002\000" +
    "\046\004\ufff9\005\ufff9\007\ufff9\032\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\046" +
    "\ufff9\047\ufff9\052\ufff9\062\ufff9\063\ufff9\064\ufff9\001\002" +
    "\000\010\013\321\055\uffec\057\ufff3\001\002\000\004\057" +
    "\343\001\002\000\010\013\321\055\uffed\057\ufff3\001\002" +
    "\000\004\057\342\001\002\000\046\004\ufff7\005\ufff7\007" +
    "\ufff7\032\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\046\ufff7\047\ufff7\052\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\001\002\000\046\004\ufff8\005\ufff8" +
    "\007\ufff8\032\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\046\ufff8\047\ufff8\052\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\001\002\000\004\064\035\001" +
    "\002\000\006\013\321\057\ufff3\001\002\000\004\057\347" +
    "\001\002\000\024\005\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\062\ufffd\063\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\010\002\006\055\004\056\005\001\001\000" +
    "\004\015\343\001\001\000\010\004\022\005\021\015\017" +
    "\001\001\000\006\055\010\056\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\335\001\001\000\002\001\001\000\004\053\315" +
    "\001\001\000\002\001\001\000\010\004\314\005\021\015" +
    "\017\001\001\000\004\003\024\001\001\000\002\001\001" +
    "\000\004\017\025\001\001\000\004\016\026\001\001\000" +
    "\002\001\001\000\004\015\030\001\001\000\004\006\031" +
    "\001\001\000\004\053\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\040\047\042\050\037\051\041\001\001\000\002\001" +
    "\001\000\004\053\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\045\005\021\015" +
    "\017\001\001\000\004\020\046\001\001\000\016\014\057" +
    "\021\056\022\061\042\051\052\063\053\060\001\001\000" +
    "\002\001\001\000\012\053\274\054\270\057\273\060\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\072\024\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\101\060\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\105\001\001\000\014\014\057" +
    "\021\056\022\061\042\051\053\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\112" +
    "\001\001\000\014\014\057\021\056\022\061\042\051\053" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\033\127\035\135\037\136\040\123\041" +
    "\137\042\122\043\130\044\120\045\117\053\126\054\125" +
    "\060\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\033\127\035\135\037\136\040\123\041\204\042\122\053" +
    "\126\054\125\060\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\033\127\035\135" +
    "\037\136\040\123\041\163\042\122\053\126\054\125\060" +
    "\121\001\001\000\002\001\001\000\004\026\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\036" +
    "\154\042\152\053\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\033\127\035\135\037\136" +
    "\040\123\041\137\042\122\043\157\044\120\045\117\053" +
    "\126\054\125\060\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\033\127\035\135\037\136\040\123\041" +
    "\162\042\122\053\126\054\125\060\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\166\001\001\000\014\014\057\021\056\022\061\042\051" +
    "\053\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\034\177\042\201\053\176\060\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\033\127\035\135\037\136\040\123\041" +
    "\211\042\122\053\126\054\125\060\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\033\127\035\135\037" +
    "\136\040\123\041\214\042\122\053\126\054\125\060\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\033\127\035\135\037\136\040\123\041\137" +
    "\042\122\043\220\044\120\045\117\053\126\054\125\060" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\223\001\001\000\014\014\057\021\056\022\061\042" +
    "\051\053\060\001\001\000\004\046\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\033" +
    "\127\035\135\037\136\040\123\041\231\042\122\053\126" +
    "\054\125\060\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\234\001\001\000\014\014\057\021\056" +
    "\022\061\042\051\053\060\001\001\000\004\046\236\001" +
    "\001\000\002\001\001\000\004\020\240\001\001\000\014" +
    "\014\057\021\056\022\061\042\051\053\060\001\001\000" +
    "\002\001\001\000\004\053\243\001\001\000\002\001\001" +
    "\000\024\033\127\035\135\037\136\040\123\041\245\042" +
    "\122\053\126\054\125\060\121\001\001\000\002\001\001" +
    "\000\012\030\251\031\252\032\250\053\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\255\001\001\000" +
    "\014\014\057\021\056\022\061\042\051\053\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\033\127\035\135" +
    "\037\136\040\123\041\264\042\122\053\126\054\125\060" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\040\050\305\051\041\001\001\000" +
    "\002\001\001\000\004\006\307\001\001\000\002\001\001" +
    "\000\010\004\311\005\021\015\017\001\001\000\004\020" +
    "\312\001\001\000\014\014\057\021\056\022\061\042\051" +
    "\053\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\316\001\001\000\004\007\317\001\001\000\002" +
    "\001\001\000\032\010\325\011\322\012\323\033\127\035" +
    "\135\037\136\040\123\041\324\042\122\053\126\054\125" +
    "\060\121\001\001\000\004\015\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\330\061\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\033\127\035\135\037\136\040\123" +
    "\041\332\042\122\053\126\054\125\060\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\336\013\337\061\327\001\001\000\002\001\001\000" +
    "\004\007\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\344\001\001\000\004\007" +
    "\345\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   // private Scanner scanner;
    int errores = 0;
    BufferedWriter bf;

    String file = "error.log";

    // public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
    //     super(s,sf);
    // }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof java_cup.runtime.Symbol) {
            ComplexSymbol token = (ComplexSymbol) info;
            if(token == null){
                System.out.println("Token nulo");
            }
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
        System.exit(0);
    }

    public void escribeEnFichero(String msg){
        try{
            if(errores == 1){
                bf = new BufferedWriter(new FileWriter(file));
            }
            bf.write(msg);
        } catch( IOException e ){

        }
    }


    public int getErrores(){
        return errores;
    }

    private int extractLine(ComplexSymbol symbol) {
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getLine();
        }
        return 0;
    }

    private int extractColumn(ComplexSymbol symbol) {
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getColumn();
        }
         return 0;
    }

    private int getLineaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getLine();
        }
        return 0;
    }

    private int getColumnaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getColumn();
        }
        return 0;
    }

    private String getValor(ComplexSymbol sym){
        // System.out.println("Fallamos en getValor");
        // return (String) sym.value;
        return "";
    }


    @Override
    public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

     @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }

     @Override
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoPrograma start_val = (NodoPrograma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DECL_CONST DECL_VARS MAIN DECL_FUNCIONES 
            {
              NodoPrograma RESULT =null;
		int dconstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dconstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDeclConst dconst = (NodoDeclConst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoMain main = (NodoMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dfuncsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfuncsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFunc dfuncs = (NodoDeclFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoPrograma(dconst,dvars, dfuncs, main, main.getLine(), main.getColumn());
                                                                                                                                                                                                            Semantico semantico = new Semantico(RESULT, parser); if(errores == 0){semantico.runProgram();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECL_CONST ::= DECL_CON DECL_CONST 
            {
              NodoDeclConst RESULT =null;
		int dconleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dconright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoConst dcon = (NodoConst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dconstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dconstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclConst dconst = (NodoDeclConst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclConst(dcon,dconst,dcon.getLine(),dcon.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECL_CONST ::= 
            {
              NodoDeclConst RESULT =null;
		 RESULT = new NodoDeclConst(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL_CON ::= tConst TIPO ID ASIGN tPuntocoma 
            {
              NodoConst RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol c = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoConst(tipo,id,asign,extractLine(c),extractColumn(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CON",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= tMain tLbracket DECL_VARS SENTS tRbracket 
            {
              NodoMain RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol main = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoMain(dvars,sents,extractLine(main),extractColumn(main)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL_VARS ::= DECL_VAR DECL_VARS 
            {
              NodoDeclVars RESULT =null;
		int dvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoVar dvar = (NodoVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclVars(dvars,dvar,dvar.getLine(),dvar.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL_VARS ::= 
            {
              NodoDeclVars RESULT =null;
		 RESULT = new NodoDeclVars(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL_VAR ::= TIPO ID DECL_ARRAY ASIGN tPuntocoma 
            {
              NodoVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoTipo t = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int darrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int darrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclArray darr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoVar(0,null,t,id,darr,asign,t.getLine(),t.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL_VAR ::= tSet ID ASIGN tPuntocoma 
            {
              NodoVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoVar(1,null,null,id,null,asign,extractLine(t),extractColumn(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECL_VAR ::= tSet ID DIM_ARRAY ASIGN tPuntocoma 
            {
              NodoVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDimArray dim = (NodoDimArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoVar(2,dim,null,id,null,asign,extractLine(t),extractColumn(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECL_ARRAY ::= DECL_ARRAY tLcorchete tRcorchete 
            {
              NodoDeclArray RESULT =null;
		int dArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclArray dArr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol lCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol rCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclArray(dArr,extractLine(lCor),extractColumn(lCor)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECL_ARRAY ::= 
            {
              NodoDeclArray RESULT =null;
		 RESULT = new NodoDeclArray(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIGN ::= tIgual T_ASIGN 
            {
              NodoAsignacion RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol igual = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tAsignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tAsignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoTipoAsignacion tAsign = (NodoTipoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacion(tAsign,extractLine(igual),extractColumn(igual)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGN ::= 
            {
              NodoAsignacion RESULT =null;
		 RESULT = new NodoAsignacion(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // T_ASIGN ::= ASIGN_NORMAL 
            {
              NodoTipoAsignacion RESULT =null;
		int asignNormalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignNormalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAsignacionNormal asignNormal = (NodoAsignacionNormal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipoAsignacion(asignNormal,null,asignNormal.getLine(),asignNormal.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // T_ASIGN ::= ASIGN_ARRAY 
            {
              NodoTipoAsignacion RESULT =null;
		int asignArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAsignacionArray asignArray = (NodoAsignacionArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipoAsignacion(null,asignArray,asignArray.getLine(),asignArray.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGN_NORMAL ::= EXPRESION 
            {
              NodoAsignacionNormal RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion expr = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacionNormal(expr, expr.getLine(), expr.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_NORMAL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGN_ARRAY ::= tNew TIPO DIM_ARRAY 
            {
              NodoAsignacionArray RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol n = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDimArray dimArray = (NodoDimArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacionArray(tipo,dimArray,extractLine(n),extractColumn(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_ARRAY",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DIM_ARRAY ::= DIMENSIONES tLcorchete EXPRESION tRcorchete 
            {
              NodoDimArray RESULT =null;
		int dimensionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dimensionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDimensiones dimensiones = (NodoDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol lCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExpresion expr = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol rCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDimArray(dimensiones,expr,extractLine(lCor),extractColumn(lCor)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DIMENSIONES ::= DIM_ARRAY 
            {
              NodoDimensiones RESULT =null;
		int dimarrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimarrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDimArray dimarr = (NodoDimArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDimensiones(dimarr, dimarr.getLine(), dimarr.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DIMENSIONES ::= 
            {
              NodoDimensiones RESULT =null;
		 RESULT = new NodoDimensiones();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // REAL_ASIGN ::= ID tIgual EXPRESION tPuntocoma 
            {
              NodoRealAsign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol igual = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcomaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcomaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol pcoma = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoRealAsign(id,exp,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REAL_ASIGN",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= tInt 
            {
              NodoTipo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol i = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_int,extractLine(i),extractColumn(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= tChar 
            {
              NodoTipo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol c = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_char,extractLine(c),extractColumn(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= tFloat 
            {
              NodoTipo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol f = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_float,extractLine(f),extractColumn(f)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= tBool 
            {
              NodoTipo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol b = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_bool,extractLine(b),extractColumn(b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO ::= tStr 
            {
              NodoTipo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_str,extractLine(s),extractColumn(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= tVoid 
            {
              NodoTipo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_void,extractLine(v),extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNC ::= tFun TIPO DECL_ARRAY ID tLparen DECL_FUNCP tRparen tLbracket DECL_VARS SENTS RETURN tRbracket 
            {
              NodoFunc RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ComplexSymbol fun = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int decarrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int decarrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoDeclArray decarr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int decfuncpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int decfuncpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoDeclFuncP decfuncp = (NodoDeclFuncP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int declvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int declvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDeclVars declvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoReturn retorno = (NodoReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new NodoFunc(tipo,decarr,id,decfuncp,declvars,sents,retorno,extractLine(fun),extractColumn(fun)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RETURN ::= tReturn RETURN_PARAM tPuntocoma 
            {
              NodoReturn RESULT =null;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol retorno = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoReturnParam exp = (NodoReturnParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoReturn(exp,extractLine(retorno),extractColumn(retorno)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RETURN ::= 
            {
              NodoReturn RESULT =null;
		 RESULT= new NodoReturn(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RETURN_PARAM ::= ID 
            {
              NodoReturnParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoReturnParam(id,extractLine(id),extractColumn(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_PARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RETURN_PARAM ::= LITERAL 
            {
              NodoReturnParam RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLiteral lit = (NodoLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoReturnParam(lit,extractLine(lit),extractColumn(lit)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_PARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECL_FUNCP ::= DECL_FUNCPARAMS 
            {
              NodoDeclFuncP RESULT =null;
		int funcpaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcparight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParams funcpa = (NodoDeclFuncParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncP(funcpa, funcpa.getLine(),funcpa.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECL_FUNCP ::= 
            {
              NodoDeclFuncP RESULT =null;
		 RESULT= new NodoDeclFuncP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECL_FUNCPARAMS ::= DECL_FUNCPARAM 
            {
              NodoDeclFuncParams RESULT =null;
		int declparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParam declparam = (NodoDeclFuncParam)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParams(declparam,declparam.getLine(),declparam.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAMS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECL_FUNCPARAMS ::= DECL_FUNCPARAM tComa DECL_FUNCPARAMS 
            {
              NodoDeclFuncParams RESULT =null;
		int declparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclFuncParam declparam = (NodoDeclFuncParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declparamsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declparamsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParams declparams = (NodoDeclFuncParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParams(declparam,declparams,declparam.getLine(),declparam.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAMS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECL_FUNCPARAM ::= TIPO ID DECL_ARRAY 
            {
              NodoDeclFuncParam RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declarrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclArray declarr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParam(tipo,id,declarr,tipo.getLine(),tipo.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAM",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECL_FUNCIONES ::= DECL_FUNCIONES FUNC 
            {
              NodoDeclFunc RESULT =null;
		int declfuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declfuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoDeclFunc declfunc = (NodoDeclFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoFunc func = (NodoFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclFunc(declfunc,func,declfunc.getLine(),declfunc.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECL_FUNCIONES ::= 
            {
              NodoDeclFunc RESULT =null;
		 RESULT = new NodoDeclFunc(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTS ::= SENTS SENT 
            {
              NodoSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoSent sent = (NodoSent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSents(sents,sent,sents.getLine(),sents.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTS ::= 
            {
              NodoSents RESULT =null;
		 RESULT= new NodoSents(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= OTRAS_SENTS 
            {
              NodoSent RESULT =null;
		int otrasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int otrasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOtrasSent otras = (NodoOtrasSent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSent(otras,null,otras.getLine(),otras.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT ::= REAL_ASIGN 
            {
              NodoSent RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoRealAsign real = (NodoRealAsign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSent(null,real,real.getLine(),real.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OTRAS_SENTS ::= tIf tLparen PARAMETROS tRparen tLbracket SENTS tRbracket ELSE_COND 
            {
              NodoOtrasSent RESULT =null;
		int tifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol tif = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoParametros parametros = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsecondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsecondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElse elsecond = (NodoElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOtrasSent(0,parametros,sents,elsecond,extractLine(tif), extractColumn(tif)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OTRAS_SENTS ::= tWhile tLparen PARAMETROS tRparen tLbracket SENTS tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int twleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int twright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComplexSymbol tw = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoParametros parametros = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(1,parametros,sents,extractLine(tw), extractColumn(tw)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OTRAS_SENTS ::= tFor tLparen ID tPuntocoma EXPRESION tPuntocoma OP_RAPIDOS tRparen tLbracket SENTS tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		ComplexSymbol tf = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oprapidosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int oprapidosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoOpRapidos oprapidos = (NodoOpRapidos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(2,tid,exp,oprapidos,sents,extractLine(tf), extractColumn(tf)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OTRAS_SENTS ::= tSwitch tLparen ID tRparen tLbracket CASOS tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComplexSymbol ts = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCase casos = (NodoCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(3,tid,casos,extractLine(ts), extractColumn(ts)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OTRAS_SENTS ::= tPrint tLparen EXPRESION tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol tp = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOtrasSent(4,exp,extractLine(tp), extractColumn(tp),-1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OTRAS_SENTS ::= tPrintln tLparen EXPRESION tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int tplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol tpl = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOtrasSent(5,exp,extractLine(tpl), extractColumn(tpl)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OTRAS_SENTS ::= LLAMADA_FUNC tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int llamFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int llamFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoLlamadaFunc llamFunc = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(6,llamFunc,llamFunc.getLine(),llamFunc.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OTRAS_SENTS ::= tIn tLparen tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol in = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT= new NodoOtrasSent(7,extractLine(in),extractColumn(in)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE_COND ::= tElif tLparen EXPRESION tRparen tLbracket SENTS tRbracket ELSE_COND 
            {
              NodoElse RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol elif = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsecondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsecondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElse elsecond = (NodoElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoElse(exp,sents,elsecond,extractLine(elif),extractColumn(elif)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELSE_COND ::= tElse tLbracket SENTS tRbracket 
            {
              NodoElse RESULT =null;
		int telseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int telseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol telse = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoElse(sents,extractLine(telse),extractColumn(telse)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSE_COND ::= 
            {
              NodoElse RESULT =null;
		 RESULT= new NodoElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASOS ::= CASOS tCase INIT_CASES tDospuntos SENTS tBreak tPuntocoma 
            {
              NodoCase RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoCase casos = (NodoCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int icaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int icaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoInitCases icase = (NodoInitCases)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoCase(casos,icase,sents,casos.getLine(), casos.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASOS ::= CASO_DEFAULT 
            {
              NodoCase RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCaseDefault def = (NodoCaseDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoCase(def,def.getLine(),def.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASOS ::= 
            {
              NodoCase RESULT =null;
		 RESULT= new NodoCase(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASO_DEFAULT ::= tDefault tDospuntos SENTS tBreak tPuntocoma 
            {
              NodoCaseDefault RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol def = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoCaseDefault(sents,extractLine(def),extractColumn(def)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO_DEFAULT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INIT_CASES ::= SIGNO tEntero 
            {
              NodoInitCases RESULT =null;
		int sgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno sg = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.tsb_int,(String)e.getLiteral(), sg, sg.getLine(),sg.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INIT_CASES ::= tLinea 
            {
              NodoInitCases RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal s = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.tsb_str,(String)s.getLiteral(),null,s.getLinea(),s.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INIT_CASES ::= tCaracter 
            {
              NodoInitCases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal c = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.tsb_char,(String)c.getLiteral(),null,c.getLinea(),c.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_LOG ::= tAnd 
            {
              NodoOpLog RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol and = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.AND, extractLine(and),extractColumn(and)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_LOG ::= tOr 
            {
              NodoOpLog RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol or = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.OR,extractLine(or),extractColumn(or)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_LOG ::= tMayor 
            {
              NodoOpLog RESULT =null;
		int mayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol may = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.MAYOR,extractLine(may),extractColumn(may)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_LOG ::= tMenor 
            {
              NodoOpLog RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol men = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.MENOR, extractLine(men),extractColumn(men)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_LOG ::= tIgualMay 
            {
              NodoOpLog RESULT =null;
		int imayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int imayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol imay = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALMAYOR,extractLine(imay),extractColumn(imay)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_LOG ::= tIgualMenor 
            {
              NodoOpLog RESULT =null;
		int imenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int imenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol imen = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALMENOR,extractLine(imen),extractColumn(imen)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_LOG ::= tIgualIgual 
            {
              NodoOpLog RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol ii = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALIGUAL,extractLine(ii),extractColumn(ii)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_ARIT ::= tSuma 
            {
              NodoOpArit RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.SUMA, extractLine(s),extractColumn(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_ARIT ::= tResta 
            {
              NodoOpArit RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.RESTA, extractLine(r),extractColumn(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_ARIT ::= tMult 
            {
              NodoOpArit RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol mu = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.MULT, extractLine(mu),extractColumn(mu)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_ARIT ::= tDiv 
            {
              NodoOpArit RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol d = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.DIV, extractLine(d),extractColumn(d)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_ARIT ::= tMod 
            {
              NodoOpArit RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol m = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.MOD, extractLine(m),extractColumn(m)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_RAPIDOS ::= OP_RAPIDO_S 
            {
              NodoOpRapidos RESULT =null;
		int rapidossumaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rapidossumaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOpRapidosSuma rapidossuma = (NodoOpRapidosSuma)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpRapidos(rapidossuma, rapidossuma.getLine(), rapidossuma.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_RAPIDOS ::= OP_RAPIDO_R 
            {
              NodoOpRapidos RESULT =null;
		int rapidosrestaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rapidosrestaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOpRapidosResta rapidosresta = (NodoOpRapidosResta)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpRapidos(rapidosresta ,rapidosresta.getLine(), rapidosresta.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_RAPIDO_S ::= ID tSuma tSuma 
            {
              NodoOpRapidosSuma RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOpRapidosSuma(tid, tid.getLine(), tid.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_S",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_RAPIDO_R ::= ID tResta tResta 
            {
              NodoOpRapidosResta RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOpRapidosResta(tid, tid.getLine(), tid.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_R",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TERMINO_1 ::= ID 
            {
              NodoTermino RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(id,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TERMINO_1 ::= SIGNO tEntero 
            {
              NodoTermino RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal entero = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino((int) entero.getLiteral(), s , entero.getLinea(), entero.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TERMINO_1 ::= LLAMADA_FUNC 
            {
              NodoTermino RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(funcCall,funcCall.getLine(),funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TERMINO_1 ::= SIGNO tDecimal 
            {
              NodoTermino RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal decimal = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino((float) decimal.getLiteral() , s , s.getLine(),s.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TERMINO_2 ::= ID 
            {
              NodoTermino RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(id,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TERMINO_2 ::= SIGNO tEntero 
            {
              NodoTermino RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal entero = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino((int) entero.getLiteral(), s, entero.getLinea(), entero.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TERMINO_2 ::= LLAMADA_FUNC 
            {
              NodoTermino RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(funcCall,funcCall.getLine(),funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TERMINO_2 ::= SIGNO tDecimal 
            {
              NodoTermino RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal decimal = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino((float) decimal.getLiteral(), s, s.getLine(),s.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TERMINOLOG_1 ::= ID 
            {
              NodoTerminoLog RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(id,-1,null,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TERMINOLOG_1 ::= tTrue 
            {
              NodoTerminoLog RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal t = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null,1,null,t.getLinea(),t.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TERMINOLOG_1 ::= tFalse 
            {
              NodoTerminoLog RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal f = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null,0,null,f.getLinea(),f.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TERMINOLOG_1 ::= LLAMADA_FUNC 
            {
              NodoTerminoLog RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TERMINOLOG_2 ::= ID 
            {
              NodoTerminoLog RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(id,-1,null,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TERMINOLOG_2 ::= tTrue 
            {
              NodoTerminoLog RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal t = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null,1,null,t.getLinea(),t.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TERMINOLOG_2 ::= tFalse 
            {
              NodoTerminoLog RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal f = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null,0,null,f.getLinea(),f.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TERMINOLOG_2 ::= LLAMADA_FUNC 
            {
              NodoTerminoLog RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION_ARITM ::= TERMINO_1 OP_ARIT TERMINO_2 
            {
              NodoExpresionArit RESULT =null;
		int term1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoTermino term1 = (NodoTermino)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOpArit oparit = (NodoOpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoTermino term2 = (NodoTermino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoExpresionArit(term1,oparit,term2,term1.getLine(),term2.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITM",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION_LOG ::= TERMINOLOG_1 OP_LOG TERMINOLOG_2 
            {
              NodoExpresionLog RESULT =null;
		int tlog1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tlog1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoTerminoLog tlog1 = (NodoTerminoLog)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOpLog oplog = (NodoOpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tlog2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tlog2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoTerminoLog tlog2 = (NodoTerminoLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoExpresionLog(tlog1,oplog,tlog2,tlog1.getLine(),tlog1.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= tLparen EXPRESION tRparen 
            {
              NodoExpresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoExpresion(e, null, null, null,null, null, -1, null, extractLine(v),extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= tNot EXPRESION 
            {
              NodoExpresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, e, null, null,null, null, -1, null, extractLine(v),extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPRESION_LOG 
            {
              NodoExpresion RESULT =null;
		int elogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresionLog elog = (NodoExpresionLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, elog,null, null, -1, null, elog.getLine(), elog.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPRESION_ARITM 
            {
              NodoExpresion RESULT =null;
		int earitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresionArit earit = (NodoExpresionArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, earit, null,null, null, -1, null, earit.getLine(), earit.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= ID 
            {
              NodoExpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, null,id, null, -1, null, id.getLine(), id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= LITERAL 
            {
              NodoExpresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLiteral l = (NodoLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, null,null, l, -1, null, l.getLine(), l.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= LLAMADA_FUNC 
            {
              NodoExpresion RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, null,null, null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LITERAL ::= SIGNO tEntero 
            {
              NodoLiteral RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal i = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(s,(String) i.getLiteral(), Tipo.tsb_int, i.getLinea(), i.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LITERAL ::= SIGNO tDecimal 
            {
              NodoLiteral RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal d = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(s,(String) d.getLiteral(), Tipo.tsb_float, d.getLinea(),d.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LITERAL ::= tCaracter 
            {
              NodoLiteral RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal c = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,(String) c.getLiteral(),Tipo.tsb_char,c.getLinea(),c.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LITERAL ::= tLinea 
            {
              NodoLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,(String) l.getLiteral(),Tipo.tsb_str,l.getLinea(),l.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LITERAL ::= tTrue 
            {
              NodoLiteral RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal t = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,"-1",Tipo.tsb_bool,t.getLinea(),t.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LITERAL ::= tFalse 
            {
              NodoLiteral RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal f = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,"0",Tipo.tsb_bool,f.getLinea(),f.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LLAMADA_FUNC ::= ID tLparen PARAMETROS tRparen 
            {
              NodoLlamadaFunc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoParametros param = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoLlamadaFunc(id,param,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNC",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAMETROS ::= PARAM_SIMPLE 
            {
              NodoParametros RESULT =null;
		int simpleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simpleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoParamSimple simple = (NodoParamSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParametros(simple,simple.getLine(),simple.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMETROS ::= PARAM_COMPUESTO 
            {
              NodoParametros RESULT =null;
		int compuestoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int compuestoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoParamCompuesto compuesto = (NodoParamCompuesto)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParametros(compuesto, compuesto.getLine(),compuesto.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAM_SIMPLE ::= EXPRESION 
            {
              NodoParamSimple RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParamSimple(exp,exp.getLine(),exp.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_SIMPLE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAM_COMPUESTO ::= PARAMETROS tComa EXPRESION 
            {
              NodoParamCompuesto RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoParametros param = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParamCompuesto(param,exp,param.getLine(),param.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_COMPUESTO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ID ::= tId 
            {
              NodoId RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal valor = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoId((String)valor.getLiteral(), valor.getLinea(),valor.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SIGNO ::= tSuma 
            {
              NodoSigno RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoSigno(1, extractLine(s),extractColumn(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SIGNO ::= tResta 
            {
              NodoSigno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoSigno(-1, extractLine(r),extractColumn(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SIGNO ::= 
            {
              NodoSigno RESULT =null;
		 RESULT = new NodoSigno(1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
