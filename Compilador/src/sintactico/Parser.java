
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java.io.*;
import sintactico.arbol.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import semantico.Semantico;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\006\000\002\055" +
    "\004\000\002\055\002\000\002\056\007\000\002\003\007" +
    "\000\002\004\004\000\002\004\002\000\002\005\007\000" +
    "\002\006\005\000\002\006\002\000\002\007\004\000\002" +
    "\007\002\000\002\010\003\000\002\010\003\000\002\011" +
    "\003\000\002\012\005\000\002\013\006\000\002\013\002" +
    "\000\002\014\006\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\016\000\002\052\005\000\002\052" +
    "\002\000\002\047\003\000\002\047\002\000\002\050\003" +
    "\000\002\050\005\000\002\051\005\000\002\017\004\000" +
    "\002\017\002\000\002\020\004\000\002\020\002\000\002" +
    "\021\003\000\002\021\003\000\002\022\012\000\002\022" +
    "\011\000\002\022\015\000\002\022\011\000\002\022\007" +
    "\000\002\022\007\000\002\022\004\000\002\022\006\000" +
    "\002\046\012\000\002\046\006\000\002\046\002\000\002" +
    "\023\011\000\002\023\003\000\002\023\002\000\002\024" +
    "\007\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\005\000\002\032\005\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\037\005\000\002\040\005\000\002\041\005\000\002\041" +
    "\004\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\042\006\000\002\043" +
    "\003\000\002\043\003\000\002\044\003\000\002\045\005" +
    "\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\022\005\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\004\047\ufffe\071\ufffe\001\002\000\016\041\016" +
    "\042\012\043\014\044\013\047\015\071\020\001\002\000" +
    "\020\005\ufffa\041\016\042\012\043\014\044\013\047\015" +
    "\071\020\001\002\000\022\005\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\004\047\ufffe\071\ufffe\001\002\000\004" +
    "\002\010\001\002\000\004\002\001\001\002\000\020\005" +
    "\uffff\041\uffff\042\uffff\043\uffff\044\uffff\047\uffff\071\uffff" +
    "\001\002\000\010\055\uffed\064\uffed\066\uffed\001\002\000" +
    "\010\055\uffe9\064\uffe9\066\uffe9\001\002\000\010\055\uffea" +
    "\064\uffea\066\uffea\001\002\000\010\055\uffec\064\uffec\066" +
    "\uffec\001\002\000\010\055\uffeb\064\uffeb\066\uffeb\001\002" +
    "\000\004\055\034\001\002\000\010\055\uffe8\064\uffe8\066" +
    "\uffe8\001\002\000\044\004\ufffa\005\ufffa\007\ufffa\032\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\041\016\042\012\043\014\044" +
    "\013\047\015\053\ufffa\054\ufffa\055\ufffa\061\ufffa\071\020" +
    "\001\002\000\004\005\023\001\002\000\004\062\274\001" +
    "\002\000\006\002\uffde\006\uffde\001\002\000\006\002\000" +
    "\006\027\001\002\000\006\002\uffdf\006\uffdf\001\002\000" +
    "\016\041\016\042\012\043\014\044\013\047\015\071\020" +
    "\001\002\000\006\055\ufff7\064\ufff7\001\002\000\006\055" +
    "\034\064\033\001\002\000\004\060\036\001\002\000\004" +
    "\063\035\001\002\000\050\010\uff93\011\uff93\013\uff93\014" +
    "\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\057\uff93\060\uff93\063\uff93\064" +
    "\uff93\065\uff93\066\uff93\001\002\000\016\013\ufff8\055\ufff8" +
    "\057\ufff8\064\ufff8\065\ufff8\066\ufff8\001\002\000\020\041" +
    "\016\042\012\043\014\044\013\047\015\057\uffe3\071\020" +
    "\001\002\000\004\057\uffe4\001\002\000\004\055\034\001" +
    "\002\000\006\057\uffe2\065\270\001\002\000\004\057\043" +
    "\001\002\000\004\062\044\001\002\000\042\004\ufffa\007" +
    "\ufffa\032\ufffa\035\ufffa\036\ufffa\037\ufffa\041\016\042\012" +
    "\043\014\044\013\047\015\053\ufffa\054\ufffa\055\ufffa\061" +
    "\ufffa\071\020\001\002\000\026\004\uffdc\007\uffdc\032\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\053\uffdc\054\uffdc\055\uffdc\061" +
    "\uffdc\001\002\000\026\004\050\007\047\032\053\035\062" +
    "\036\054\037\064\053\052\054\055\055\034\061\uffe5\001" +
    "\002\000\004\060\265\001\002\000\024\012\130\040\127" +
    "\046\136\050\126\051\132\052\125\055\034\056\131\060" +
    "\120\001\002\000\004\066\262\001\002\000\004\060\256" +
    "\001\002\000\004\060\233\001\002\000\004\060\212\001" +
    "\002\000\004\060\206\001\002\000\030\004\uffdd\007\uffdd" +
    "\030\uffdd\032\uffdd\035\uffdd\036\uffdd\037\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\061\uffdd\001\002\000\030\004\uffda\007\uffda" +
    "\030\uffda\032\uffda\035\uffda\036\uffda\037\uffda\053\uffda\054" +
    "\uffda\055\uffda\061\uffda\001\002\000\006\013\203\060\154" +
    "\001\002\000\030\004\uffdb\007\uffdb\030\uffdb\032\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\053\uffdb\054\uffdb\055\uffdb\061\uffdb" +
    "\001\002\000\004\060\113\001\002\000\004\061\112\001" +
    "\002\000\004\060\065\001\002\000\004\055\034\001\002" +
    "\000\004\057\067\001\002\000\004\062\070\001\002\000" +
    "\010\027\uffcc\031\071\061\uffcc\001\002\000\004\067\106" +
    "\001\002\000\006\027\074\061\075\001\002\000\006\027" +
    "\uffcd\061\uffcd\001\002\000\010\046\100\047\101\056\077" +
    "\001\002\000\030\004\uffd6\007\uffd6\030\uffd6\032\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\053\uffd6\054\uffd6\055\uffd6\061\uffd6" +
    "\001\002\000\004\067\102\001\002\000\004\067\uffca\001" +
    "\002\000\004\067\uffc9\001\002\000\004\067\uffc8\001\002" +
    "\000\024\007\uffdc\030\uffdc\032\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\001\002\000\024\007\047" +
    "\030\104\032\053\035\062\036\054\037\064\053\052\054" +
    "\055\055\034\001\002\000\004\066\105\001\002\000\006" +
    "\027\uffce\061\uffce\001\002\000\024\007\uffdc\030\uffdc\032" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\001\002\000\024\007\047\030\110\032\053\035\062\036" +
    "\054\037\064\053\052\054\055\055\034\001\002\000\004" +
    "\066\111\001\002\000\006\027\uffcb\061\uffcb\001\002\000" +
    "\006\002\uffe7\006\uffe7\001\002\000\024\012\130\040\127" +
    "\046\136\050\126\051\132\052\125\055\034\056\131\060" +
    "\120\001\002\000\006\057\uff96\065\uff96\001\002\000\006" +
    "\057\uff97\065\uff97\001\002\000\042\010\uffac\011\uffac\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffac\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\057\uff9d\063\uff9d\065\uff9d\066" +
    "\uff9d\001\002\000\012\057\uffa3\063\uffa3\065\uffa3\066\uffa3" +
    "\001\002\000\024\012\130\040\127\046\136\050\126\051" +
    "\132\052\125\055\034\056\131\060\120\001\002\000\012" +
    "\057\uffa0\063\uffa0\065\uffa0\066\uffa0\001\002\000\044\010" +
    "\uffaf\011\uffaf\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\057\uffa1\060" +
    "\154\063\uffa1\065\uffa1\066\uffa1\001\002\000\014\014\166" +
    "\015\167\016\171\017\172\020\170\001\002\000\006\057" +
    "\162\065\157\001\002\000\030\010\uffad\011\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\025\uffad\057\uff9e\063\uff9e\065" +
    "\uff9e\066\uff9e\001\002\000\024\014\uffb4\015\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\057\uff9b\063\uff9b\065\uff9b\066\uff9b\001" +
    "\002\000\012\057\uff9a\063\uff9a\065\uff9a\066\uff9a\001\002" +
    "\000\024\012\130\040\127\046\136\050\126\051\132\052" +
    "\125\055\034\056\131\060\120\001\002\000\024\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\057\uff9c\063\uff9c\065" +
    "\uff9c\066\uff9c\001\002\000\030\010\uffae\011\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\057\uff9f\063\uff9f\065" +
    "\uff9f\066\uff9f\001\002\000\020\010\141\011\143\021\146" +
    "\022\144\023\137\024\142\025\140\001\002\000\012\057" +
    "\uffa2\063\uffa2\065\uffa2\066\uffa2\001\002\000\006\057\uff95" +
    "\065\uff95\001\002\000\012\057\uff99\063\uff99\065\uff99\066" +
    "\uff99\001\002\000\010\051\uffc3\052\uffc3\055\uffc3\001\002" +
    "\000\010\051\uffc1\052\uffc1\055\uffc1\001\002\000\010\051" +
    "\uffc7\052\uffc7\055\uffc7\001\002\000\010\051\uffc2\052\uffc2" +
    "\055\uffc2\001\002\000\010\051\uffc6\052\uffc6\055\uffc6\001" +
    "\002\000\010\051\uffc4\052\uffc4\055\uffc4\001\002\000\010" +
    "\051\153\052\151\055\034\001\002\000\010\051\uffc5\052" +
    "\uffc5\055\uffc5\001\002\000\014\057\uffab\060\154\063\uffab" +
    "\065\uffab\066\uffab\001\002\000\012\057\uffa8\063\uffa8\065" +
    "\uffa8\066\uffa8\001\002\000\012\057\uffa9\063\uffa9\065\uffa9" +
    "\066\uffa9\001\002\000\012\057\uffa6\063\uffa6\065\uffa6\066" +
    "\uffa6\001\002\000\012\057\uffaa\063\uffaa\065\uffaa\066\uffaa" +
    "\001\002\000\024\012\130\040\127\046\136\050\126\051" +
    "\132\052\125\055\034\056\131\060\120\001\002\000\006" +
    "\057\156\065\157\001\002\000\042\010\uff98\011\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\025\uff98\057\uff98\063\uff98\065\uff98\066" +
    "\uff98\001\002\000\024\012\130\040\127\046\136\050\126" +
    "\051\132\052\125\055\034\056\131\060\120\001\002\000" +
    "\006\057\uff94\065\uff94\001\002\000\012\057\uffa4\063\uffa4" +
    "\065\uffa4\066\uffa4\001\002\000\004\062\163\001\002\000" +
    "\024\007\uffdc\032\uffdc\035\uffdc\036\uffdc\037\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\061\uffdc\001\002\000\024\007\047\032" +
    "\053\035\062\036\054\037\064\053\052\054\055\055\034" +
    "\061\165\001\002\000\030\004\uffd8\007\uffd8\030\uffd8\032" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\061\uffd8\001\002\000\010\050\uffc0\055\uffc0\056\uffc0\001" +
    "\002\000\010\050\uffbf\055\uffbf\056\uffbf\001\002\000\010" +
    "\050\uffbc\055\uffbc\056\uffbc\001\002\000\010\050\uffbe\055" +
    "\uffbe\056\uffbe\001\002\000\010\050\uffbd\055\uffbd\056\uffbd" +
    "\001\002\000\010\050\200\055\034\056\177\001\002\000" +
    "\014\057\uffb3\060\154\063\uffb3\065\uffb3\066\uffb3\001\002" +
    "\000\012\057\uffa7\063\uffa7\065\uffa7\066\uffa7\001\002\000" +
    "\012\057\uffb1\063\uffb1\065\uffb1\066\uffb1\001\002\000\012" +
    "\057\uffb2\063\uffb2\065\uffb2\066\uffb2\001\002\000\012\057" +
    "\uffb0\063\uffb0\065\uffb0\066\uffb0\001\002\000\004\057\202" +
    "\001\002\000\012\057\uffa5\063\uffa5\065\uffa5\066\uffa5\001" +
    "\002\000\024\012\130\040\127\046\136\050\126\051\132" +
    "\052\125\055\034\056\131\060\120\001\002\000\004\066" +
    "\205\001\002\000\030\004\uffee\007\uffee\030\uffee\032\uffee" +
    "\035\uffee\036\uffee\037\uffee\053\uffee\054\uffee\055\uffee\061" +
    "\uffee\001\002\000\024\012\130\040\127\046\136\050\126" +
    "\051\132\052\125\055\034\056\131\060\120\001\002\000" +
    "\004\057\210\001\002\000\004\066\211\001\002\000\030" +
    "\004\uffd4\007\uffd4\030\uffd4\032\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\061\uffd4\001\002\000\004" +
    "\055\034\001\002\000\004\066\214\001\002\000\024\012" +
    "\130\040\127\046\136\050\126\051\132\052\125\055\034" +
    "\056\131\060\120\001\002\000\004\066\216\001\002\000" +
    "\004\055\034\001\002\000\006\014\227\015\230\001\002" +
    "\000\004\057\uffba\001\002\000\004\057\223\001\002\000" +
    "\004\057\uffbb\001\002\000\004\062\224\001\002\000\024" +
    "\007\uffdc\032\uffdc\035\uffdc\036\uffdc\037\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\061\uffdc\001\002\000\024\007\047\032\053" +
    "\035\062\036\054\037\064\053\052\054\055\055\034\061" +
    "\226\001\002\000\030\004\uffd7\007\uffd7\030\uffd7\032\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\053\uffd7\054\uffd7\055\uffd7\061" +
    "\uffd7\001\002\000\004\014\232\001\002\000\004\015\231" +
    "\001\002\000\004\057\uffb8\001\002\000\004\057\uffb9\001" +
    "\002\000\024\012\130\040\127\046\136\050\126\051\132" +
    "\052\125\055\034\056\131\060\120\001\002\000\006\057" +
    "\235\065\157\001\002\000\004\062\236\001\002\000\024" +
    "\007\uffdc\032\uffdc\035\uffdc\036\uffdc\037\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\061\uffdc\001\002\000\024\007\047\032\053" +
    "\035\062\036\054\037\064\053\052\054\055\055\034\061" +
    "\240\001\002\000\034\004\uffcf\007\uffcf\030\uffcf\032\uffcf" +
    "\033\241\034\243\035\uffcf\036\uffcf\037\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\061\uffcf\001\002\000\004\062\253\001\002" +
    "\000\030\004\uffd9\007\uffd9\030\uffd9\032\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\053\uffd9\054\uffd9\055\uffd9\061\uffd9\001\002" +
    "\000\004\060\244\001\002\000\024\012\130\040\127\046" +
    "\136\050\126\051\132\052\125\055\034\056\131\060\120" +
    "\001\002\000\004\057\246\001\002\000\004\062\247\001" +
    "\002\000\024\007\uffdc\032\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\061\uffdc\001\002\000\024\007" +
    "\047\032\053\035\062\036\054\037\064\053\052\054\055" +
    "\055\034\061\251\001\002\000\034\004\uffcf\007\uffcf\030" +
    "\uffcf\032\uffcf\033\241\034\243\035\uffcf\036\uffcf\037\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\061\uffcf\001\002\000\030\004" +
    "\uffd1\007\uffd1\030\uffd1\032\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\061\uffd1\001\002\000\024\007" +
    "\uffdc\032\uffdc\035\uffdc\036\uffdc\037\uffdc\053\uffdc\054\uffdc" +
    "\055\uffdc\061\uffdc\001\002\000\024\007\047\032\053\035" +
    "\062\036\054\037\064\053\052\054\055\055\034\061\255" +
    "\001\002\000\030\004\uffd0\007\uffd0\030\uffd0\032\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\053\uffd0\054\uffd0\055\uffd0\061\uffd0" +
    "\001\002\000\024\012\130\040\127\046\136\050\126\051" +
    "\132\052\125\055\034\056\131\060\120\001\002\000\004" +
    "\057\260\001\002\000\004\066\261\001\002\000\030\004" +
    "\uffd5\007\uffd5\030\uffd5\032\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\061\uffd5\001\002\000\030\004" +
    "\uffd3\007\uffd3\030\uffd3\032\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\061\uffd3\001\002\000\004\066" +
    "\264\001\002\000\004\061\uffe6\001\002\000\004\057\266" +
    "\001\002\000\004\066\267\001\002\000\030\004\uffd2\007" +
    "\uffd2\030\uffd2\032\uffd2\035\uffd2\036\uffd2\037\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\061\uffd2\001\002\000\016\041\016\042" +
    "\012\043\014\044\013\047\015\071\020\001\002\000\004" +
    "\057\uffe1\001\002\000\010\057\ufff7\064\ufff7\065\ufff7\001" +
    "\002\000\010\057\uffe0\064\033\065\uffe0\001\002\000\040" +
    "\007\ufffa\032\ufffa\035\ufffa\036\ufffa\037\ufffa\041\016\042" +
    "\012\043\014\044\013\047\015\053\ufffa\054\ufffa\055\ufffa" +
    "\061\ufffa\071\020\001\002\000\024\007\uffdc\032\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\053\uffdc\054\uffdc\055\uffdc\061\uffdc" +
    "\001\002\000\024\007\047\032\053\035\062\036\054\037" +
    "\064\053\052\054\055\055\034\061\277\001\002\000\006" +
    "\002\ufffc\006\ufffc\001\002\000\030\004\ufffb\005\ufffb\007" +
    "\ufffb\032\ufffb\035\ufffb\036\ufffb\037\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\061\ufffb\001\002\000\010\013\ufff7\064\ufff7\066" +
    "\ufff7\001\002\000\010\013\304\064\033\066\ufff5\001\002" +
    "\000\004\066\317\001\002\000\026\012\130\026\305\040" +
    "\127\046\136\050\126\051\132\052\125\055\034\056\131" +
    "\060\120\001\002\000\016\041\016\042\012\043\014\044" +
    "\013\047\015\071\020\001\002\000\004\066\ufff4\001\002" +
    "\000\004\066\ufff3\001\002\000\004\066\ufff2\001\002\000" +
    "\004\066\ufff6\001\002\000\006\064\uffef\066\uffef\001\002" +
    "\000\006\064\314\066\ufff1\001\002\000\024\012\130\040" +
    "\127\046\136\050\126\051\132\052\125\055\034\056\131" +
    "\060\120\001\002\000\004\063\316\001\002\000\006\064" +
    "\ufff0\066\ufff0\001\002\000\044\004\ufff9\005\ufff9\007\ufff9" +
    "\032\ufff9\035\ufff9\036\ufff9\037\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\044\ufff9\047\ufff9\053\ufff9\054\ufff9\055\ufff9\061\ufff9" +
    "\071\ufff9\001\002\000\004\055\034\001\002\000\006\013" +
    "\304\066\ufff5\001\002\000\004\066\323\001\002\000\022" +
    "\005\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\047" +
    "\ufffd\071\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\321\000\010\002\006\055\004\056\005\001\001\000" +
    "\004\015\317\001\001\000\010\004\021\005\020\015\016" +
    "\001\001\000\006\055\010\056\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\300\001\001\000\002\001\001" +
    "\000\010\004\277\005\020\015\016\001\001\000\004\003" +
    "\023\001\001\000\002\001\001\000\004\017\024\001\001" +
    "\000\004\016\025\001\001\000\002\001\001\000\004\015" +
    "\027\001\001\000\004\006\030\001\001\000\004\053\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\037\047\041\050\036" +
    "\051\040\001\001\000\002\001\001\000\004\053\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\044\005\020\015\016\001\001\000\004\020" +
    "\045\001\001\000\016\014\056\021\055\022\060\042\050" +
    "\052\062\053\057\001\001\000\002\001\001\000\022\033" +
    "\122\035\132\037\133\040\116\041\262\042\115\053\121" +
    "\054\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\071\024\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\102\001" +
    "\001\000\014\014\056\021\055\022\060\042\050\053\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\106\001\001\000\014\014\056\021\055\022\060\042\050" +
    "\053\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\033\122\035\132\037\133\040\116" +
    "\041\134\042\115\043\123\044\114\045\113\053\121\054" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\033\122\035\132\037" +
    "\133\040\116\041\200\042\115\053\121\054\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\033\122\035\132\037\133\040" +
    "\116\041\160\042\115\053\121\054\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\036\151" +
    "\042\147\053\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\033\122\035\132\037\133\040" +
    "\116\041\134\042\115\043\154\044\114\045\113\053\121" +
    "\054\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\033\122\035\132\037\133\040\116\041\157\042\115" +
    "\053\121\054\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\163\001\001\000\014" +
    "\014\056\021\055\022\060\042\050\053\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\174\042\175\053\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\033\122" +
    "\035\132\037\133\040\116\041\203\042\115\053\121\054" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\033\122\035\132\037\133\040\116\041\206\042\115\053" +
    "\121\054\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\212\001\001\000\002\001" +
    "\001\000\022\033\122\035\132\037\133\040\116\041\214" +
    "\042\115\053\121\054\120\001\001\000\002\001\001\000" +
    "\012\030\220\031\221\032\217\053\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\224\001\001\000\014" +
    "\014\056\021\055\022\060\042\050\053\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\033\122\035\132\037" +
    "\133\040\116\041\134\042\115\043\233\044\114\045\113" +
    "\053\121\054\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\236\001\001\000\014\014\056\021\055" +
    "\022\060\042\050\053\057\001\001\000\004\046\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\033\122\035\132\037\133\040\116\041\244\042" +
    "\115\053\121\054\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\247\001\001\000\014\014\056\021" +
    "\055\022\060\042\050\053\057\001\001\000\004\046\251" +
    "\001\001\000\002\001\001\000\004\020\253\001\001\000" +
    "\014\014\056\021\055\022\060\042\050\053\057\001\001" +
    "\000\002\001\001\000\022\033\122\035\132\037\133\040" +
    "\116\041\256\042\115\053\121\054\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\037\050" +
    "\270\051\040\001\001\000\002\001\001\000\004\006\272" +
    "\001\001\000\002\001\001\000\010\004\274\005\020\015" +
    "\016\001\001\000\004\020\275\001\001\000\014\014\056" +
    "\021\055\022\060\042\050\053\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\301\001\001\000\004" +
    "\007\302\001\001\000\002\001\001\000\030\010\310\011" +
    "\305\012\306\033\122\035\132\037\133\040\116\041\307" +
    "\042\115\053\121\054\120\001\001\000\004\015\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\312\001\001\000\002\001" +
    "\001\000\022\033\122\035\132\037\133\040\116\041\314" +
    "\042\115\053\121\054\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\320\001\001" +
    "\000\004\007\321\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   // private Scanner scanner;
    int errores = 0;
    BufferedWriter bf;

    String file = "error.log";


    @Override
    public void report_error(String msg, Object nodo){
        errores++;
        if(nodo!=null){
            if(nodo instanceof java_cup.runtime.Symbol){
                ComplexSymbol token = (ComplexSymbol) nodo;
                Location l = token.getLeft();
                msg += ", (Linea,Columna) => ("+l.getLine()+","+l.getColumn()+")\n";
            }

            if(nodo instanceof Nodo){
                Nodo n = (Nodo) nodo;
                    msg += "Error Semantico, (Linea,Columna) => ("+n.getLine()+","+n.getColumn()+")\n";
            }
            escribeEnFichero(msg);
        }
    }

    public void escribeEnFichero(String msg){
        try{
            if(errores == 1){
                bf = new BufferedWriter(new FileWriter(file));
            }
            bf.write(msg);
        } catch( IOException e ){

        }
    }


    public int getErrores(){
        return errores;
    }

    private int getLineaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getLine();
        }
        return 0;
    }

    private int getColumnaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getColumn();
        }
        return 0;
    }

    private String getValor(ComplexSymbol sym){
        return (String) sym.value;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoPrograma start_val = (NodoPrograma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DECL_CONST DECL_VARS MAIN DECL_FUNCIONES 
            {
              NodoPrograma RESULT =null;
		int dconstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dconstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDeclConst dconst = (NodoDeclConst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoMain main = (NodoMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dfuncsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfuncsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFunc dfuncs = (NodoDeclFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoPrograma(dconst,dvars, dfuncs, main, main.getLine(), main.getColumn());
                                                                                                                                                                                                            Semantico semantico = new Semantico(RESULT, parser); if(errores == 0){semantico.runProgram();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECL_CONST ::= DECL_CON DECL_CONST 
            {
              NodoDeclConst RESULT =null;
		int dconleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dconright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoConst dcon = (NodoConst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dconstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dconstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclConst dconst = (NodoDeclConst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclConst(dcon,dconst,dcon.getLine(),dcon.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECL_CONST ::= 
            {
              NodoDeclConst RESULT =null;
		 RESULT = new NodoDeclConst(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL_CON ::= tConst TIPO ID ASIGN tPuntocoma 
            {
              NodoConst RESULT =null;
		int tConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol tConst = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoConst(tipo,id,asign,getLineaToken(tConst),getColumnaToken(tConst)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CON",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= tMain tLbracket DECL_VARS SENTS tRbracket 
            {
              NodoMain RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol main = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoMain(dvars,sents,getLineaToken(main),getColumnaToken(main)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL_VARS ::= DECL_VAR DECL_VARS 
            {
              NodoDeclVars RESULT =null;
		int dvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoVar dvar = (NodoVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclVars(dvars,dvar,dvar.getLine(),dvar.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL_VARS ::= 
            {
              NodoDeclVars RESULT =null;
		 RESULT = new NodoDeclVars(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL_VAR ::= TIPO ID DECL_ARRAY ASIGN tPuntocoma 
            {
              NodoVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoTipo t = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int darrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int darrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclArray darr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoVar(t,id,darr,asign,t.getLine(),t.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL_ARRAY ::= DECL_ARRAY tLcorchete tRcorchete 
            {
              NodoDeclArray RESULT =null;
		int dArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclArray dArr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol lCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol rCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclArray(dArr,dArr.getLine(),dArr.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECL_ARRAY ::= 
            {
              NodoDeclArray RESULT =null;
		 RESULT = new NodoDeclArray(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIGN ::= tIgual T_ASIGN 
            {
              NodoAsignacion RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol igual = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tAsignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tAsignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoTipoAsignacion tAsign = (NodoTipoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacion(tAsign,getLineaToken(igual),getColumnaToken(igual)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASIGN ::= 
            {
              NodoAsignacion RESULT =null;
		 RESULT = new NodoAsignacion(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // T_ASIGN ::= ASIGN_NORMAL 
            {
              NodoTipoAsignacion RESULT =null;
		int asignNormalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignNormalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAsignacionNormal asignNormal = (NodoAsignacionNormal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipoAsignacion(asignNormal,null,asignNormal.getLine(),asignNormal.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // T_ASIGN ::= ASIGN_ARRAY 
            {
              NodoTipoAsignacion RESULT =null;
		int asignArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAsignacionArray asignArray = (NodoAsignacionArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipoAsignacion(null,asignArray,asignArray.getLine(),asignArray.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGN_NORMAL ::= EXPRESION 
            {
              NodoAsignacionNormal RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion expr = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacionNormal(expr, expr.getLine(), expr.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_NORMAL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGN_ARRAY ::= tNew TIPO DIM_ARRAY 
            {
              NodoAsignacionArray RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol n = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDimArray dimArray = (NodoDimArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacionArray(tipo,dimArray,getLineaToken(n),getColumnaToken(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_ARRAY",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DIM_ARRAY ::= DIM_ARRAY tLcorchete EXPRESION tRcorchete 
            {
              NodoDimArray RESULT =null;
		int dimArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dimArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDimArray dimArr = (NodoDimArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol lCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExpresion expr = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol rCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDimArray(dimArr,expr,dimArr.getLine(),dimArr.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DIM_ARRAY ::= 
            {
              NodoDimArray RESULT =null;
		 RESULT = new NodoDimArray(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // REAL_ASIGN ::= ID tIgual EXPRESION tPuntocoma 
            {
              NodoRealAsign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol igual = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcomaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcomaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol pcoma = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoRealAsign(id,exp,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REAL_ASIGN",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= tInt 
            {
              NodoTipo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol i = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.INT,getLineaToken(i),getColumnaToken(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= tCaracter 
            {
              NodoTipo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol c = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.CHAR,getLineaToken(c),getColumnaToken(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= tFloat 
            {
              NodoTipo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol f = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.FLOAT,getLineaToken(f),getColumnaToken(f)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= tBool 
            {
              NodoTipo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol b = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.BOOL,getLineaToken(b),getColumnaToken(b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= tStr 
            {
              NodoTipo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.STR,getLineaToken(s),getColumnaToken(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= tVoid 
            {
              NodoTipo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.VOID,getLineaToken(v),getColumnaToken(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNC ::= tFun TIPO DECL_ARRAY ID tLparen DECL_FUNCP tRparen tLbracket DECL_VARS SENTS RETURN tRbracket 
            {
              NodoFunc RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ComplexSymbol fun = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int decarrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int decarrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoDeclArray decarr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int decfuncpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int decfuncpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoDeclFuncP decfuncp = (NodoDeclFuncP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int declvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int declvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDeclVars declvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoReturn retorno = (NodoReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new NodoFunc(tipo,decarr,id,decfuncp,declvars,sents,retorno,getLineaToken(fun),getColumnaToken(fun)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETURN ::= tReturn EXPRESION tPuntocoma 
            {
              NodoReturn RESULT =null;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol retorno = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoReturn(exp,getLineaToken(retorno),getColumnaToken(retorno)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RETURN ::= 
            {
              NodoReturn RESULT =null;
		 RESULT= new NodoReturn(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECL_FUNCP ::= DECL_FUNCPARAMS 
            {
              NodoDeclFuncP RESULT =null;
		int funcpaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcparight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParams funcpa = (NodoDeclFuncParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncP(funcpa, funcpa.getLine(),funcpa.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECL_FUNCP ::= 
            {
              NodoDeclFuncP RESULT =null;
		 RESULT= new NodoDeclFuncP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECL_FUNCPARAMS ::= DECL_FUNCPARAM 
            {
              NodoDeclFuncParams RESULT =null;
		int declparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParam declparam = (NodoDeclFuncParam)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParams(declparam,declparam.getLine(),declparam.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAMS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECL_FUNCPARAMS ::= DECL_FUNCPARAM tComa DECL_FUNCPARAMS 
            {
              NodoDeclFuncParams RESULT =null;
		int declparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclFuncParam declparam = (NodoDeclFuncParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declparamsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declparamsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParams declparams = (NodoDeclFuncParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParams(declparam,declparams,declparam.getLine(),declparam.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAMS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECL_FUNCPARAM ::= TIPO ID DECL_ARRAY 
            {
              NodoDeclFuncParam RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declarrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclArray declarr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParam(tipo,id,declarr,tipo.getLine(),tipo.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAM",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECL_FUNCIONES ::= DECL_FUNCIONES FUNC 
            {
              NodoDeclFunc RESULT =null;
		int declfuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declfuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoDeclFunc declfunc = (NodoDeclFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoFunc func = (NodoFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclFunc(declfunc,func,declfunc.getLine(),declfunc.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECL_FUNCIONES ::= 
            {
              NodoDeclFunc RESULT =null;
		 RESULT = new NodoDeclFunc(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTS ::= SENTS SENT 
            {
              NodoSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoSent sent = (NodoSent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSents(sents,sent,sents.getLine(),sents.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTS ::= 
            {
              NodoSents RESULT =null;
		 RESULT= new NodoSents(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT ::= OTRAS_SENTS 
            {
              NodoSent RESULT =null;
		int otrasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int otrasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOtrasSent otras = (NodoOtrasSent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSent(otras,null,otras.getLine(),otras.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT ::= REAL_ASIGN 
            {
              NodoSent RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoRealAsign real = (NodoRealAsign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSent(null,real,real.getLine(),real.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OTRAS_SENTS ::= tIf tLparen PARAMETROS tRparen tLbracket SENTS tRbracket ELSE_COND 
            {
              NodoOtrasSent RESULT =null;
		int tifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol tif = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoParametros parametros = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsecondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsecondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElse elsecond = (NodoElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOtrasSent(0,parametros,sents,elsecond,getLineaToken(tif), getColumnaToken(tif)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OTRAS_SENTS ::= tWhile tLparen PARAMETROS tRparen tLbracket SENTS tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int twleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int twright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComplexSymbol tw = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoParametros parametros = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(1,parametros,sents,getLineaToken(tw), getColumnaToken(tw)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OTRAS_SENTS ::= tFor tLparen ID tPuntocoma EXPRESION tPuntocoma OP_RAPIDOS tRparen tLbracket SENTS tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		ComplexSymbol tf = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oprapidosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int oprapidosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoOpRapidos oprapidos = (NodoOpRapidos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(2,tid,exp,oprapidos,sents,getLineaToken(tf), getColumnaToken(tf)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OTRAS_SENTS ::= tSwitch tLparen ID tRparen tLbracket CASOS tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComplexSymbol ts = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCase casos = (NodoCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(3,tid,casos,getLineaToken(ts), getColumnaToken(ts)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OTRAS_SENTS ::= tPrint tLparen EXPRESION tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol tp = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOtrasSent(4,exp,getLineaToken(tp), getColumnaToken(tp),-1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OTRAS_SENTS ::= tPrintln tLparen EXPRESION tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int tplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol tpl = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOtrasSent(5,exp,getLineaToken(tpl), getColumnaToken(tpl)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OTRAS_SENTS ::= LLAMADA_FUNC tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int llamFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int llamFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoLlamadaFunc llamFunc = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(6,llamFunc,llamFunc.getLine(),llamFunc.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OTRAS_SENTS ::= tIn tLparen tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol in = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT= new NodoOtrasSent(7,getLineaToken(in),getColumnaToken(in)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE_COND ::= tElif tLparen EXPRESION tRparen tLbracket SENTS tRbracket ELSE_COND 
            {
              NodoElse RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol elif = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsecondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsecondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElse elsecond = (NodoElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoElse(exp,sents,elsecond,getLineaToken(elif),getColumnaToken(elif)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE_COND ::= tElse tLbracket SENTS tRbracket 
            {
              NodoElse RESULT =null;
		int telseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int telseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol telse = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoElse(sents,getLineaToken(telse),getColumnaToken(telse)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE_COND ::= 
            {
              NodoElse RESULT =null;
		 RESULT= new NodoElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASOS ::= CASOS tCase INIT_CASES tDospuntos SENTS tBreak tPuntocoma 
            {
              NodoCase RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoCase casos = (NodoCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int icaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int icaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoInitCases icase = (NodoInitCases)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoCase(casos,icase,sents,casos.getLine(), casos.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASOS ::= CASO_DEFAULT 
            {
              NodoCase RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCaseDefault def = (NodoCaseDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoCase(def,def.getLine(),def.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASOS ::= 
            {
              NodoCase RESULT =null;
		 RESULT= new NodoCase(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASO_DEFAULT ::= tDefault tDospuntos SENTS tBreak tPuntocoma 
            {
              NodoCaseDefault RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol def = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoCaseDefault(sents,getLineaToken(def),getColumnaToken(def)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO_DEFAULT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INIT_CASES ::= tEntero 
            {
              NodoInitCases RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol e = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.INT,getValor(e),getLineaToken(e),getColumnaToken(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INIT_CASES ::= tLinea 
            {
              NodoInitCases RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.STR,getValor(s),getLineaToken(s),getColumnaToken(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INIT_CASES ::= tCaracter 
            {
              NodoInitCases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol c = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.CHAR,getValor(c),getLineaToken(c),getColumnaToken(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_LOG ::= tAnd 
            {
              NodoOpLog RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol and = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.AND, getLineaToken(and),getColumnaToken(and)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_LOG ::= tOr 
            {
              NodoOpLog RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol or = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.OR,getLineaToken(or),getColumnaToken(or)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_LOG ::= tMayor 
            {
              NodoOpLog RESULT =null;
		int mayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol may = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.MAYOR,getLineaToken(may),getColumnaToken(may)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_LOG ::= tMenor 
            {
              NodoOpLog RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol men = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.MENOR, getLineaToken(men),getColumnaToken(men)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_LOG ::= tIgualMay 
            {
              NodoOpLog RESULT =null;
		int imayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int imayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol imay = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALMAYOR,getLineaToken(imay),getColumnaToken(imay)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_LOG ::= tIgualMenor 
            {
              NodoOpLog RESULT =null;
		int imenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int imenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol imen = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALMENOR,getLineaToken(imen),getColumnaToken(imen)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_LOG ::= tIgualIgual 
            {
              NodoOpLog RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol ii = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALIGUAL,getLineaToken(ii),getColumnaToken(ii)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_ARIT ::= tSuma 
            {
              NodoOpArit RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.SUMA, getLineaToken(s),getColumnaToken(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_ARIT ::= tResta 
            {
              NodoOpArit RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.RESTA, getLineaToken(r),getColumnaToken(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_ARIT ::= tMult 
            {
              NodoOpArit RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol mu = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.MULT, getLineaToken(mu),getColumnaToken(mu)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_ARIT ::= tDiv 
            {
              NodoOpArit RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol d = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.DIV, getLineaToken(d),getColumnaToken(d)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_ARIT ::= tMod 
            {
              NodoOpArit RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol m = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.MOD, getLineaToken(m),getColumnaToken(m)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_RAPIDOS ::= OP_RAPIDO_S 
            {
              NodoOpRapidos RESULT =null;
		int rapidossumaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rapidossumaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOpRapidosSuma rapidossuma = (NodoOpRapidosSuma)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpRapidos(rapidossuma, rapidossuma.getLine(), rapidossuma.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_RAPIDOS ::= OP_RAPIDO_R 
            {
              NodoOpRapidos RESULT =null;
		int rapidosrestaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rapidosrestaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOpRapidosResta rapidosresta = (NodoOpRapidosResta)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpRapidos(rapidosresta ,rapidosresta.getLine(), rapidosresta.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_RAPIDO_S ::= ID tSuma tSuma 
            {
              NodoOpRapidosSuma RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOpRapidosSuma(tid, tid.getLine(), tid.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_S",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_RAPIDO_R ::= ID tResta tResta 
            {
              NodoOpRapidosResta RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOpRapidosResta(tid, tid.getLine(), tid.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_R",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TERMINO_1 ::= ID 
            {
              NodoTermino RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(id,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TERMINO_1 ::= tEntero 
            {
              NodoTermino RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol entero = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(Integer.parseInt(getValor(entero)),getLineaToken(entero),getColumnaToken(entero)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TERMINO_1 ::= LLAMADA_FUNC 
            {
              NodoTermino RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(funcCall,funcCall.getLine(),funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TERMINO_1 ::= tDecimal 
            {
              NodoTermino RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol decimal = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(Float.parseFloat(getValor(decimal)), getLineaToken(decimal),getColumnaToken(decimal)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TERMINO_2 ::= ID 
            {
              NodoTermino RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(id,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TERMINO_2 ::= tEntero 
            {
              NodoTermino RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol entero = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(Integer.parseInt(getValor(entero)),getLineaToken(entero),getColumnaToken(entero)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TERMINO_2 ::= LLAMADA_FUNC 
            {
              NodoTermino RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(funcCall,funcCall.getLine(),funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TERMINO_2 ::= tDecimal 
            {
              NodoTermino RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol decimal = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(Float.parseFloat(getValor(decimal)), getLineaToken(decimal),getColumnaToken(decimal)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TERMINOLOG_1 ::= ID 
            {
              NodoTerminoLog RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(id, -1,null,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TERMINOLOG_1 ::= tTrue 
            {
              NodoTerminoLog RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null, 1,null, getLineaToken(t),getColumnaToken(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TERMINOLOG_1 ::= tFalse 
            {
              NodoTerminoLog RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol f = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null,0,null,getLineaToken(f),getColumnaToken(f)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TERMINOLOG_1 ::= LLAMADA_FUNC 
            {
              NodoTerminoLog RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TERMINOLOG_2 ::= ID 
            {
              NodoTerminoLog RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(id,-1,null,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TERMINOLOG_2 ::= tTrue 
            {
              NodoTerminoLog RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null,1,null,getLineaToken(t),getColumnaToken(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TERMINOLOG_2 ::= tFalse 
            {
              NodoTerminoLog RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol f = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null,0,null,getLineaToken(f),getColumnaToken(f)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TERMINOLOG_2 ::= LLAMADA_FUNC 
            {
              NodoTerminoLog RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION_ARITM ::= TERMINO_1 OP_ARIT TERMINO_2 
            {
              NodoExpresionArit RESULT =null;
		int term1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoTermino term1 = (NodoTermino)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOpArit oparit = (NodoOpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoTermino term2 = (NodoTermino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoExpresionArit(term1,oparit,term2,term1.getLine(),term2.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITM",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION_LOG ::= TERMINOLOG_1 OP_LOG TERMINOLOG_2 
            {
              NodoExpresionLog RESULT =null;
		int tlog1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tlog1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoTerminoLog tlog1 = (NodoTerminoLog)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOpLog oplog = (NodoOpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tlog2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tlog2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoTerminoLog tlog2 = (NodoTerminoLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoExpresionLog(tlog1,oplog,tlog2,tlog1.getLine(),tlog1.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= tLparen EXPRESION tRparen 
            {
              NodoExpresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoExpresion(e, null, null, null,null, null, -1, null, getLineaToken(v),getColumnaToken(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= tNot EXPRESION 
            {
              NodoExpresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, e, null, null,null, null, -1, null, getLineaToken(v),getColumnaToken(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION_LOG 
            {
              NodoExpresion RESULT =null;
		int elogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresionLog elog = (NodoExpresionLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, elog,null, null, -1, null, elog.getLine(), elog.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPRESION_ARITM 
            {
              NodoExpresion RESULT =null;
		int earitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresionArit earit = (NodoExpresionArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, earit, null,null, null, -1, null, earit.getLine(), earit.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= ID 
            {
              NodoExpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, null,id, null, -1, null, id.getLine(), id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= LITERAL 
            {
              NodoExpresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLiteral l = (NodoLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, null,null, l, -1, null, l.getLine(), l.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= tTrue 
            {
              NodoExpresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, null,null, null, 1, null, getLineaToken(t),getColumnaToken(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= tFalse 
            {
              NodoExpresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol f = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, null,null, null, 0, null, getLineaToken(f),getColumnaToken(f)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= LLAMADA_FUNC 
            {
              NodoExpresion RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, null,null, null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LITERAL ::= tEntero 
            {
              NodoLiteral RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol i = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(getValor(i),Tipo.INT,getLineaToken(i),getColumnaToken(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LITERAL ::= tDecimal 
            {
              NodoLiteral RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol d = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(getValor(d),Tipo.FLOAT,getLineaToken(d),getColumnaToken(d)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LITERAL ::= tChar 
            {
              NodoLiteral RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol c = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(getValor(c),Tipo.CHAR,getLineaToken(c),getColumnaToken(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LITERAL ::= tLinea 
            {
              NodoLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol l = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(getValor(l),Tipo.STR,getLineaToken(l),getColumnaToken(l)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LLAMADA_FUNC ::= ID tLparen PARAMETROS tRparen 
            {
              NodoLlamadaFunc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoParametros param = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoLlamadaFunc(id,param,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNC",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMETROS ::= PARAM_SIMPLE 
            {
              NodoParametros RESULT =null;
		int simpleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simpleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoParamSimple simple = (NodoParamSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParametros(simple,simple.getLine(),simple.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAMETROS ::= PARAM_COMPUESTO 
            {
              NodoParametros RESULT =null;
		int compuestoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int compuestoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoParamCompuesto compuesto = (NodoParamCompuesto)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParametros(compuesto, compuesto.getLine(),compuesto.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAM_SIMPLE ::= EXPRESION 
            {
              NodoParamSimple RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParamSimple(exp,exp.getLine(),exp.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_SIMPLE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAM_COMPUESTO ::= PARAMETROS tComa EXPRESION 
            {
              NodoParamCompuesto RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoParametros param = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParamCompuesto(param,exp,param.getLine(),param.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_COMPUESTO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ID ::= tId 
            {
              NodoId RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol valor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoId((String) getValor(valor), getLineaToken(valor),getColumnaToken(valor)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
