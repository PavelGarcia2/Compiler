
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java.io.*;
import sintactico.arbol.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import semantico.Semantico;
import herramientas.*;
import lexico.Literal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\006\000\002\046" +
    "\004\000\002\046\002\000\002\047\007\000\002\003\007" +
    "\000\002\004\004\000\002\004\002\000\002\005\007\000" +
    "\002\005\006\000\002\005\007\000\002\006\005\000\002" +
    "\006\002\000\002\007\004\000\002\007\002\000\002\010" +
    "\003\000\002\010\003\000\002\011\003\000\002\012\005" +
    "\000\002\013\006\000\002\055\003\000\002\055\002\000" +
    "\002\014\007\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\016\000\002\042\005\000\002\042\002" +
    "\000\002\050\003\000\002\050\003\000\002\037\003\000" +
    "\002\037\002\000\002\040\003\000\002\040\005\000\002" +
    "\041\005\000\002\017\004\000\002\017\002\000\002\020" +
    "\004\000\002\020\002\000\002\021\003\000\002\021\003" +
    "\000\002\022\012\000\002\022\011\000\002\022\015\000" +
    "\002\022\012\000\002\022\007\000\002\022\007\000\002" +
    "\022\004\000\002\022\007\000\002\054\003\000\002\054" +
    "\002\000\002\036\012\000\002\036\006\000\002\036\002" +
    "\000\002\023\011\000\002\023\002\000\002\024\007\000" +
    "\002\024\002\000\002\025\004\000\002\025\003\000\002" +
    "\025\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\030\003\000\002\030\003\000\002\031" +
    "\005\000\002\032\005\000\002\033\004\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\005\000" +
    "\002\033\004\000\002\045\003\000\002\045\003\000\002" +
    "\044\004\000\002\044\004\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\034\006" +
    "\000\002\035\003\000\002\035\002\000\002\051\004\000" +
    "\002\052\004\000\002\052\002\000\002\043\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\024\005\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\004\062\ufffe\063\ufffe\001\002\000\016" +
    "\041\013\042\017\043\012\044\015\045\014\062\021\001" +
    "\002\000\022\005\ufffa\041\013\042\017\043\012\044\015" +
    "\045\014\062\021\063\016\001\002\000\024\005\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\004\062\ufffe" +
    "\063\ufffe\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\022\005\uffff\041\uffff\042\uffff\043\uffff" +
    "\044\uffff\045\uffff\062\uffff\063\uffff\001\002\000\006\056" +
    "\uffea\064\uffea\001\002\000\006\056\uffe9\064\uffe9\001\002" +
    "\000\006\056\uffe6\064\uffe6\001\002\000\006\056\uffe7\064" +
    "\uffe7\001\002\000\004\064\035\001\002\000\006\056\uffe8" +
    "\064\uffe8\001\002\000\004\064\035\001\002\000\006\056" +
    "\uffe5\064\uffe5\001\002\000\046\004\ufffa\005\ufffa\007\ufffa" +
    "\033\ufffa\036\ufffa\037\ufffa\040\ufffa\041\013\042\017\043" +
    "\012\044\015\045\014\047\ufffa\050\ufffa\053\ufffa\062\021" +
    "\063\016\064\ufffa\001\002\000\004\005\024\001\002\000" +
    "\004\054\275\001\002\000\006\002\uffd9\006\uffd9\001\002" +
    "\000\006\002\000\006\030\001\002\000\006\002\uffda\006" +
    "\uffda\001\002\000\016\041\013\042\017\043\012\044\015" +
    "\045\014\062\021\001\002\000\006\056\ufff5\064\ufff5\001" +
    "\002\000\006\056\034\064\035\001\002\000\004\052\037" +
    "\001\002\000\004\055\036\001\002\000\052\010\uff9b\011" +
    "\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b" +
    "\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\051" +
    "\uff9b\052\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\001\002" +
    "\000\016\013\ufff6\051\ufff6\056\ufff6\057\ufff6\060\ufff6\064" +
    "\ufff6\001\002\000\020\041\013\042\017\043\012\044\015" +
    "\045\014\051\uffde\062\021\001\002\000\004\051\uffdf\001" +
    "\002\000\004\064\035\001\002\000\006\051\uffdd\057\271" +
    "\001\002\000\004\051\044\001\002\000\004\054\045\001" +
    "\002\000\044\004\ufffa\007\ufffa\033\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\013\042\017\043\012\044\015\045\014\047" +
    "\ufffa\050\ufffa\053\ufffa\062\021\063\016\064\ufffa\001\002" +
    "\000\026\004\uffd7\007\uffd7\033\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\047\uffd7\050\uffd7\053\uffd7\064\uffd7\001\002\000\026" +
    "\004\051\007\050\033\055\036\063\037\054\040\065\047" +
    "\053\050\056\053\uffe2\064\035\001\002\000\004\052\264" +
    "\001\002\000\024\014\077\015\100\064\035\065\uff98\066" +
    "\121\067\126\070\130\071\123\072\uff98\001\002\000\004" +
    "\060\257\001\002\000\004\052\253\001\002\000\004\052" +
    "\232\001\002\000\004\052\207\001\002\000\004\052\203" +
    "\001\002\000\030\004\uffd8\007\uffd8\031\uffd8\033\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\047\uffd8\050\uffd8\053\uffd8\064\uffd8" +
    "\001\002\000\030\004\uffd5\007\uffd5\031\uffd5\033\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\047\uffd5\050\uffd5\053\uffd5\064\uffd5" +
    "\001\002\000\010\013\uffec\052\157\056\161\001\002\000" +
    "\030\004\uffd6\007\uffd6\031\uffd6\033\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\047\uffd6\050\uffd6\053\uffd6\064\uffd6\001\002\000" +
    "\004\052\117\001\002\000\004\053\116\001\002\000\004" +
    "\052\066\001\002\000\004\064\035\001\002\000\004\051" +
    "\070\001\002\000\004\054\071\001\002\000\010\030\uffc6" +
    "\032\uffc6\053\uffc6\001\002\000\010\030\074\032\073\053" +
    "\uffc4\001\002\000\004\061\112\001\002\000\014\014\077" +
    "\015\100\065\uff98\066\104\067\103\001\002\000\004\053" +
    "\076\001\002\000\030\004\uffd1\007\uffd1\031\uffd1\033\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\047\uffd1\050\uffd1\053\uffd1\064" +
    "\uffd1\001\002\000\006\065\uff9a\072\uff9a\001\002\000\006" +
    "\065\uff99\072\uff99\001\002\000\004\065\111\001\002\000" +
    "\004\061\105\001\002\000\004\061\uffc1\001\002\000\004" +
    "\061\uffc2\001\002\000\024\007\uffd7\031\uffd7\033\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\047\uffd7\050\uffd7\064\uffd7\001\002" +
    "\000\024\007\050\031\107\033\055\036\063\037\054\040" +
    "\065\047\053\050\056\064\035\001\002\000\004\060\110" +
    "\001\002\000\010\030\uffc7\032\uffc7\053\uffc7\001\002\000" +
    "\004\061\uffc3\001\002\000\024\007\uffd7\031\uffd7\033\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\047\uffd7\050\uffd7\064\uffd7\001" +
    "\002\000\024\007\050\031\114\033\055\036\063\037\054" +
    "\040\065\047\053\050\056\064\035\001\002\000\004\060" +
    "\115\001\002\000\004\053\uffc5\001\002\000\006\002\uffe4" +
    "\006\uffe4\001\002\000\026\012\120\014\077\015\100\064" +
    "\035\065\uff98\066\121\067\126\070\130\071\123\072\uff98" +
    "\001\002\000\026\012\120\014\077\015\100\064\035\065" +
    "\uff98\066\121\067\126\070\130\071\123\072\uff98\001\002" +
    "\000\044\010\uffa4\011\uffa4\014\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\051\uffa4\055\uffa4\057\uffa4\060\uffa4\001\002\000" +
    "\044\010\uffad\011\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\051\uffad\055\uffad\057\uffad\060\uffad\001\002\000\044" +
    "\010\uffa2\011\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\051\uffa2\055\uffa2\057\uffa2\060\uffa2\001\002\000\044\010" +
    "\uffac\011\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\051" +
    "\uffac\055\uffac\057\uffac\060\uffac\001\002\000\006\065\174" +
    "\072\175\001\002\000\044\010\uffa5\011\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\024\uffa5\025\uffa5\026\uffa5\051\uffa5\055\uffa5\057\uffa5\060" +
    "\uffa5\001\002\000\050\010\uffae\011\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\051\uffae\052\157\055\uffae\056\161" +
    "\057\uffae\060\uffae\001\002\000\044\010\uffa3\011\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\051\uffa3\055\uffa3\057" +
    "\uffa3\060\uffa3\001\002\000\036\010\133\011\144\014\142" +
    "\015\141\016\143\017\146\020\140\021\134\022\150\023" +
    "\151\024\136\025\145\026\135\051\152\001\002\000\026" +
    "\012\120\014\077\015\100\064\035\065\uff98\066\121\067" +
    "\126\070\130\071\123\072\uff98\001\002\000\026\012\uffc0" +
    "\014\uffc0\015\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070" +
    "\uffc0\071\uffc0\072\uffc0\001\002\000\026\012\uffbe\014\uffbe" +
    "\015\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071" +
    "\uffbe\072\uffbe\001\002\000\026\012\uffb9\014\uffb9\015\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072" +
    "\uffb9\001\002\000\026\012\uffbb\014\uffbb\015\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\001" +
    "\002\000\026\012\uffa8\014\uffa8\015\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\001\002\000" +
    "\026\012\uffb4\014\uffb4\015\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\067\uffb4\070\uffb4\071\uffb4\072\uffb4\001\002\000\026\012" +
    "\uffb7\014\uffb7\015\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7" +
    "\070\uffb7\071\uffb7\072\uffb7\001\002\000\026\012\uffb8\014" +
    "\uffb8\015\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8" +
    "\071\uffb8\072\uffb8\001\002\000\026\012\uffb6\014\uffb6\015" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\001\002\000\026\012\uffbf\014\uffbf\015\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf" +
    "\001\002\000\026\012\uffba\014\uffba\015\uffba\064\uffba\065" +
    "\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba\001\002" +
    "\000\026\012\uffb5\014\uffb5\015\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\001\002\000\026" +
    "\012\uffa9\014\uffa9\015\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\071\uffa9\072\uffa9\001\002\000\026\012\uffbd" +
    "\014\uffbd\015\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070" +
    "\uffbd\071\uffbd\072\uffbd\001\002\000\026\012\uffbc\014\uffbc" +
    "\015\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071" +
    "\uffbc\072\uffbc\001\002\000\004\054\153\001\002\000\024" +
    "\007\uffd7\033\uffd7\036\uffd7\037\uffd7\040\uffd7\047\uffd7\050" +
    "\uffd7\053\uffd7\064\uffd7\001\002\000\024\007\050\033\055" +
    "\036\063\037\054\040\065\047\053\050\056\053\155\064" +
    "\035\001\002\000\030\004\uffd3\007\uffd3\031\uffd3\033\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\047\uffd3\050\uffd3\053\uffd3\064" +
    "\uffd3\001\002\000\044\010\133\011\144\014\142\015\141" +
    "\016\143\017\146\020\140\021\134\022\150\023\151\024" +
    "\136\025\145\026\135\051\uffab\055\uffab\057\uffab\060\uffab" +
    "\001\002\000\030\012\uff9c\014\uff9c\015\uff9c\051\uff9f\064" +
    "\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c" +
    "\001\002\000\044\010\uffaa\011\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\051\uffaa\055\uffaa\057\uffaa\060\uffaa\001" +
    "\002\000\026\012\120\014\077\015\100\064\035\065\uff98" +
    "\066\121\067\126\070\130\071\123\072\uff98\001\002\000" +
    "\036\010\133\011\144\014\142\015\141\016\143\017\146" +
    "\020\140\021\134\022\150\023\151\024\136\025\145\026" +
    "\135\055\163\001\002\000\050\010\uffec\011\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\051\uffec\055\uffec" +
    "\056\161\057\uffec\060\uffec\001\002\000\046\010\uffee\011" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\051" +
    "\uffee\055\uffee\057\uffee\060\uffee\001\002\000\046\010\uffed" +
    "\011\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\051\uffed\055\uffed\057\uffed\060\uffed\001\002\000\006\051" +
    "\uffa0\057\173\001\002\000\026\012\120\014\077\015\100" +
    "\064\035\065\uff98\066\121\067\126\070\130\071\123\072" +
    "\uff98\001\002\000\004\051\171\001\002\000\044\010\uffa1" +
    "\011\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\051\uffa1" +
    "\055\uffa1\057\uffa1\060\uffa1\001\002\000\040\010\133\011" +
    "\144\014\142\015\141\016\143\017\146\020\140\021\134" +
    "\022\150\023\151\024\136\025\145\026\135\051\uff9e\057" +
    "\uff9e\001\002\000\026\012\uff9d\014\uff9d\015\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\001" +
    "\002\000\044\010\uffa7\011\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\051\uffa7\055\uffa7\057\uffa7\060\uffa7\001\002" +
    "\000\044\010\uffa6\011\uffa6\014\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\026\uffa6\051\uffa6\055\uffa6\057\uffa6\060\uffa6\001\002\000" +
    "\044\010\133\011\144\014\142\015\141\016\143\017\146" +
    "\020\140\021\134\022\150\023\151\024\136\025\145\026" +
    "\135\051\uffaf\055\uffaf\057\uffaf\060\uffaf\001\002\000\004" +
    "\013\200\001\002\000\026\012\120\014\077\015\100\064" +
    "\035\065\uff98\066\121\067\126\070\130\071\123\072\uff98" +
    "\001\002\000\036\010\133\011\144\014\142\015\141\016" +
    "\143\017\146\020\140\021\134\022\150\023\151\024\136" +
    "\025\145\026\135\060\202\001\002\000\030\004\uffeb\007" +
    "\uffeb\031\uffeb\033\uffeb\036\uffeb\037\uffeb\040\uffeb\047\uffeb" +
    "\050\uffeb\053\uffeb\064\uffeb\001\002\000\026\012\120\014" +
    "\077\015\100\064\035\065\uff98\066\121\067\126\070\130" +
    "\071\123\072\uff98\001\002\000\036\010\133\011\144\014" +
    "\142\015\141\016\143\017\146\020\140\021\134\022\150" +
    "\023\151\024\136\025\145\026\135\051\205\001\002\000" +
    "\004\060\206\001\002\000\030\004\uffcf\007\uffcf\031\uffcf" +
    "\033\uffcf\036\uffcf\037\uffcf\040\uffcf\047\uffcf\050\uffcf\053" +
    "\uffcf\064\uffcf\001\002\000\026\012\120\014\077\015\100" +
    "\064\035\065\uff98\066\121\067\126\070\130\071\123\072" +
    "\uff98\001\002\000\036\010\133\011\144\014\142\015\141" +
    "\016\143\017\146\020\140\021\134\022\150\023\151\024" +
    "\136\025\145\026\135\051\211\001\002\000\004\054\212" +
    "\001\002\000\024\007\uffd7\033\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\047\uffd7\050\uffd7\053\uffd7\064\uffd7\001\002\000\024" +
    "\007\050\033\055\036\063\037\054\040\065\047\053\050" +
    "\056\053\214\064\035\001\002\000\034\004\uffc8\007\uffc8" +
    "\031\uffc8\033\uffc8\034\215\035\217\036\uffc8\037\uffc8\040" +
    "\uffc8\047\uffc8\050\uffc8\053\uffc8\064\uffc8\001\002\000\004" +
    "\054\227\001\002\000\030\004\uffd4\007\uffd4\031\uffd4\033" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\047\uffd4\050\uffd4\053\uffd4" +
    "\064\uffd4\001\002\000\004\052\220\001\002\000\026\012" +
    "\120\014\077\015\100\064\035\065\uff98\066\121\067\126" +
    "\070\130\071\123\072\uff98\001\002\000\036\010\133\011" +
    "\144\014\142\015\141\016\143\017\146\020\140\021\134" +
    "\022\150\023\151\024\136\025\145\026\135\051\222\001" +
    "\002\000\004\054\223\001\002\000\024\007\uffd7\033\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\047\uffd7\050\uffd7\053\uffd7\064" +
    "\uffd7\001\002\000\024\007\050\033\055\036\063\037\054" +
    "\040\065\047\053\050\056\053\225\064\035\001\002\000" +
    "\034\004\uffc8\007\uffc8\031\uffc8\033\uffc8\034\215\035\217" +
    "\036\uffc8\037\uffc8\040\uffc8\047\uffc8\050\uffc8\053\uffc8\064" +
    "\uffc8\001\002\000\030\004\uffca\007\uffca\031\uffca\033\uffca" +
    "\036\uffca\037\uffca\040\uffca\047\uffca\050\uffca\053\uffca\064" +
    "\uffca\001\002\000\024\007\uffd7\033\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\047\uffd7\050\uffd7\053\uffd7\064\uffd7\001\002\000" +
    "\024\007\050\033\055\036\063\037\054\040\065\047\053" +
    "\050\056\053\231\064\035\001\002\000\030\004\uffc9\007" +
    "\uffc9\031\uffc9\033\uffc9\036\uffc9\037\uffc9\040\uffc9\047\uffc9" +
    "\050\uffc9\053\uffc9\064\uffc9\001\002\000\004\064\035\001" +
    "\002\000\004\060\234\001\002\000\026\012\120\014\077" +
    "\015\100\064\035\065\uff98\066\121\067\126\070\130\071" +
    "\123\072\uff98\001\002\000\036\010\133\011\144\014\142" +
    "\015\141\016\143\017\146\020\140\021\134\022\150\023" +
    "\151\024\136\025\145\026\135\060\236\001\002\000\004" +
    "\064\035\001\002\000\006\014\247\015\250\001\002\000" +
    "\004\051\uffb2\001\002\000\004\051\243\001\002\000\004" +
    "\051\uffb3\001\002\000\004\054\244\001\002\000\024\007" +
    "\uffd7\033\uffd7\036\uffd7\037\uffd7\040\uffd7\047\uffd7\050\uffd7" +
    "\053\uffd7\064\uffd7\001\002\000\024\007\050\033\055\036" +
    "\063\037\054\040\065\047\053\050\056\053\246\064\035" +
    "\001\002\000\030\004\uffd2\007\uffd2\031\uffd2\033\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\047\uffd2\050\uffd2\053\uffd2\064\uffd2" +
    "\001\002\000\004\014\252\001\002\000\004\015\251\001" +
    "\002\000\004\051\uffb0\001\002\000\004\051\uffb1\001\002" +
    "\000\026\012\120\014\077\015\100\064\035\065\uff98\066" +
    "\121\067\126\070\130\071\123\072\uff98\001\002\000\036" +
    "\010\133\011\144\014\142\015\141\016\143\017\146\020" +
    "\140\021\134\022\150\023\151\024\136\025\145\026\135" +
    "\051\255\001\002\000\004\060\256\001\002\000\030\004" +
    "\uffd0\007\uffd0\031\uffd0\033\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\047\uffd0\050\uffd0\053\uffd0\064\uffd0\001\002\000\030\004" +
    "\uffce\007\uffce\031\uffce\033\uffce\036\uffce\037\uffce\040\uffce" +
    "\047\uffce\050\uffce\053\uffce\064\uffce\001\002\000\004\060" +
    "\uffe0\001\002\000\004\060\263\001\002\000\004\060\uffe1" +
    "\001\002\000\004\053\uffe3\001\002\000\006\051\uffcb\064" +
    "\035\001\002\000\004\051\uffcc\001\002\000\004\051\267" +
    "\001\002\000\004\060\270\001\002\000\030\004\uffcd\007" +
    "\uffcd\031\uffcd\033\uffcd\036\uffcd\037\uffcd\040\uffcd\047\uffcd" +
    "\050\uffcd\053\uffcd\064\uffcd\001\002\000\016\041\013\042" +
    "\017\043\012\044\015\045\014\062\021\001\002\000\004" +
    "\051\uffdc\001\002\000\010\051\ufff5\056\ufff5\057\ufff5\001" +
    "\002\000\010\051\uffdb\056\034\057\uffdb\001\002\000\042" +
    "\007\ufffa\033\ufffa\036\ufffa\037\ufffa\040\ufffa\041\013\042" +
    "\017\043\012\044\015\045\014\047\ufffa\050\ufffa\053\ufffa" +
    "\062\021\063\016\064\ufffa\001\002\000\024\007\uffd7\033" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\047\uffd7\050\uffd7\053\uffd7" +
    "\064\uffd7\001\002\000\024\007\050\033\055\036\063\037" +
    "\054\040\065\047\053\050\056\053\300\064\035\001\002" +
    "\000\006\002\ufffc\006\ufffc\001\002\000\030\004\ufffb\005" +
    "\ufffb\007\ufffb\033\ufffb\036\ufffb\037\ufffb\040\ufffb\047\ufffb" +
    "\050\ufffb\053\ufffb\064\ufffb\001\002\000\010\013\ufff5\056" +
    "\ufff5\060\ufff5\001\002\000\010\013\305\056\034\060\ufff3" +
    "\001\002\000\004\060\315\001\002\000\030\012\120\014" +
    "\077\015\100\027\307\064\035\065\uff98\066\121\067\126" +
    "\070\130\071\123\072\uff98\001\002\000\004\060\ufff4\001" +
    "\002\000\016\041\013\042\017\043\012\044\015\045\014" +
    "\062\021\001\002\000\004\060\ufff2\001\002\000\004\060" +
    "\ufff1\001\002\000\036\010\133\011\144\014\142\015\141" +
    "\016\143\017\146\020\140\021\134\022\150\023\151\024" +
    "\136\025\145\026\135\060\ufff0\001\002\000\004\056\161" +
    "\001\002\000\004\060\uffef\001\002\000\046\004\ufff9\005" +
    "\ufff9\007\ufff9\033\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\047\ufff9\050\ufff9\053" +
    "\ufff9\062\ufff9\063\ufff9\064\ufff9\001\002\000\010\013\305" +
    "\056\161\060\ufff3\001\002\000\004\060\323\001\002\000" +
    "\006\013\305\060\ufff3\001\002\000\004\060\322\001\002" +
    "\000\046\004\ufff7\005\ufff7\007\ufff7\033\ufff7\036\ufff7\037" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\047\ufff7\050\ufff7\053\ufff7\062\ufff7\063\ufff7\064\ufff7\001" +
    "\002\000\046\004\ufff8\005\ufff8\007\ufff8\033\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\047\ufff8\050\ufff8\053\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\001\002\000\004\064\035\001\002\000\006\013\305\060" +
    "\ufff3\001\002\000\004\060\327\001\002\000\024\005\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\062" +
    "\ufffd\063\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\010\002\006\046\004\047\005\001\001\000" +
    "\004\015\323\001\001\000\010\004\022\005\021\015\017" +
    "\001\001\000\006\046\010\047\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\315\001\001\000\002\001\001\000\004\043\301" +
    "\001\001\000\002\001\001\000\010\004\300\005\021\015" +
    "\017\001\001\000\004\003\024\001\001\000\002\001\001" +
    "\000\004\017\025\001\001\000\004\016\026\001\001\000" +
    "\002\001\001\000\004\015\030\001\001\000\004\006\031" +
    "\001\001\000\004\043\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\040\037\042\040\037\041\041\001\001\000\002\001" +
    "\001\000\004\043\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\045\005\021\015" +
    "\017\001\001\000\004\020\046\001\001\000\016\014\057" +
    "\021\056\022\061\034\051\042\063\043\060\001\001\000" +
    "\002\001\001\000\012\043\261\044\257\050\260\053\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\164\055\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\071\001\001\000\004\024\074" +
    "\001\001\000\002\001\001\000\006\025\101\053\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\105\001\001" +
    "\000\014\014\057\021\056\022\061\034\051\043\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\112\001\001\000\014\014\057\021\056\022" +
    "\061\034\051\043\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\033\130\034\123\043" +
    "\126\044\121\053\124\001\001\000\014\033\175\034\123" +
    "\043\126\044\121\053\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\157\001\001\000" +
    "\002\001\001\000\010\026\136\027\146\045\131\001\001" +
    "\000\014\033\155\034\123\043\126\044\121\053\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\153\001\001\000\014\014\057\021\056\022" +
    "\061\034\051\043\060\001\001\000\002\001\001\000\010" +
    "\026\136\027\146\045\131\001\001\000\010\035\167\051" +
    "\165\052\166\001\001\000\002\001\001\000\014\033\161" +
    "\034\123\043\126\044\121\053\124\001\001\000\010\026" +
    "\136\027\146\045\131\001\001\000\006\013\164\055\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\033\171\034\123\043\126\044\121\053\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\136\027\146\045\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\136\027\146\045" +
    "\131\001\001\000\002\001\001\000\014\033\200\034\123" +
    "\043\126\044\121\053\124\001\001\000\010\026\136\027" +
    "\146\045\131\001\001\000\002\001\001\000\014\033\203" +
    "\034\123\043\126\044\121\053\124\001\001\000\010\026" +
    "\136\027\146\045\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\207\034\123\043\126\044\121\053" +
    "\124\001\001\000\010\026\136\027\146\045\131\001\001" +
    "\000\002\001\001\000\004\020\212\001\001\000\014\014" +
    "\057\021\056\022\061\034\051\043\060\001\001\000\004" +
    "\036\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\033\220\034\123\043\126\044\121" +
    "\053\124\001\001\000\010\026\136\027\146\045\131\001" +
    "\001\000\002\001\001\000\004\020\223\001\001\000\014" +
    "\014\057\021\056\022\061\034\051\043\060\001\001\000" +
    "\004\036\225\001\001\000\002\001\001\000\004\020\227" +
    "\001\001\000\014\014\057\021\056\022\061\034\051\043" +
    "\060\001\001\000\002\001\001\000\004\043\232\001\001" +
    "\000\002\001\001\000\014\033\234\034\123\043\126\044" +
    "\121\053\124\001\001\000\010\026\136\027\146\045\131" +
    "\001\001\000\012\030\240\031\241\032\237\043\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\244\001" +
    "\001\000\014\014\057\021\056\022\061\034\051\043\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\033\253" +
    "\034\123\043\126\044\121\053\124\001\001\000\010\026" +
    "\136\027\146\045\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\264" +
    "\054\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\040\040\271" +
    "\041\041\001\001\000\002\001\001\000\004\006\273\001" +
    "\001\000\002\001\001\000\010\004\275\005\021\015\017" +
    "\001\001\000\004\020\276\001\001\000\014\014\057\021" +
    "\056\022\061\034\051\043\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\302\001\001\000\004\007" +
    "\303\001\001\000\002\001\001\000\022\010\305\011\307" +
    "\012\310\033\311\034\123\043\126\044\121\053\124\001" +
    "\001\000\002\001\001\000\004\015\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\136\027\146\045" +
    "\131\001\001\000\004\013\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\316\013\317\001\001\000" +
    "\002\001\001\000\004\007\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\324\001" +
    "\001\000\004\007\325\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   // private Scanner scanner;
    int errores = 0;
    BufferedWriter bf;

    String file = "error.log";

    // public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
    //     super(s,sf);
    // }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("");
        if ((info != null) && (info instanceof java_cup.runtime.Symbol)) {
           
            ComplexSymbol token = (ComplexSymbol) info;
            if(token == null){
                System.out.println("Token nulo");
            }
            Location l = token.getLeft();
            if (l != null) {
                msg.append("ERROR SINTACTICO: ");
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
            
        }

        if ((info != null) && (info instanceof Nodo)) {
            Nodo node = (Nodo)info;
            msg.append("ERROR SEMANTICO: ")
                .append(message + " en la ")
                .append("linea: ")
                .append(node.getLine())
                .append(", columna: ")
                .append(node.getColumn());
        }

        escribeEnFichero(msg.toString());
        System.err.println(msg);
        System.exit(0);
    }

    public void escribeEnFichero(String msg){
        try{
            bf = new BufferedWriter(new FileWriter(file));
            bf.write(msg);
            bf.close();
        } catch( IOException e ){

        }
    }

    public int getErrores(){
        return errores;
    }

    private int extractLine(ComplexSymbol symbol) {
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getLine();
        }
        return 0;
    }

    private int extractColumn(ComplexSymbol symbol) {
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getColumn();
        }
         return 0;
    }

    private int getLineaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getLine();
        }
        return 0;
    }

    private int getColumnaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getColumn();
        }
        return 0;
    }

    private String getValor(ComplexSymbol sym){
        // System.out.println("Fallamos en getValor");
        // return (String) sym.value;
        return "";
    }


    @Override
    public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

     @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }

    @Override
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoPrograma start_val = (NodoPrograma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DECL_CONST DECL_VARS MAIN DECL_FUNCIONES 
            {
              NodoPrograma RESULT =null;
		int dconstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dconstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDeclConst dconst = (NodoDeclConst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoMain main = (NodoMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dfuncsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfuncsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFunc dfuncs = (NodoDeclFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoPrograma(dconst,dvars, dfuncs, main, main.getLine(), main.getColumn());
                                                                                                                                                                                                            Semantico semantico = new Semantico(RESULT, parser); if(errores == 0){semantico.runProgram();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECL_CONST ::= DECL_CON DECL_CONST 
            {
              NodoDeclConst RESULT =null;
		int dconleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dconright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoConst dcon = (NodoConst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dconstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dconstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclConst dconst = (NodoDeclConst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclConst(dcon,dconst,dcon.getLine(),dcon.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECL_CONST ::= 
            {
              NodoDeclConst RESULT =null;
		 RESULT = new NodoDeclConst(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL_CON ::= tConst TIPO ID ASIGN tPuntocoma 
            {
              NodoConst RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol c = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoConst(tipo,id,asign,extractLine(c),extractColumn(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CON",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= tMain tLbracket DECL_VARS SENTS tRbracket 
            {
              NodoMain RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol main = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoMain(dvars,sents,extractLine(main),extractColumn(main)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL_VARS ::= DECL_VAR DECL_VARS 
            {
              NodoDeclVars RESULT =null;
		int dvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoVar dvar = (NodoVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclVars(dvars,dvar,dvar.getLine(),dvar.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL_VARS ::= 
            {
              NodoDeclVars RESULT =null;
		 RESULT = new NodoDeclVars(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL_VAR ::= TIPO ID DECL_ARRAY ASIGN tPuntocoma 
            {
              NodoVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoTipo t = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int darrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int darrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclArray darr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoVar(0,null,t,id,darr,asign,t.getLine(),t.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL_VAR ::= tSet ID ASIGN tPuntocoma 
            {
              NodoVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoVar(1,null,null,id,null,asign,extractLine(t),extractColumn(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECL_VAR ::= tSet ID DIM_ARRAY ASIGN tPuntocoma 
            {
              NodoVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol t = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDimArray dim = (NodoDimArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoVar(2,dim,null,id,null,asign,extractLine(t),extractColumn(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECL_ARRAY ::= DECL_ARRAY tLcorchete tRcorchete 
            {
              NodoDeclArray RESULT =null;
		int dArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclArray dArr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol lCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol rCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclArray(dArr,extractLine(lCor),extractColumn(lCor)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECL_ARRAY ::= 
            {
              NodoDeclArray RESULT =null;
		 RESULT = new NodoDeclArray(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIGN ::= tIgual T_ASIGN 
            {
              NodoAsignacion RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol igual = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tAsignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tAsignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoTipoAsignacion tAsign = (NodoTipoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacion(tAsign,extractLine(igual),extractColumn(igual)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASIGN ::= 
            {
              NodoAsignacion RESULT =null;
		 RESULT = new NodoAsignacion(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // T_ASIGN ::= ASIGN_NORMAL 
            {
              NodoTipoAsignacion RESULT =null;
		int asignNormalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignNormalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAsignacionNormal asignNormal = (NodoAsignacionNormal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipoAsignacion(asignNormal,null,asignNormal.getLine(),asignNormal.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // T_ASIGN ::= ASIGN_ARRAY 
            {
              NodoTipoAsignacion RESULT =null;
		int asignArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAsignacionArray asignArray = (NodoAsignacionArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipoAsignacion(null,asignArray,asignArray.getLine(),asignArray.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGN_NORMAL ::= EXPRESION 
            {
              NodoAsignacionNormal RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion expr = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacionNormal(expr, expr.getLine(), expr.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_NORMAL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGN_ARRAY ::= tNew TIPO DIM_ARRAY 
            {
              NodoAsignacionArray RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol n = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDimArray dimArray = (NodoDimArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacionArray(tipo,dimArray,extractLine(n),extractColumn(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_ARRAY",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DIM_ARRAY ::= tLcorchete EXPRESION tRcorchete DIMENSIONES 
            {
              NodoDimArray RESULT =null;
		int lCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol lCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoExpresion expr = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol rCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimensionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimensionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDimensiones dimensiones = (NodoDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDimArray(dimensiones,expr,extractLine(lCor),extractColumn(lCor)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DIMENSIONES ::= DIM_ARRAY 
            {
              NodoDimensiones RESULT =null;
		int dimarrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimarrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDimArray dimarr = (NodoDimArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDimensiones(dimarr, dimarr.getLine(), dimarr.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DIMENSIONES ::= 
            {
              NodoDimensiones RESULT =null;
		 RESULT = new NodoDimensiones();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // REAL_ASIGN ::= ID DIMENSIONES tIgual EXPRESION tPuntocoma 
            {
              NodoRealAsign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDimensiones dim = (NodoDimensiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol igual = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcomaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcomaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol pcoma = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoRealAsign(id,dim,exp,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REAL_ASIGN",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= tInt 
            {
              NodoTipo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol i = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_int,extractLine(i),extractColumn(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= tChar 
            {
              NodoTipo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol c = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_char,extractLine(c),extractColumn(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= tFloat 
            {
              NodoTipo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol f = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_float,extractLine(f),extractColumn(f)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= tBool 
            {
              NodoTipo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol b = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_bool,extractLine(b),extractColumn(b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO ::= tStr 
            {
              NodoTipo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_str,extractLine(s),extractColumn(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= tVoid 
            {
              NodoTipo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_void,extractLine(v),extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNC ::= tFun TIPO DECL_ARRAY ID tLparen DECL_FUNCP tRparen tLbracket DECL_VARS SENTS RETURN tRbracket 
            {
              NodoFunc RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ComplexSymbol fun = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int decarrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int decarrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoDeclArray decarr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int decfuncpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int decfuncpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoDeclFuncP decfuncp = (NodoDeclFuncP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int declvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int declvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDeclVars declvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoReturn retorno = (NodoReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new NodoFunc(tipo,decarr,id,decfuncp,declvars,sents,retorno,extractLine(fun),extractColumn(fun)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RETURN ::= tReturn RETURN_PARAM tPuntocoma 
            {
              NodoReturn RESULT =null;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol retorno = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoReturnParam exp = (NodoReturnParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoReturn(exp,extractLine(retorno),extractColumn(retorno)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RETURN ::= 
            {
              NodoReturn RESULT =null;
		 RESULT= new NodoReturn(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RETURN_PARAM ::= ID 
            {
              NodoReturnParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoReturnParam(id,extractLine(id),extractColumn(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_PARAM",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RETURN_PARAM ::= LITERAL 
            {
              NodoReturnParam RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLiteral lit = (NodoLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoReturnParam(lit,extractLine(lit),extractColumn(lit)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_PARAM",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECL_FUNCP ::= DECL_FUNCPARAMS 
            {
              NodoDeclFuncP RESULT =null;
		int funcpaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcparight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParams funcpa = (NodoDeclFuncParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncP(funcpa, funcpa.getLine(),funcpa.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECL_FUNCP ::= 
            {
              NodoDeclFuncP RESULT =null;
		 RESULT= new NodoDeclFuncP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECL_FUNCPARAMS ::= DECL_FUNCPARAM 
            {
              NodoDeclFuncParams RESULT =null;
		int declparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParam declparam = (NodoDeclFuncParam)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParams(declparam,declparam.getLine(),declparam.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAMS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECL_FUNCPARAMS ::= DECL_FUNCPARAM tComa DECL_FUNCPARAMS 
            {
              NodoDeclFuncParams RESULT =null;
		int declparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclFuncParam declparam = (NodoDeclFuncParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declparamsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declparamsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParams declparams = (NodoDeclFuncParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParams(declparam,declparams,declparam.getLine(),declparam.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAMS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECL_FUNCPARAM ::= TIPO ID DECL_ARRAY 
            {
              NodoDeclFuncParam RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declarrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclArray declarr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParam(tipo,id,declarr,tipo.getLine(),tipo.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAM",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECL_FUNCIONES ::= DECL_FUNCIONES FUNC 
            {
              NodoDeclFunc RESULT =null;
		int declfuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declfuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoDeclFunc declfunc = (NodoDeclFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoFunc func = (NodoFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclFunc(declfunc,func,func.getLine(),func.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECL_FUNCIONES ::= 
            {
              NodoDeclFunc RESULT =null;
		 RESULT = new NodoDeclFunc(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTS ::= SENTS SENT 
            {
              NodoSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoSent sent = (NodoSent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSents(sents,sent,sent.getLine(),sent.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTS ::= 
            {
              NodoSents RESULT =null;
		 RESULT= new NodoSents(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= OTRAS_SENTS 
            {
              NodoSent RESULT =null;
		int otrasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int otrasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOtrasSent otras = (NodoOtrasSent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSent(otras,null,otras.getLine(),otras.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT ::= REAL_ASIGN 
            {
              NodoSent RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoRealAsign real = (NodoRealAsign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSent(null,real,real.getLine(),real.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OTRAS_SENTS ::= tIf tLparen EXPRESION tRparen tLbracket SENTS tRbracket ELSE_COND 
            {
              NodoOtrasSent RESULT =null;
		int tifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol tif = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoExpresion parametros = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsecondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsecondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElse elsecond = (NodoElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOtrasSent(0,parametros,sents,elsecond,extractLine(tif), extractColumn(tif)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OTRAS_SENTS ::= tWhile tLparen EXPRESION tRparen tLbracket SENTS tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int twleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int twright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComplexSymbol tw = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoExpresion parametros = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(1,parametros,sents,extractLine(tw), extractColumn(tw)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OTRAS_SENTS ::= tFor tLparen ID tPuntocoma EXPRESION tPuntocoma OP_RAPIDOS tRparen tLbracket SENTS tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		ComplexSymbol tf = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oprapidosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int oprapidosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoOpRapidos oprapidos = (NodoOpRapidos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(2,tid,exp,oprapidos,sents,extractLine(tf), extractColumn(tf)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OTRAS_SENTS ::= tSwitch tLparen ID tRparen tLbracket CASOS CASO_DEFAULT tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol ts = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoCase casos = (NodoCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCaseDefault def = (NodoCaseDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(3,tid,casos,def,extractLine(ts), extractColumn(ts)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OTRAS_SENTS ::= tPrint tLparen EXPRESION tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol tp = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOtrasSent(4,exp,extractLine(tp), extractColumn(tp),-1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OTRAS_SENTS ::= tPrintln tLparen EXPRESION tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int tplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol tpl = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOtrasSent(5,exp,extractLine(tpl), extractColumn(tpl)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OTRAS_SENTS ::= LLAMADA_FUNC tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int llamFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int llamFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoLlamadaFunc llamFunc = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(6,llamFunc,llamFunc.getLine(),llamFunc.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OTRAS_SENTS ::= tIn tLparen DEVUELTO tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol in = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDevuelto d = (NodoDevuelto)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOtrasSent(7,d,extractLine(in),extractColumn(in)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DEVUELTO ::= ID 
            {
              NodoDevuelto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDevuelto(id,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEVUELTO",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DEVUELTO ::= 
            {
              NodoDevuelto RESULT =null;
		 RESULT= new NodoDevuelto(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEVUELTO",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELSE_COND ::= tElif tLparen EXPRESION tRparen tLbracket SENTS tRbracket ELSE_COND 
            {
              NodoElse RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol elif = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsecondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsecondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElse elsecond = (NodoElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoElse(exp,sents,elsecond,extractLine(elif),extractColumn(elif)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSE_COND ::= tElse tLbracket SENTS tRbracket 
            {
              NodoElse RESULT =null;
		int telseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int telseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol telse = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoElse(sents,extractLine(telse),extractColumn(telse)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSE_COND ::= 
            {
              NodoElse RESULT =null;
		 RESULT= new NodoElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASOS ::= CASOS tCase INIT_CASES tDospuntos SENTS tBreak tPuntocoma 
            {
              NodoCase RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoCase casos = (NodoCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tcaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tcaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ComplexSymbol tcase = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int icaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int icaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoInitCases icase = (NodoInitCases)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoCase(casos,icase,sents,extractLine(tcase),extractColumn(tcase)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASOS ::= 
            {
              NodoCase RESULT =null;
		 RESULT= new NodoCase(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASO_DEFAULT ::= tDefault tDospuntos SENTS tBreak tPuntocoma 
            {
              NodoCaseDefault RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol def = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoCaseDefault(sents,extractLine(def),extractColumn(def)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO_DEFAULT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASO_DEFAULT ::= 
            {
              NodoCaseDefault RESULT =null;
		 RESULT = new NodoCaseDefault(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO_DEFAULT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INIT_CASES ::= SIGNO tEntero 
            {
              NodoInitCases RESULT =null;
		int sgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno sg = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.tsb_int,(String)e.getLiteral(), sg, e.getLinea(),e.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INIT_CASES ::= tLinea 
            {
              NodoInitCases RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal s = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.tsb_str,(String)s.getLiteral(),null, s.getLinea(),s.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INIT_CASES ::= tCaracter 
            {
              NodoInitCases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal c = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.tsb_char,(String)c.getLiteral(),null,c.getLinea(),c.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_LOG ::= tAnd 
            {
              NodoOpLog RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol and = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.AND, extractLine(and),extractColumn(and)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_LOG ::= tOr 
            {
              NodoOpLog RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol or = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.OR,extractLine(or),extractColumn(or)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_LOG ::= tMayor 
            {
              NodoOpLog RESULT =null;
		int mayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol may = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.MAYOR,extractLine(may),extractColumn(may)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_LOG ::= tMenor 
            {
              NodoOpLog RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol men = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.MENOR, extractLine(men),extractColumn(men)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_LOG ::= tIgualMay 
            {
              NodoOpLog RESULT =null;
		int imayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int imayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol imay = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALMAYOR,extractLine(imay),extractColumn(imay)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_LOG ::= tIgualMenor 
            {
              NodoOpLog RESULT =null;
		int imenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int imenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol imen = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALMENOR,extractLine(imen),extractColumn(imen)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_LOG ::= tIgualIgual 
            {
              NodoOpLog RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol ii = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALIGUAL,extractLine(ii),extractColumn(ii)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_LOG ::= tDiferente 
            {
              NodoOpLog RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol d = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.DIFERENTE,extractLine(d),extractColumn(d)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_ARIT ::= tSuma 
            {
              NodoOpArit RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.SUMA, extractLine(s),extractColumn(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_ARIT ::= tResta 
            {
              NodoOpArit RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.RESTA, extractLine(r),extractColumn(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_ARIT ::= tMult 
            {
              NodoOpArit RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol mu = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.MULT, extractLine(mu),extractColumn(mu)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_ARIT ::= tDiv 
            {
              NodoOpArit RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol d = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.DIV, extractLine(d),extractColumn(d)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_ARIT ::= tMod 
            {
              NodoOpArit RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol m = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.MOD, extractLine(m),extractColumn(m)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_RAPIDOS ::= OP_RAPIDO_S 
            {
              NodoOpRapidos RESULT =null;
		int rapidossumaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rapidossumaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOpRapidosSuma rapidossuma = (NodoOpRapidosSuma)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpRapidos(rapidossuma, rapidossuma.getLine(), rapidossuma.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_RAPIDOS ::= OP_RAPIDO_R 
            {
              NodoOpRapidos RESULT =null;
		int rapidosrestaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rapidosrestaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOpRapidosResta rapidosresta = (NodoOpRapidosResta)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpRapidos(rapidosresta ,rapidosresta.getLine(), rapidosresta.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_RAPIDO_S ::= ID tSuma tSuma 
            {
              NodoOpRapidosSuma RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOpRapidosSuma(tid, tid.getLine(), tid.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_S",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_RAPIDO_R ::= ID tResta tResta 
            {
              NodoOpRapidosResta RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOpRapidosResta(tid, tid.getLine(), tid.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_R",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= tNot EXPRESION 
            {
              NodoExpresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(e, null, null, null, null, null, -1, null,null, extractLine(v),extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= ID 
            {
              NodoExpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion( null, null, null, null,id, null, -1, null, null, id.getLine(), id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= LITERAL 
            {
              NodoExpresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLiteral l = (NodoLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion( null, null, null, null,null, l, -1, null, null, l.getLine(), l.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= LLAMADA_FUNC 
            {
              NodoExpresion RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion( null, null, null, null,null, null, -1, funcCall, null, funcCall.getLine(), funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION OPERADOR EXPRESION 
            {
              NodoExpresion RESULT =null;
		int term1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoExpresion term1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOperador op = (NodoOperador)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion term2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion( null, term1, op, term2, null, null, -1, null, null, term1.getLine(), term1.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= ID DIM_ARRAY 
            {
              NodoExpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDimArray arr = (NodoDimArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion( null, null, null, null, id, null, -1, null, arr,arr.getLine(), arr.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OPERADOR ::= OP_ARIT 
            {
              NodoOperador RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOpArit op = (NodoOpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoOperador(null,op,op.getLine(),op.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPERADOR ::= OP_LOG 
            {
              NodoOperador RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOpLog op = (NodoOpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoOperador(op,null,op.getLine(),op.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LITERAL ::= SIGNO tEntero 
            {
              NodoLiteral RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal i = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(s,(String) i.getLiteral(), Tipo.tsb_int, i.getLinea(), i.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LITERAL ::= SIGNO tDecimal 
            {
              NodoLiteral RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal d = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(s,(String) d.getLiteral(), Tipo.tsb_float, d.getLinea(),d.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LITERAL ::= tCaracter 
            {
              NodoLiteral RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal c = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,(String) c.getLiteral(),Tipo.tsb_char,c.getLinea(),c.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LITERAL ::= tLinea 
            {
              NodoLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,(String) l.getLiteral(),Tipo.tsb_str,l.getLinea(),l.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LITERAL ::= tTrue 
            {
              NodoLiteral RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal t = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,"-1",Tipo.tsb_bool,t.getLinea(),t.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LITERAL ::= tFalse 
            {
              NodoLiteral RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal f = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,"0",Tipo.tsb_bool,f.getLinea(),f.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LLAMADA_FUNC ::= ID tLparen PARAMETROS tRparen 
            {
              NodoLlamadaFunc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoParametros param = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoLlamadaFunc(id,param,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNC",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAMETROS ::= PAR 
            {
              NodoParametros RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoPar par = (NodoPar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoParametros(par, par.getLine(), par.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMETROS ::= 
            {
              NodoParametros RESULT =null;
		 RESULT = new NodoParametros(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PAR ::= CONTPARAM EXPRESION 
            {
              NodoPar RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoContParam cont = (NodoContParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion expr = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoPar(expr,cont,expr.getLine(), expr.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PAR",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONTPARAM ::= PAR tComa 
            {
              NodoContParam RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoPar par = (NodoPar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol coma = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoContParam(par, par.getLine(), par.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTPARAM",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONTPARAM ::= 
            {
              NodoContParam RESULT =null;
		 RESULT = new NodoContParam(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTPARAM",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ID ::= tId 
            {
              NodoId RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal valor = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoId((String)valor.getLiteral(), valor.getLinea(),valor.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SIGNO ::= tSuma 
            {
              NodoSigno RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoSigno(1, extractLine(s),extractColumn(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNO",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SIGNO ::= tResta 
            {
              NodoSigno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoSigno(-1, extractLine(r),extractColumn(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNO",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SIGNO ::= 
            {
              NodoSigno RESULT =null;
		 RESULT = new NodoSigno(1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNO",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
