
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\007" +
    "\000\002\006\003\000\002\006\003\000\002\007\005\000" +
    "\002\007\002\000\002\010\007\000\002\011\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\013" +
    "\003\000\002\014\005\000\002\015\006\000\002\015\002" +
    "\000\002\016\005\000\002\017\007\000\002\020\006\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\015\000\002\023\004\000\002\023\002\000\002\024\004" +
    "\000\002\024\002\000\002\025\003\000\002\025\003\000" +
    "\002\026\012\000\002\026\011\000\002\026\015\000\002" +
    "\026\011\000\002\052\012\000\002\052\006\000\002\052" +
    "\002\000\002\027\011\000\002\027\003\000\002\027\002" +
    "\000\002\030\007\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\035\005\000\002" +
    "\036\005\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\043\005\000\002\044\005\000\002\045\005" +
    "\000\002\045\004\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\046" +
    "\007\000\002\047\003\000\002\047\003\000\002\050\003" +
    "\000\002\051\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\020\006\ufffd\042\006\043\007\044\011\045" +
    "\010\046\014\050\004\001\002\000\012\061\uffe7\064\uffe7" +
    "\071\uffe7\072\uffe7\001\002\000\004\002\275\001\002\000" +
    "\014\061\uffea\064\uffea\071\uffea\072\uffea\073\uffea\001\002" +
    "\000\014\061\uffe9\064\uffe9\071\uffe9\072\uffe9\073\uffe9\001" +
    "\002\000\014\061\uffe8\064\uffe8\071\uffe8\072\uffe8\073\uffe8" +
    "\001\002\000\014\061\uffeb\064\uffeb\071\uffeb\072\uffeb\073" +
    "\uffeb\001\002\000\004\061\237\001\002\000\034\006\ufffd" +
    "\034\ufffd\037\ufffd\040\ufffd\041\ufffd\042\006\043\007\044" +
    "\011\045\010\046\014\050\004\061\ufffd\070\ufffd\001\002" +
    "\000\014\061\uffe6\064\uffe6\071\uffe6\072\uffe6\073\uffe6\001" +
    "\002\000\004\006\017\001\002\000\006\002\uffe3\007\uffe3" +
    "\001\002\000\004\067\020\001\002\000\016\034\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\061\uffe1\066\uffe1\001\002\000\016" +
    "\034\023\037\025\040\031\041\022\061\024\066\032\001" +
    "\002\000\004\065\172\001\002\000\004\065\147\001\002" +
    "\000\004\015\144\001\002\000\004\065\136\001\002\000" +
    "\022\032\uffe2\034\uffe2\037\uffe2\040\uffe2\041\uffe2\061\uffe2" +
    "\066\uffe2\070\uffe2\001\002\000\022\032\uffdf\034\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\061\uffdf\066\uffdf\070\uffdf\001\002" +
    "\000\022\032\uffe0\034\uffe0\037\uffe0\040\uffe0\041\uffe0\061" +
    "\uffe0\066\uffe0\070\uffe0\001\002\000\004\065\033\001\002" +
    "\000\006\002\uffff\007\uffff\001\002\000\004\061\034\001" +
    "\002\000\004\073\035\001\002\000\024\014\044\042\046" +
    "\052\050\054\051\055\052\056\036\061\047\062\041\065" +
    "\037\001\002\000\020\012\uffb6\013\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\001\002\000\024\014\044\042" +
    "\046\052\050\054\051\055\052\056\036\061\047\062\041" +
    "\065\037\001\002\000\012\064\uffab\070\uffab\072\uffab\073" +
    "\uffab\001\002\000\024\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\064\uffa9\070\uffa9\072\uffa9\073\uffa9\001\002\000" +
    "\012\064\uffac\070\uffac\072\uffac\073\uffac\001\002\000\042" +
    "\012\uffb5\013\uffb5\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\064\uffa5" +
    "\070\uffa5\072\uffa5\073\uffa5\001\002\000\024\014\044\042" +
    "\046\052\050\054\051\055\052\056\036\061\047\062\041" +
    "\065\037\001\002\000\014\016\121\017\120\020\124\021" +
    "\122\022\123\001\002\000\012\064\uffa7\070\uffa7\072\uffa7" +
    "\073\uffa7\001\002\000\044\012\uffb8\013\uffb8\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\064\uffaa\065\107\070\uffaa\072\uffaa\073" +
    "\uffaa\001\002\000\012\064\uffa6\070\uffa6\072\uffa6\073\uffa6" +
    "\001\002\000\024\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\064\uffa8\070\uffa8\072\uffa8\073\uffa8\001\002\000\020" +
    "\012\uffb7\013\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\001\002\000\020\012\100\013\076\023\075\024\073" +
    "\025\074\026\072\027\077\001\002\000\004\073\055\001" +
    "\002\000\004\061\060\001\002\000\004\064\uffc3\001\002" +
    "\000\004\064\066\001\002\000\006\016\063\017\062\001" +
    "\002\000\004\064\uffc4\001\002\000\004\017\065\001\002" +
    "\000\004\016\064\001\002\000\004\064\uffc2\001\002\000" +
    "\004\064\uffc1\001\002\000\004\071\067\001\002\000\016" +
    "\034\uffe1\037\uffe1\040\uffe1\041\uffe1\061\uffe1\070\uffe1\001" +
    "\002\000\016\034\023\037\025\040\031\041\022\061\024" +
    "\070\071\001\002\000\022\032\uffdc\034\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\061\uffdc\066\uffdc\070\uffdc\001\002\000\010" +
    "\055\uffcb\056\uffcb\061\uffcb\001\002\000\010\055\uffcd\056" +
    "\uffcd\061\uffcd\001\002\000\010\055\uffcc\056\uffcc\061\uffcc" +
    "\001\002\000\010\055\uffce\056\uffce\061\uffce\001\002\000" +
    "\010\055\uffcf\056\uffcf\061\uffcf\001\002\000\010\055\uffca" +
    "\056\uffca\061\uffca\001\002\000\010\055\uffd0\056\uffd0\061" +
    "\uffd0\001\002\000\010\055\102\056\106\061\104\001\002" +
    "\000\012\064\uffb3\070\uffb3\072\uffb3\073\uffb3\001\002\000" +
    "\012\064\uffb1\070\uffb1\072\uffb1\073\uffb1\001\002\000\014" +
    "\064\uffb4\065\107\070\uffb4\072\uffb4\073\uffb4\001\002\000" +
    "\012\064\uffaf\070\uffaf\072\uffaf\073\uffaf\001\002\000\012" +
    "\064\uffb2\070\uffb2\072\uffb2\073\uffb2\001\002\000\024\014" +
    "\044\042\046\052\050\054\051\055\052\056\036\061\047" +
    "\062\041\065\037\001\002\000\006\064\uffa2\072\uffa2\001" +
    "\002\000\006\064\uffa3\072\uffa3\001\002\000\006\064\115" +
    "\072\114\001\002\000\006\064\uffa1\072\uffa1\001\002\000" +
    "\024\014\044\042\046\052\050\054\051\055\052\056\036" +
    "\061\047\062\041\065\037\001\002\000\004\073\116\001" +
    "\002\000\042\012\uffa4\013\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\064\uffa4\070\uffa4\072\uffa4\073\uffa4\001\002\000\006" +
    "\064\uffa0\072\uffa0\001\002\000\010\054\uffc8\061\uffc8\062" +
    "\uffc8\001\002\000\010\054\uffc9\061\uffc9\062\uffc9\001\002" +
    "\000\010\054\uffc6\061\uffc6\062\uffc6\001\002\000\010\054" +
    "\uffc5\061\uffc5\062\uffc5\001\002\000\010\054\uffc7\061\uffc7" +
    "\062\uffc7\001\002\000\010\054\131\061\132\062\127\001" +
    "\002\000\012\064\uffb0\070\uffb0\072\uffb0\073\uffb0\001\002" +
    "\000\012\064\uffbb\070\uffbb\072\uffbb\073\uffbb\001\002\000" +
    "\012\064\uffba\070\uffba\072\uffba\073\uffba\001\002\000\012" +
    "\064\uffb9\070\uffb9\072\uffb9\073\uffb9\001\002\000\014\064" +
    "\uffbc\065\107\070\uffbc\072\uffbc\073\uffbc\001\002\000\012" +
    "\064\uffad\070\uffad\072\uffad\073\uffad\001\002\000\004\064" +
    "\135\001\002\000\012\064\uffae\070\uffae\072\uffae\073\uffae" +
    "\001\002\000\024\014\044\042\046\052\050\054\051\055" +
    "\052\056\036\061\047\062\041\065\037\001\002\000\006" +
    "\064\140\072\114\001\002\000\004\071\141\001\002\000" +
    "\016\034\uffe1\037\uffe1\040\uffe1\041\uffe1\061\uffe1\070\uffe1" +
    "\001\002\000\016\034\023\037\025\040\031\041\022\061" +
    "\024\070\143\001\002\000\022\032\uffdd\034\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\061\uffdd\066\uffdd\070\uffdd\001\002\000" +
    "\024\014\044\042\046\052\050\054\051\055\052\056\036" +
    "\061\047\062\041\065\037\001\002\000\004\073\146\001" +
    "\002\000\022\032\uffec\034\uffec\037\uffec\040\uffec\041\uffec" +
    "\061\uffec\066\uffec\070\uffec\001\002\000\024\014\044\042" +
    "\046\052\050\054\051\055\052\056\036\061\047\062\041" +
    "\065\037\001\002\000\006\064\151\072\114\001\002\000" +
    "\004\071\152\001\002\000\016\034\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\061\uffe1\070\uffe1\001\002\000\016\034\023\037" +
    "\025\040\031\041\022\061\024\070\154\001\002\000\026" +
    "\032\uffd8\034\uffd8\035\155\036\156\037\uffd8\040\uffd8\041" +
    "\uffd8\061\uffd8\066\uffd8\070\uffd8\001\002\000\004\067\167" +
    "\001\002\000\004\065\160\001\002\000\022\032\uffde\034" +
    "\uffde\037\uffde\040\uffde\041\uffde\061\uffde\066\uffde\070\uffde" +
    "\001\002\000\024\014\044\042\046\052\050\054\051\055" +
    "\052\056\036\061\047\062\041\065\037\001\002\000\004" +
    "\064\162\001\002\000\004\067\163\001\002\000\016\034" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\061\uffe1\066\uffe1\001\002" +
    "\000\016\034\023\037\025\040\031\041\022\061\024\066" +
    "\165\001\002\000\026\032\uffd8\034\uffd8\035\155\036\156" +
    "\037\uffd8\040\uffd8\041\uffd8\061\uffd8\066\uffd8\070\uffd8\001" +
    "\002\000\022\032\uffda\034\uffda\037\uffda\040\uffda\041\uffda" +
    "\061\uffda\066\uffda\070\uffda\001\002\000\016\034\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\061\uffe1\066\uffe1\001\002\000\016" +
    "\034\023\037\025\040\031\041\022\061\024\066\171\001" +
    "\002\000\022\032\uffd9\034\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\061\uffd9\066\uffd9\070\uffd9\001\002\000\004\061\173\001" +
    "\002\000\004\064\174\001\002\000\004\071\175\001\002" +
    "\000\010\031\uffd5\033\200\070\uffd5\001\002\000\006\031" +
    "\205\070\206\001\002\000\006\031\uffd6\070\uffd6\001\002" +
    "\000\004\075\201\001\002\000\016\032\uffe1\034\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\061\uffe1\001\002\000\016\032\203" +
    "\034\023\037\025\040\031\041\022\061\024\001\002\000" +
    "\004\073\204\001\002\000\006\031\uffd4\070\uffd4\001\002" +
    "\000\010\052\211\053\212\062\207\001\002\000\022\032" +
    "\uffdb\034\uffdb\037\uffdb\040\uffdb\041\uffdb\061\uffdb\066\uffdb" +
    "\070\uffdb\001\002\000\004\075\uffd3\001\002\000\004\075" +
    "\213\001\002\000\004\075\uffd2\001\002\000\004\075\uffd1" +
    "\001\002\000\016\032\uffe1\034\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\061\uffe1\001\002\000\016\032\215\034\023\037\025" +
    "\040\031\041\022\061\024\001\002\000\004\073\216\001" +
    "\002\000\006\031\uffd7\070\uffd7\001\002\000\006\002\000" +
    "\007\221\001\002\000\006\002\uffe4\007\uffe4\001\002\000" +
    "\016\042\006\043\007\044\011\045\010\046\014\050\004" +
    "\001\002\000\006\061\ufff8\071\ufff8\001\002\000\006\061" +
    "\225\071\224\001\002\000\004\070\235\001\002\000\004" +
    "\065\226\001\002\000\024\014\044\042\046\052\050\054" +
    "\051\055\052\056\036\061\047\062\041\065\037\001\002" +
    "\000\006\064\230\072\114\001\002\000\004\071\231\001" +
    "\002\000\032\034\ufffd\037\ufffd\040\ufffd\041\ufffd\042\006" +
    "\043\007\044\011\045\010\046\014\050\004\061\ufffd\070" +
    "\ufffd\001\002\000\016\034\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\061\uffe1\070\uffe1\001\002\000\016\034\023\037\025\040" +
    "\031\041\022\061\024\070\234\001\002\000\006\002\uffe5" +
    "\007\uffe5\001\002\000\010\015\ufff9\061\ufff9\071\ufff9\001" +
    "\002\000\020\006\ufffe\034\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\061\ufffe\070\ufffe\001\002\000\010\015\ufff8\065\243\071" +
    "\ufff8\001\002\000\006\015\ufffb\071\224\001\002\000\004" +
    "\015\251\001\002\000\004\015\ufffa\001\002\000\016\042" +
    "\006\043\007\044\011\045\010\046\014\050\004\001\002" +
    "\000\004\072\245\001\002\000\016\042\006\043\007\044" +
    "\011\045\010\046\014\050\004\001\002\000\004\064\247" +
    "\001\002\000\004\015\ufff7\001\002\000\004\073\274\001" +
    "\002\000\026\014\044\030\254\042\046\052\050\054\051" +
    "\055\052\056\036\061\047\062\041\065\037\001\002\000" +
    "\004\073\ufff5\001\002\000\004\073\ufff4\001\002\000\016" +
    "\042\006\043\007\044\011\045\010\046\014\050\260\001" +
    "\002\000\004\073\ufff3\001\002\000\004\073\ufff2\001\002" +
    "\000\004\073\ufff6\001\002\000\010\065\267\071\uffe7\073" +
    "\uffe7\001\002\000\006\071\uffef\073\uffef\001\002\000\006" +
    "\071\263\073\ufff1\001\002\000\024\014\044\042\046\052" +
    "\050\054\051\055\052\056\036\061\047\062\041\065\037" +
    "\001\002\000\004\070\265\001\002\000\006\071\ufff0\073" +
    "\ufff0\001\002\000\004\073\uffee\001\002\000\024\014\044" +
    "\042\046\052\050\054\051\055\052\056\036\061\047\062" +
    "\041\065\037\001\002\000\004\072\271\001\002\000\024" +
    "\014\044\042\046\052\050\054\051\055\052\056\036\061" +
    "\047\062\041\065\037\001\002\000\004\064\273\001\002" +
    "\000\004\073\uffed\001\002\000\034\006\ufffc\034\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\050\ufffc\061\ufffc\070\ufffc\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\012\002\004\004\014\005\012\021\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\235\005\012\021\011\001\001" +
    "\000\002\001\001\000\004\003\015\001\001\000\004\023" +
    "\216\001\001\000\002\001\001\000\004\024\020\001\001" +
    "\000\010\020\026\025\025\026\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\037\044\041\052\043\037\044\041\045" +
    "\053\046\042\001\001\000\002\001\001\000\016\037\044" +
    "\041\052\043\037\044\041\045\133\046\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\037\044\041\052\043\037\044\041\045" +
    "\132\046\042\001\001\000\004\033\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\100\001\001\000\002" +
    "\001\001\000\010\034\056\035\060\036\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\067" +
    "\001\001\000\010\020\026\025\025\026\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\104\046\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\037\044\041\052" +
    "\043\037\044\041\045\112\046\042\047\111\050\110\051" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\044\041\052\043" +
    "\037\044\041\045\116\046\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\125\046\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\037\044\041\052\043\037\044\041" +
    "\045\112\046\042\047\136\050\110\051\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\141\001\001" +
    "\000\010\020\026\025\025\026\027\001\001\000\002\001" +
    "\001\000\016\037\044\041\052\043\037\044\041\045\144" +
    "\046\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\037\044\041\052\043\037\044\041\045\112\046\042" +
    "\047\147\050\110\051\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\152\001\001\000\010\020\026" +
    "\025\025\026\027\001\001\000\004\052\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\044\041\052\043\037\044\041\045\160\046\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\163" +
    "\001\001\000\010\020\026\025\025\026\027\001\001\000" +
    "\004\052\165\001\001\000\002\001\001\000\004\024\167" +
    "\001\001\000\010\020\026\025\025\026\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\175\030\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\201" +
    "\001\001\000\010\020\026\025\025\026\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\213\001\001" +
    "\000\010\020\026\025\025\026\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\217\001\001\000\002" +
    "\001\001\000\004\021\221\001\001\000\004\007\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\037\044\041\052\043\037\044\041\045\112\046" +
    "\042\047\226\050\110\051\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\231\005\012\021\011\001" +
    "\001\000\004\024\232\001\001\000\010\020\026\025\025" +
    "\026\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\240\007\237\010\241\001\001" +
    "\000\002\001\001\000\004\011\247\001\001\000\002\001" +
    "\001\000\004\021\243\001\001\000\002\001\001\000\004" +
    "\021\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\256\013\251\014\252\016\254" +
    "\037\044\041\052\043\037\044\041\045\255\046\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\265\001\001\000\004\015\261\001\001" +
    "\000\002\001\001\000\016\037\044\041\052\043\037\044" +
    "\041\045\263\046\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\044\041\052\043" +
    "\037\044\041\045\267\046\042\001\001\000\002\001\001" +
    "\000\016\037\044\041\052\043\037\044\041\045\271\046" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DECL_VARS MAIN DECL_FUNCIONES 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= t_exec t_lBracket SENTS t_rBracket 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECL_VARS ::= DECL_VAR DECL_VARS 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL_VARS ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL_VAR ::= TIPO t_id DECL_ESP ASIGN t_puntoComa 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL_ESP ::= DECL_ARRAY 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ESP",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL_ESP ::= DECL_TUPLA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ESP",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL_ARRAY ::= DECL_ARRAY t_lCorchete t_rCorchete 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL_ARRAY ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECL_TUPLA ::= t_lParentesis TIPO t_coma TIPO t_rParentesis 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIGN ::= t_asignacion T_ASIGN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // T_ASIGN ::= ASIGN_NORMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // T_ASIGN ::= ASIGN_ARRAY 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // T_ASIGN ::= ASIGN_TUPLA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGN_NORMAL ::= EXPRESION 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_NORMAL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGN_ARRAY ::= t_new TIPO DIM_ARRAY 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_ARRAY",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DIM_ARRAY ::= DIM_ARRAY t_lCorchete EXPRESION t_rCorchete 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DIM_ARRAY ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGN_TUPLA ::= t_new t_tupla DIM_TUPLA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_TUPLA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DIM_TUPLA ::= t_lParentesis EXPRESION t_coma EXPRESION t_rParentesis 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_TUPLA",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // REAL_ASIGN ::= t_id t_asignacion EXPRESION t_puntoComa 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REAL_ASIGN",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= t_int 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= t_char 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= t_float 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= t_bool 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= t_tupla 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO ::= t_str 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNC ::= t_fun TIPO DECL_ARRAY t_id t_lParentesis PARAMETROS t_rParentesis t_lCorchete DECL_VARS SENTS t_rCorchete 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECL_FUNCIONES ::= DECL_FUNCIONES FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECL_FUNCIONES ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTS ::= SENTS SENT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTS ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT ::= OTRAS_SENTS 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT ::= REAL_ASIGN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OTRAS_SENTS ::= t_if t_lParentesis PARAMETROS t_rParentesis t_lCorchete SENTS t_rCorchete ELSE_COND 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OTRAS_SENTS ::= t_while t_lParentesis PARAMETROS t_rParentesis t_lCorchete SENTS t_rCorchete 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OTRAS_SENTS ::= t_for t_lParentesis t_id t_puntoComa EXPRESION t_puntoComa OP_RAPIDOS t_rParentesis t_lCorchete SENTS t_rCorchete 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OTRAS_SENTS ::= t_switch t_lParentesis t_id t_rParentesis t_lCorchete CASOS t_rCorchete 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELSE_COND ::= t_elif t_lParentesis EXPRESION t_rParentesis t_lBracket SENTS t_rBracket ELSE_COND 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELSE_COND ::= t_else t_lBracket SENTS t_rBracket 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELSE_COND ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASOS ::= CASOS t_case INIT_CASES t_dosPuntos SENTS t_break t_puntoComa 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASOS ::= CASO_DEFAULT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASOS ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASO_DEFAULT ::= t_default t_dosPuntos SENTS t_break t_puntoComa 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO_DEFAULT",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INIT_CASES ::= t_numero 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INIT_CASES ::= t_lineaCaracteres 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INIT_CASES ::= t_caracter 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_LOG ::= t_and 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP_LOG ::= t_or 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP_LOG ::= t_mayor 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP_LOG ::= t_menor 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_LOG ::= t_igualMayor 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP_LOG ::= t_igualMenor 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP_LOG ::= t_igual 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP_ARIT ::= t_suma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP_ARIT ::= t_resta 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_ARIT ::= t_multiplicacion 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_ARIT ::= t_division 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_ARIT ::= t_modulo 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_RAPIDOS ::= OP_RAPIDO_S 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_RAPIDOS ::= OP_RAPIDO_R 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_RAPIDO_S ::= t_id t_suma t_suma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_S",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_RAPIDO_R ::= t_id t_resta t_resta 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_R",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TERMINO_1 ::= t_id 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TERMINO_1 ::= t_numero 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TERMINO_1 ::= LLAMADA_FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TERMINO_1 ::= t_decimal 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TERMINO_2 ::= t_id 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TERMINO_2 ::= t_numero 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TERMINO_2 ::= LLAMADA_FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TERMINO_2 ::= t_decimal 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TERMINOLOG_1 ::= t_id 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TERMINOLOG_1 ::= t_true 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TERMINOLOG_1 ::= t_false 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TERMINOLOG_1 ::= LLAMADA_FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TERMINOLOG_2 ::= t_id 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TERMINOLOG_2 ::= t_true 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TERMINOLOG_2 ::= t_false 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TERMINOLOG_2 ::= LLAMADA_FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION_ARITM ::= TERMINO_1 OP_ARIT TERMINO_2 
            {
              Object RESULT =null;
		$$ = $1 $2 $3
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITM",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION_LOG ::= TERMINOLOG_1 OP_LOG TERMINOLOG_2 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= t_lParentesis EXPRESION t_rParentesis 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= t_not EXPRESION 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION_LOG 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION_ARITM 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= t_id 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= t_numero 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= t_decimal 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= t_char 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= t_lineaCaracteres 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= LLAMADA_FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LLAMADA_FUNC ::= t_id t_lParentesis PARAMETROS t_rParentesis t_puntoComa 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNC",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMETROS ::= PARAM_SIMPLE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETROS ::= PARAM_COMPUESTO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAM_SIMPLE ::= EXPRESION 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_SIMPLE",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PARAM_COMPUESTO ::= PARAMETROS t_coma EXPRESION 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_COMPUESTO",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
