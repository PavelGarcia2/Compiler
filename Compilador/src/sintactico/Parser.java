
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java.io.*;
import sintactico.arbol.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import semantico.Semantico;
import herramientas.*;
import lexico.Literal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\006\000\002\055" +
    "\004\000\002\055\002\000\002\056\007\000\002\003\007" +
    "\000\002\004\004\000\002\004\002\000\002\005\007\000" +
    "\002\006\005\000\002\006\002\000\002\007\004\000\002" +
    "\007\002\000\002\010\003\000\002\010\003\000\002\011" +
    "\003\000\002\012\005\000\002\013\006\000\002\013\002" +
    "\000\002\014\006\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\016\000\002\052\005\000\002\052" +
    "\002\000\002\057\003\000\002\057\003\000\002\047\003" +
    "\000\002\047\002\000\002\050\003\000\002\050\005\000" +
    "\002\051\005\000\002\017\004\000\002\017\002\000\002" +
    "\020\004\000\002\020\002\000\002\021\003\000\002\021" +
    "\003\000\002\022\012\000\002\022\011\000\002\022\015" +
    "\000\002\022\011\000\002\022\007\000\002\022\007\000" +
    "\002\022\004\000\002\022\006\000\002\046\012\000\002" +
    "\046\006\000\002\046\002\000\002\023\011\000\002\023" +
    "\003\000\002\023\002\000\002\024\007\000\002\025\004" +
    "\000\002\025\003\000\002\025\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\005\000\002\032\005\000\002\033\003\000\002" +
    "\033\004\000\002\033\003\000\002\033\004\000\002\034" +
    "\003\000\002\034\004\000\002\034\003\000\002\034\004" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\037\005\000\002\040" +
    "\005\000\002\041\005\000\002\041\004\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\054\004\000\002\054\004\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\042\006\000\002\043\003\000\002\043\003" +
    "\000\002\044\003\000\002\045\005\000\002\053\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\022\005\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\004\062\ufffe\001\002\000\016\040\013" +
    "\041\016\042\012\043\015\044\014\062\020\001\002\000" +
    "\020\005\ufffa\040\013\041\016\042\012\043\015\044\014" +
    "\062\020\001\002\000\022\005\ufffe\040\ufffe\041\ufffe\042" +
    "\ufffe\043\ufffe\044\ufffe\045\004\062\ufffe\001\002\000\004" +
    "\002\010\001\002\000\004\002\001\001\002\000\020\005" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\062\uffff" +
    "\001\002\000\010\055\uffed\057\uffed\063\uffed\001\002\000" +
    "\010\055\uffec\057\uffec\063\uffec\001\002\000\010\055\uffe9" +
    "\057\uffe9\063\uffe9\001\002\000\010\055\uffea\057\uffea\063" +
    "\uffea\001\002\000\010\055\uffeb\057\uffeb\063\uffeb\001\002" +
    "\000\004\063\034\001\002\000\010\055\uffe8\057\uffe8\063" +
    "\uffe8\001\002\000\044\004\ufffa\005\ufffa\007\ufffa\032\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\013\041\016\042\012\043" +
    "\015\044\014\046\ufffa\047\ufffa\052\ufffa\062\020\063\ufffa" +
    "\001\002\000\004\005\023\001\002\000\004\053\310\001" +
    "\002\000\006\002\uffdc\006\uffdc\001\002\000\006\002\000" +
    "\006\027\001\002\000\006\002\uffdd\006\uffdd\001\002\000" +
    "\016\040\013\041\016\042\012\043\015\044\014\062\020" +
    "\001\002\000\006\055\ufff7\063\ufff7\001\002\000\006\055" +
    "\033\063\034\001\002\000\004\051\036\001\002\000\004" +
    "\054\035\001\002\000\050\010\uff91\011\uff91\013\uff91\014" +
    "\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91" +
    "\023\uff91\024\uff91\025\uff91\050\uff91\051\uff91\054\uff91\055" +
    "\uff91\056\uff91\057\uff91\001\002\000\016\013\ufff8\050\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\063\ufff8\001\002\000\020\040" +
    "\013\041\016\042\012\043\015\044\014\050\uffe1\062\020" +
    "\001\002\000\004\050\uffe2\001\002\000\004\063\034\001" +
    "\002\000\006\050\uffe0\056\304\001\002\000\004\050\043" +
    "\001\002\000\004\053\044\001\002\000\042\004\ufffa\007" +
    "\ufffa\032\ufffa\035\ufffa\036\ufffa\037\ufffa\040\013\041\016" +
    "\042\012\043\015\044\014\046\ufffa\047\ufffa\052\ufffa\062" +
    "\020\063\ufffa\001\002\000\026\004\uffda\007\uffda\032\uffda" +
    "\035\uffda\036\uffda\037\uffda\046\uffda\047\uffda\052\uffda\063" +
    "\uffda\001\002\000\026\004\050\007\047\032\054\035\062" +
    "\036\053\037\064\046\052\047\055\052\uffe5\063\034\001" +
    "\002\000\004\051\301\001\002\000\024\014\076\015\077" +
    "\063\034\064\uff8e\065\140\066\132\067\275\070\271\071" +
    "\uff8e\001\002\000\004\057\267\001\002\000\004\051\263" +
    "\001\002\000\004\051\242\001\002\000\004\051\217\001" +
    "\002\000\004\051\213\001\002\000\030\004\uffdb\007\uffdb" +
    "\030\uffdb\032\uffdb\035\uffdb\036\uffdb\037\uffdb\046\uffdb\047" +
    "\uffdb\052\uffdb\063\uffdb\001\002\000\030\004\uffd8\007\uffd8" +
    "\030\uffd8\032\uffd8\035\uffd8\036\uffd8\037\uffd8\046\uffd8\047" +
    "\uffd8\052\uffd8\063\uffd8\001\002\000\006\013\210\051\156" +
    "\001\002\000\030\004\uffd9\007\uffd9\030\uffd9\032\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\046\uffd9\047\uffd9\052\uffd9\063\uffd9" +
    "\001\002\000\004\051\116\001\002\000\004\052\115\001" +
    "\002\000\004\051\065\001\002\000\004\063\034\001\002" +
    "\000\004\050\067\001\002\000\004\053\070\001\002\000" +
    "\010\027\uffca\031\071\052\uffca\001\002\000\004\060\111" +
    "\001\002\000\006\027\074\052\075\001\002\000\006\027" +
    "\uffcb\052\uffcb\001\002\000\014\014\076\015\077\064\uff8e" +
    "\065\102\066\103\001\002\000\030\004\uffd4\007\uffd4\030" +
    "\uffd4\032\uffd4\035\uffd4\036\uffd4\037\uffd4\046\uffd4\047\uffd4" +
    "\052\uffd4\063\uffd4\001\002\000\006\064\uff90\071\uff90\001" +
    "\002\000\006\064\uff8f\071\uff8f\001\002\000\004\064\110" +
    "\001\002\000\004\060\104\001\002\000\004\060\uffc7\001" +
    "\002\000\004\060\uffc6\001\002\000\024\007\uffda\030\uffda" +
    "\032\uffda\035\uffda\036\uffda\037\uffda\046\uffda\047\uffda\063" +
    "\uffda\001\002\000\024\007\047\030\106\032\054\035\062" +
    "\036\053\037\064\046\052\047\055\063\034\001\002\000" +
    "\004\057\107\001\002\000\006\027\uffcc\052\uffcc\001\002" +
    "\000\004\060\uffc8\001\002\000\024\007\uffda\030\uffda\032" +
    "\uffda\035\uffda\036\uffda\037\uffda\046\uffda\047\uffda\063\uffda" +
    "\001\002\000\024\007\047\030\113\032\054\035\062\036" +
    "\053\037\064\046\052\047\055\063\034\001\002\000\004" +
    "\057\114\001\002\000\006\027\uffc9\052\uffc9\001\002\000" +
    "\006\002\uffe7\006\uffe7\001\002\000\030\012\133\014\076" +
    "\015\077\051\123\063\034\064\uff8e\065\140\066\132\067" +
    "\134\070\131\071\uff8e\001\002\000\006\050\uff94\056\uff94" +
    "\001\002\000\006\050\uff95\056\uff95\001\002\000\006\064" +
    "\206\071\207\001\002\000\042\010\uffaa\011\uffaa\014\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\050\uff9d\054\uff9d\056\uff9d\057\uff9d" +
    "\001\002\000\030\012\133\014\076\015\077\051\123\063" +
    "\034\064\uff8e\065\140\066\132\067\134\070\131\071\uff8e" +
    "\001\002\000\012\050\uffa1\054\uffa1\056\uffa1\057\uffa1\001" +
    "\002\000\012\050\uff9e\054\uff9e\056\uff9e\057\uff9e\001\002" +
    "\000\044\010\uffad\011\uffad\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\050\uff9f\051\156\054\uff9f\056\uff9f\057\uff9f\001\002\000" +
    "\014\014\170\015\171\016\173\017\174\020\172\001\002" +
    "\000\006\050\164\056\161\001\002\000\030\010\uffab\011" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\050\uff97" +
    "\054\uff97\056\uff97\057\uff97\001\002\000\012\050\uff9a\054" +
    "\uff9a\056\uff9a\057\uff9a\001\002\000\030\012\133\014\076" +
    "\015\077\051\123\063\034\064\uff8e\065\140\066\132\067" +
    "\134\070\131\071\uff8e\001\002\000\030\010\uffac\011\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\050\uff98\054" +
    "\uff98\056\uff98\057\uff98\001\002\000\020\010\143\011\145" +
    "\021\147\022\146\023\141\024\144\025\142\001\002\000" +
    "\012\050\uffa0\054\uffa0\056\uffa0\057\uffa0\001\002\000\006" +
    "\050\uff93\056\uff93\001\002\000\012\050\uff99\054\uff99\056" +
    "\uff99\057\uff99\001\002\000\010\063\uffc1\067\uffc1\070\uffc1" +
    "\001\002\000\010\063\uffbf\067\uffbf\070\uffbf\001\002\000" +
    "\010\063\uffc5\067\uffc5\070\uffc5\001\002\000\010\063\uffc0" +
    "\067\uffc0\070\uffc0\001\002\000\010\063\uffc4\067\uffc4\070" +
    "\uffc4\001\002\000\010\063\uffc2\067\uffc2\070\uffc2\001\002" +
    "\000\010\063\uffc3\067\uffc3\070\uffc3\001\002\000\010\063" +
    "\034\067\155\070\153\001\002\000\014\050\uffa9\051\156" +
    "\054\uffa9\056\uffa9\057\uffa9\001\002\000\012\050\uffa6\054" +
    "\uffa6\056\uffa6\057\uffa6\001\002\000\012\050\uffa7\054\uffa7" +
    "\056\uffa7\057\uffa7\001\002\000\012\050\uffa4\054\uffa4\056" +
    "\uffa4\057\uffa4\001\002\000\012\050\uffa8\054\uffa8\056\uffa8" +
    "\057\uffa8\001\002\000\030\012\133\014\076\015\077\051" +
    "\123\063\034\064\uff8e\065\140\066\132\067\134\070\131" +
    "\071\uff8e\001\002\000\006\050\160\056\161\001\002\000" +
    "\042\010\uff96\011\uff96\014\uff96\015\uff96\016\uff96\017\uff96" +
    "\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\050" +
    "\uff96\054\uff96\056\uff96\057\uff96\001\002\000\030\012\133" +
    "\014\076\015\077\051\123\063\034\064\uff8e\065\140\066" +
    "\132\067\134\070\131\071\uff8e\001\002\000\006\050\uff92" +
    "\056\uff92\001\002\000\012\050\uffa2\054\uffa2\056\uffa2\057" +
    "\uffa2\001\002\000\004\053\165\001\002\000\024\007\uffda" +
    "\032\uffda\035\uffda\036\uffda\037\uffda\046\uffda\047\uffda\052" +
    "\uffda\063\uffda\001\002\000\024\007\047\032\054\035\062" +
    "\036\053\037\064\046\052\047\055\052\167\063\034\001" +
    "\002\000\030\004\uffd6\007\uffd6\030\uffd6\032\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\046\uffd6\047\uffd6\052\uffd6\063\uffd6\001" +
    "\002\000\014\014\uffbe\015\uffbe\063\uffbe\064\uffbe\071\uffbe" +
    "\001\002\000\014\014\uffbd\015\uffbd\063\uffbd\064\uffbd\071" +
    "\uffbd\001\002\000\014\014\uffba\015\uffba\063\uffba\064\uffba" +
    "\071\uffba\001\002\000\014\014\uffbc\015\uffbc\063\uffbc\064" +
    "\uffbc\071\uffbc\001\002\000\014\014\uffbb\015\uffbb\063\uffbb" +
    "\064\uffbb\071\uffbb\001\002\000\014\014\076\015\077\063" +
    "\034\064\uff8e\071\uff8e\001\002\000\014\050\uffb1\051\156" +
    "\054\uffb1\056\uffb1\057\uffb1\001\002\000\012\050\uffa5\054" +
    "\uffa5\056\uffa5\057\uffa5\001\002\000\006\064\202\071\203" +
    "\001\002\000\012\050\uffaf\054\uffaf\056\uffaf\057\uffaf\001" +
    "\002\000\012\050\uffb0\054\uffb0\056\uffb0\057\uffb0\001\002" +
    "\000\012\050\uffae\054\uffae\056\uffae\057\uffae\001\002\000" +
    "\004\050\205\001\002\000\012\050\uffa3\054\uffa3\056\uffa3" +
    "\057\uffa3\001\002\000\024\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\050\uff9c\054\uff9c\056\uff9c\057\uff9c\001\002" +
    "\000\024\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\050" +
    "\uff9b\054\uff9b\056\uff9b\057\uff9b\001\002\000\030\012\133" +
    "\014\076\015\077\051\123\063\034\064\uff8e\065\140\066" +
    "\132\067\134\070\131\071\uff8e\001\002\000\004\057\212" +
    "\001\002\000\030\004\uffee\007\uffee\030\uffee\032\uffee\035" +
    "\uffee\036\uffee\037\uffee\046\uffee\047\uffee\052\uffee\063\uffee" +
    "\001\002\000\030\012\133\014\076\015\077\051\123\063" +
    "\034\064\uff8e\065\140\066\132\067\134\070\131\071\uff8e" +
    "\001\002\000\004\050\215\001\002\000\004\057\216\001" +
    "\002\000\030\004\uffd2\007\uffd2\030\uffd2\032\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\046\uffd2\047\uffd2\052\uffd2\063\uffd2\001" +
    "\002\000\030\012\133\014\076\015\077\051\123\063\034" +
    "\064\uff8e\065\140\066\132\067\134\070\131\071\uff8e\001" +
    "\002\000\006\050\221\056\161\001\002\000\004\053\222" +
    "\001\002\000\024\007\uffda\032\uffda\035\uffda\036\uffda\037" +
    "\uffda\046\uffda\047\uffda\052\uffda\063\uffda\001\002\000\024" +
    "\007\047\032\054\035\062\036\053\037\064\046\052\047" +
    "\055\052\224\063\034\001\002\000\034\004\uffcd\007\uffcd" +
    "\030\uffcd\032\uffcd\033\225\034\226\035\uffcd\036\uffcd\037" +
    "\uffcd\046\uffcd\047\uffcd\052\uffcd\063\uffcd\001\002\000\004" +
    "\053\237\001\002\000\004\051\230\001\002\000\030\004" +
    "\uffd7\007\uffd7\030\uffd7\032\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\046\uffd7\047\uffd7\052\uffd7\063\uffd7\001\002\000\030\012" +
    "\133\014\076\015\077\051\123\063\034\064\uff8e\065\140" +
    "\066\132\067\134\070\131\071\uff8e\001\002\000\004\050" +
    "\232\001\002\000\004\053\233\001\002\000\024\007\uffda" +
    "\032\uffda\035\uffda\036\uffda\037\uffda\046\uffda\047\uffda\052" +
    "\uffda\063\uffda\001\002\000\024\007\047\032\054\035\062" +
    "\036\053\037\064\046\052\047\055\052\235\063\034\001" +
    "\002\000\034\004\uffcd\007\uffcd\030\uffcd\032\uffcd\033\225" +
    "\034\226\035\uffcd\036\uffcd\037\uffcd\046\uffcd\047\uffcd\052" +
    "\uffcd\063\uffcd\001\002\000\030\004\uffcf\007\uffcf\030\uffcf" +
    "\032\uffcf\035\uffcf\036\uffcf\037\uffcf\046\uffcf\047\uffcf\052" +
    "\uffcf\063\uffcf\001\002\000\024\007\uffda\032\uffda\035\uffda" +
    "\036\uffda\037\uffda\046\uffda\047\uffda\052\uffda\063\uffda\001" +
    "\002\000\024\007\047\032\054\035\062\036\053\037\064" +
    "\046\052\047\055\052\241\063\034\001\002\000\030\004" +
    "\uffce\007\uffce\030\uffce\032\uffce\035\uffce\036\uffce\037\uffce" +
    "\046\uffce\047\uffce\052\uffce\063\uffce\001\002\000\004\063" +
    "\034\001\002\000\004\057\244\001\002\000\030\012\133" +
    "\014\076\015\077\051\123\063\034\064\uff8e\065\140\066" +
    "\132\067\134\070\131\071\uff8e\001\002\000\004\057\246" +
    "\001\002\000\004\063\034\001\002\000\004\050\uffb8\001" +
    "\002\000\006\014\257\015\260\001\002\000\004\050\253" +
    "\001\002\000\004\050\uffb9\001\002\000\004\053\254\001" +
    "\002\000\024\007\uffda\032\uffda\035\uffda\036\uffda\037\uffda" +
    "\046\uffda\047\uffda\052\uffda\063\uffda\001\002\000\024\007" +
    "\047\032\054\035\062\036\053\037\064\046\052\047\055" +
    "\052\256\063\034\001\002\000\030\004\uffd5\007\uffd5\030" +
    "\uffd5\032\uffd5\035\uffd5\036\uffd5\037\uffd5\046\uffd5\047\uffd5" +
    "\052\uffd5\063\uffd5\001\002\000\004\014\262\001\002\000" +
    "\004\015\261\001\002\000\004\050\uffb6\001\002\000\004" +
    "\050\uffb7\001\002\000\030\012\133\014\076\015\077\051" +
    "\123\063\034\064\uff8e\065\140\066\132\067\134\070\131" +
    "\071\uff8e\001\002\000\004\050\265\001\002\000\004\057" +
    "\266\001\002\000\030\004\uffd3\007\uffd3\030\uffd3\032\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\046\uffd3\047\uffd3\052\uffd3\063" +
    "\uffd3\001\002\000\030\004\uffd1\007\uffd1\030\uffd1\032\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\046\uffd1\047\uffd1\052\uffd1\063" +
    "\uffd1\001\002\000\004\057\uffe3\001\002\000\004\057\uff97" +
    "\001\002\000\006\064\277\071\300\001\002\000\004\057" +
    "\276\001\002\000\004\057\uffe4\001\002\000\004\057\uff98" +
    "\001\002\000\004\052\uffe6\001\002\000\004\057\uff9c\001" +
    "\002\000\004\057\uff9b\001\002\000\004\050\302\001\002" +
    "\000\004\057\303\001\002\000\030\004\uffd0\007\uffd0\030" +
    "\uffd0\032\uffd0\035\uffd0\036\uffd0\037\uffd0\046\uffd0\047\uffd0" +
    "\052\uffd0\063\uffd0\001\002\000\016\040\013\041\016\042" +
    "\012\043\015\044\014\062\020\001\002\000\004\050\uffdf" +
    "\001\002\000\010\050\ufff7\055\ufff7\056\ufff7\001\002\000" +
    "\010\050\uffde\055\033\056\uffde\001\002\000\040\007\ufffa" +
    "\032\ufffa\035\ufffa\036\ufffa\037\ufffa\040\013\041\016\042" +
    "\012\043\015\044\014\046\ufffa\047\ufffa\052\ufffa\062\020" +
    "\063\ufffa\001\002\000\024\007\uffda\032\uffda\035\uffda\036" +
    "\uffda\037\uffda\046\uffda\047\uffda\052\uffda\063\uffda\001\002" +
    "\000\024\007\047\032\054\035\062\036\053\037\064\046" +
    "\052\047\055\052\313\063\034\001\002\000\006\002\ufffc" +
    "\006\ufffc\001\002\000\030\004\ufffb\005\ufffb\007\ufffb\032" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\046\ufffb\047\ufffb\052\ufffb" +
    "\063\ufffb\001\002\000\010\013\ufff7\055\ufff7\057\ufff7\001" +
    "\002\000\010\013\320\055\033\057\ufff5\001\002\000\004" +
    "\057\333\001\002\000\032\012\133\014\076\015\077\026" +
    "\321\051\123\063\034\064\uff8e\065\140\066\132\067\134" +
    "\070\131\071\uff8e\001\002\000\016\040\013\041\016\042" +
    "\012\043\015\044\014\062\020\001\002\000\004\057\ufff4" +
    "\001\002\000\004\057\ufff3\001\002\000\004\057\ufff2\001" +
    "\002\000\004\057\ufff6\001\002\000\006\055\uffef\057\uffef" +
    "\001\002\000\006\055\330\057\ufff1\001\002\000\030\012" +
    "\133\014\076\015\077\051\123\063\034\064\uff8e\065\140" +
    "\066\132\067\134\070\131\071\uff8e\001\002\000\004\054" +
    "\332\001\002\000\006\055\ufff0\057\ufff0\001\002\000\044" +
    "\004\ufff9\005\ufff9\007\ufff9\032\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9" +
    "\047\ufff9\052\ufff9\062\ufff9\063\ufff9\001\002\000\004\063" +
    "\034\001\002\000\006\013\320\057\ufff5\001\002\000\004" +
    "\057\337\001\002\000\022\005\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\062\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\010\002\006\055\004\056\005\001\001\000" +
    "\004\015\333\001\001\000\010\004\021\005\020\015\016" +
    "\001\001\000\006\055\010\056\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\314\001\001\000\002\001\001" +
    "\000\010\004\313\005\020\015\016\001\001\000\004\003" +
    "\023\001\001\000\002\001\001\000\004\017\024\001\001" +
    "\000\004\016\025\001\001\000\002\001\001\000\004\015" +
    "\027\001\001\000\004\006\030\001\001\000\004\053\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\037\047\041\050\036" +
    "\051\040\001\001\000\002\001\001\000\004\053\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\044\005\020\015\016\001\001\000\004\020" +
    "\045\001\001\000\016\014\056\021\055\022\060\042\050" +
    "\052\062\053\057\001\001\000\002\001\001\000\012\053" +
    "\273\054\267\057\272\060\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\071\024\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\100\060\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\104\001\001\000\014\014\056\021\055\022\060\042\050" +
    "\053\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\111\001\001\000\014\014\056" +
    "\021\055\022\060\042\050\053\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\033\126" +
    "\035\134\037\135\040\123\041\136\042\121\043\127\044" +
    "\117\045\116\053\125\054\124\060\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\033\126\035\134\037\135\040\123\041\203" +
    "\042\121\053\125\054\124\060\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\033\126\035\134\037\135\040\123\041\162" +
    "\042\121\053\125\054\124\060\120\001\001\000\002\001" +
    "\001\000\004\026\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\036\153\042" +
    "\151\053\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\033\126\035\134\037\135\040\123\041\136\042\121" +
    "\043\156\044\117\045\116\053\125\054\124\060\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\033\126" +
    "\035\134\037\135\040\123\041\161\042\121\053\125\054" +
    "\124\060\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\165\001\001\000\014\014" +
    "\056\021\055\022\060\042\050\053\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\034\176" +
    "\042\200\053\175\060\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\033\126" +
    "\035\134\037\135\040\123\041\210\042\121\053\125\054" +
    "\124\060\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\033\126\035\134\037\135\040\123\041\213\042" +
    "\121\053\125\054\124\060\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\033\126\035" +
    "\134\037\135\040\123\041\136\042\121\043\217\044\117" +
    "\045\116\053\125\054\124\060\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\222\001\001\000\014" +
    "\014\056\021\055\022\060\042\050\053\057\001\001\000" +
    "\004\046\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\033\126\035\134\037\135\040" +
    "\123\041\230\042\121\053\125\054\124\060\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\233\001" +
    "\001\000\014\014\056\021\055\022\060\042\050\053\057" +
    "\001\001\000\004\046\235\001\001\000\002\001\001\000" +
    "\004\020\237\001\001\000\014\014\056\021\055\022\060" +
    "\042\050\053\057\001\001\000\002\001\001\000\004\053" +
    "\242\001\001\000\002\001\001\000\024\033\126\035\134" +
    "\037\135\040\123\041\244\042\121\053\125\054\124\060" +
    "\120\001\001\000\002\001\001\000\012\030\250\031\251" +
    "\032\246\053\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\254\001\001\000\014\014\056\021\055\022" +
    "\060\042\050\053\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\033\126\035\134\037\135\040\123\041\263" +
    "\042\121\053\125\054\124\060\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\037" +
    "\050\304\051\040\001\001\000\002\001\001\000\004\006" +
    "\306\001\001\000\002\001\001\000\010\004\310\005\020" +
    "\015\016\001\001\000\004\020\311\001\001\000\014\014" +
    "\056\021\055\022\060\042\050\053\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\315\001\001\000" +
    "\004\007\316\001\001\000\002\001\001\000\032\010\324" +
    "\011\321\012\322\033\126\035\134\037\135\040\123\041" +
    "\323\042\121\053\125\054\124\060\120\001\001\000\004" +
    "\015\325\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\326\001\001" +
    "\000\002\001\001\000\024\033\126\035\134\037\135\040" +
    "\123\041\330\042\121\053\125\054\124\060\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\334\001\001\000\004\007\335\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   // private Scanner scanner;
    int errores = 0;
    BufferedWriter bf;

    String file = "error.log";

    // public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
    //     super(s,sf);
    // }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof java_cup.runtime.Symbol) {
            ComplexSymbol token = (ComplexSymbol) info;
            if(token == null){
                System.out.println("Token nulo");
            }
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
        System.exit(0);
    }

    public void escribeEnFichero(String msg){
        try{
            if(errores == 1){
                bf = new BufferedWriter(new FileWriter(file));
            }
            bf.write(msg);
        } catch( IOException e ){

        }
    }


    public int getErrores(){
        return errores;
    }

    private int extractLine(ComplexSymbol symbol) {
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getLine();
        }
        return 0;
    }

    private int extractColumn(ComplexSymbol symbol) {
        Location l = symbol.getLeft();
        if(l != null) {
            return l.getColumn();
        }
         return 0;
    }

    private int getLineaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getLine();
        }
        return 0;
    }

    private int getColumnaToken(ComplexSymbol sym){
        Location l = sym.getLeft();
        if(l!=null){
            return l.getColumn();
        }
        return 0;
    }

    private String getValor(ComplexSymbol sym){
        // System.out.println("Fallamos en getValor");
        // return (String) sym.value;
        return "";
    }


    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

     @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }

     @Override
    public void syntax_error(Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoPrograma start_val = (NodoPrograma)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DECL_CONST DECL_VARS MAIN DECL_FUNCIONES 
            {
              NodoPrograma RESULT =null;
		int dconstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dconstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDeclConst dconst = (NodoDeclConst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoMain main = (NodoMain)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dfuncsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfuncsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFunc dfuncs = (NodoDeclFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoPrograma(dconst,dvars, dfuncs, main, main.getLine(), main.getColumn());
                                                                                                                                                                                                            Semantico semantico = new Semantico(RESULT, parser); if(errores == 0){semantico.runProgram();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECL_CONST ::= DECL_CON DECL_CONST 
            {
              NodoDeclConst RESULT =null;
		int dconleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dconright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoConst dcon = (NodoConst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dconstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dconstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclConst dconst = (NodoDeclConst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclConst(dcon,dconst,dcon.getLine(),dcon.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECL_CONST ::= 
            {
              NodoDeclConst RESULT =null;
		 RESULT = new NodoDeclConst(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL_CON ::= tConst TIPO ID ASIGN tPuntocoma 
            {
              NodoConst RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol c = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoConst(tipo,id,asign,extractLine(c),extractColumn(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CON",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= tMain tLbracket DECL_VARS SENTS tRbracket 
            {
              NodoMain RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol main = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoMain(dvars,sents,extractLine(main),extractColumn(main)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL_VARS ::= DECL_VAR DECL_VARS 
            {
              NodoDeclVars RESULT =null;
		int dvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoVar dvar = (NodoVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclVars dvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclVars(dvars,dvar,dvar.getLine(),dvar.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL_VARS ::= 
            {
              NodoDeclVars RESULT =null;
		 RESULT = new NodoDeclVars(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL_VAR ::= TIPO ID DECL_ARRAY ASIGN tPuntocoma 
            {
              NodoVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoTipo t = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int darrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int darrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclArray darr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoAsignacion asign = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoVar(t,id,darr,asign,t.getLine(),t.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL_ARRAY ::= DECL_ARRAY tLcorchete tRcorchete 
            {
              NodoDeclArray RESULT =null;
		int dArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclArray dArr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol lCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol rCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclArray(dArr,dArr.getLine(),dArr.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECL_ARRAY ::= 
            {
              NodoDeclArray RESULT =null;
		 RESULT = new NodoDeclArray(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIGN ::= tIgual T_ASIGN 
            {
              NodoAsignacion RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol igual = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tAsignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tAsignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoTipoAsignacion tAsign = (NodoTipoAsignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacion(tAsign,extractLine(igual),extractColumn(igual)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASIGN ::= 
            {
              NodoAsignacion RESULT =null;
		 RESULT = new NodoAsignacion(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // T_ASIGN ::= ASIGN_NORMAL 
            {
              NodoTipoAsignacion RESULT =null;
		int asignNormalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignNormalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAsignacionNormal asignNormal = (NodoAsignacionNormal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipoAsignacion(asignNormal,null,asignNormal.getLine(),asignNormal.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // T_ASIGN ::= ASIGN_ARRAY 
            {
              NodoTipoAsignacion RESULT =null;
		int asignArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asignArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoAsignacionArray asignArray = (NodoAsignacionArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipoAsignacion(null,asignArray,asignArray.getLine(),asignArray.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGN_NORMAL ::= EXPRESION 
            {
              NodoAsignacionNormal RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion expr = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacionNormal(expr, expr.getLine(), expr.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_NORMAL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGN_ARRAY ::= tNew TIPO DIM_ARRAY 
            {
              NodoAsignacionArray RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol n = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimArrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimArrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDimArray dimArray = (NodoDimArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoAsignacionArray(tipo,dimArray,extractLine(n),extractColumn(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_ARRAY",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DIM_ARRAY ::= DIM_ARRAY tLcorchete EXPRESION tRcorchete 
            {
              NodoDimArray RESULT =null;
		int dimArrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dimArrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDimArray dimArr = (NodoDimArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol lCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExpresion expr = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rCorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rCorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol rCor = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDimArray(dimArr,expr,dimArr.getLine(),dimArr.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DIM_ARRAY ::= 
            {
              NodoDimArray RESULT =null;
		 RESULT = new NodoDimArray(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // REAL_ASIGN ::= ID tIgual EXPRESION tPuntocoma 
            {
              NodoRealAsign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol igual = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcomaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcomaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol pcoma = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoRealAsign(id,exp,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REAL_ASIGN",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= tInt 
            {
              NodoTipo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol i = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_int,extractLine(i),extractColumn(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= tChar 
            {
              NodoTipo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol c = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_char,extractLine(c),extractColumn(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= tFloat 
            {
              NodoTipo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol f = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_float,extractLine(f),extractColumn(f)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= tBool 
            {
              NodoTipo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol b = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_bool,extractLine(b),extractColumn(b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= tStr 
            {
              NodoTipo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_str,extractLine(s),extractColumn(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= tVoid 
            {
              NodoTipo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTipo(Tipo.tsb_void,extractLine(v),extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNC ::= tFun TIPO DECL_ARRAY ID tLparen DECL_FUNCP tRparen tLbracket DECL_VARS SENTS RETURN tRbracket 
            {
              NodoFunc RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		ComplexSymbol fun = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int decarrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int decarrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		NodoDeclArray decarr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int decfuncpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int decfuncpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoDeclFuncP decfuncp = (NodoDeclFuncP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int declvarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int declvarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoDeclVars declvars = (NodoDeclVars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoReturn retorno = (NodoReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new NodoFunc(tipo,decarr,id,decfuncp,declvars,sents,retorno,extractLine(fun),extractColumn(fun)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETURN ::= tReturn RETURN_PARAM tPuntocoma 
            {
              NodoReturn RESULT =null;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol retorno = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoReturnParam exp = (NodoReturnParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoReturn(exp,extractLine(retorno),extractColumn(retorno)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RETURN ::= 
            {
              NodoReturn RESULT =null;
		 RESULT= new NodoReturn(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RETURN_PARAM ::= ID 
            {
              NodoReturnParam RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoReturnParam(id,extractLine(id),extractColumn(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_PARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RETURN_PARAM ::= LITERAL 
            {
              NodoReturnParam RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLiteral lit = (NodoLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoReturnParam(lit,extractLine(lit),extractColumn(lit)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_PARAM",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECL_FUNCP ::= DECL_FUNCPARAMS 
            {
              NodoDeclFuncP RESULT =null;
		int funcpaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcparight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParams funcpa = (NodoDeclFuncParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncP(funcpa, funcpa.getLine(),funcpa.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECL_FUNCP ::= 
            {
              NodoDeclFuncP RESULT =null;
		 RESULT= new NodoDeclFuncP(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECL_FUNCPARAMS ::= DECL_FUNCPARAM 
            {
              NodoDeclFuncParams RESULT =null;
		int declparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParam declparam = (NodoDeclFuncParam)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParams(declparam,declparam.getLine(),declparam.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAMS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECL_FUNCPARAMS ::= DECL_FUNCPARAM tComa DECL_FUNCPARAMS 
            {
              NodoDeclFuncParams RESULT =null;
		int declparamleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declparamright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoDeclFuncParam declparam = (NodoDeclFuncParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int declparamsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declparamsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclFuncParams declparams = (NodoDeclFuncParams)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParams(declparam,declparams,declparam.getLine(),declparam.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAMS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECL_FUNCPARAM ::= TIPO ID DECL_ARRAY 
            {
              NodoDeclFuncParam RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declarrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoDeclArray declarr = (NodoDeclArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoDeclFuncParam(tipo,id,declarr,tipo.getLine(),tipo.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAM",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECL_FUNCIONES ::= DECL_FUNCIONES FUNC 
            {
              NodoDeclFunc RESULT =null;
		int declfuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declfuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoDeclFunc declfunc = (NodoDeclFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoFunc func = (NodoFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoDeclFunc(declfunc,func,declfunc.getLine(),declfunc.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECL_FUNCIONES ::= 
            {
              NodoDeclFunc RESULT =null;
		 RESULT = new NodoDeclFunc(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTS ::= SENTS SENT 
            {
              NodoSents RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoSent sent = (NodoSent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSents(sents,sent,sents.getLine(),sents.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTS ::= 
            {
              NodoSents RESULT =null;
		 RESULT= new NodoSents(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT ::= OTRAS_SENTS 
            {
              NodoSent RESULT =null;
		int otrasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int otrasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOtrasSent otras = (NodoOtrasSent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSent(otras,null,otras.getLine(),otras.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT ::= REAL_ASIGN 
            {
              NodoSent RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoRealAsign real = (NodoRealAsign)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoSent(null,real,real.getLine(),real.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OTRAS_SENTS ::= tIf tLparen PARAMETROS tRparen tLbracket SENTS tRbracket ELSE_COND 
            {
              NodoOtrasSent RESULT =null;
		int tifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol tif = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoParametros parametros = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsecondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsecondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElse elsecond = (NodoElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOtrasSent(0,parametros,sents,elsecond,extractLine(tif), extractColumn(tif)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OTRAS_SENTS ::= tWhile tLparen PARAMETROS tRparen tLbracket SENTS tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int twleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int twright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComplexSymbol tw = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoParametros parametros = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(1,parametros,sents,extractLine(tw), extractColumn(tw)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OTRAS_SENTS ::= tFor tLparen ID tPuntocoma EXPRESION tPuntocoma OP_RAPIDOS tRparen tLbracket SENTS tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		ComplexSymbol tf = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int oprapidosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int oprapidosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoOpRapidos oprapidos = (NodoOpRapidos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(2,tid,exp,oprapidos,sents,extractLine(tf), extractColumn(tf)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OTRAS_SENTS ::= tSwitch tLparen ID tRparen tLbracket CASOS tRbracket 
            {
              NodoOtrasSent RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ComplexSymbol ts = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoCase casos = (NodoCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(3,tid,casos,extractLine(ts), extractColumn(ts)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OTRAS_SENTS ::= tPrint tLparen EXPRESION tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol tp = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOtrasSent(4,exp,extractLine(tp), extractColumn(tp),-1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OTRAS_SENTS ::= tPrintln tLparen EXPRESION tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int tplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol tpl = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOtrasSent(5,exp,extractLine(tpl), extractColumn(tpl)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OTRAS_SENTS ::= LLAMADA_FUNC tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int llamFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int llamFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoLlamadaFunc llamFunc = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoOtrasSent(6,llamFunc,llamFunc.getLine(),llamFunc.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OTRAS_SENTS ::= tIn tLparen tRparen tPuntocoma 
            {
              NodoOtrasSent RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol in = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT= new NodoOtrasSent(7,extractLine(in),extractColumn(in)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE_COND ::= tElif tLparen EXPRESION tRparen tLbracket SENTS tRbracket ELSE_COND 
            {
              NodoElse RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ComplexSymbol elif = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elsecondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elsecondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoElse elsecond = (NodoElse)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoElse(exp,sents,elsecond,extractLine(elif),extractColumn(elif)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSE_COND ::= tElse tLbracket SENTS tRbracket 
            {
              NodoElse RESULT =null;
		int telseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int telseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ComplexSymbol telse = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoElse(sents,extractLine(telse),extractColumn(telse)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSE_COND ::= 
            {
              NodoElse RESULT =null;
		 RESULT= new NodoElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASOS ::= CASOS tCase INIT_CASES tDospuntos SENTS tBreak tPuntocoma 
            {
              NodoCase RESULT =null;
		int casosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NodoCase casos = (NodoCase)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int icaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int icaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NodoInitCases icase = (NodoInitCases)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoCase(casos,icase,sents,casos.getLine(), casos.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASOS ::= CASO_DEFAULT 
            {
              NodoCase RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoCaseDefault def = (NodoCaseDefault)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoCase(def,def.getLine(),def.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASOS ::= 
            {
              NodoCase RESULT =null;
		 RESULT= new NodoCase(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASO_DEFAULT ::= tDefault tDospuntos SENTS tBreak tPuntocoma 
            {
              NodoCaseDefault RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ComplexSymbol def = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoSents sents = (NodoSents)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoCaseDefault(sents,extractLine(def),extractColumn(def)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO_DEFAULT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INIT_CASES ::= SIGNO tEntero 
            {
              NodoInitCases RESULT =null;
		int sgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno sg = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.tsb_int,(String)e.getLiteral(), sg, sg.getLine(),sg.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INIT_CASES ::= tLinea 
            {
              NodoInitCases RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal s = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.tsb_str,(String)s.getLiteral(),null,s.getLinea(),s.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INIT_CASES ::= tCaracter 
            {
              NodoInitCases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal c = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoInitCases(Tipo.tsb_char,(String)c.getLiteral(),null,c.getLinea(),c.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_LOG ::= tAnd 
            {
              NodoOpLog RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol and = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.AND, extractLine(and),extractColumn(and)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_LOG ::= tOr 
            {
              NodoOpLog RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol or = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.OR,extractLine(or),extractColumn(or)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_LOG ::= tMayor 
            {
              NodoOpLog RESULT =null;
		int mayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol may = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.MAYOR,extractLine(may),extractColumn(may)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_LOG ::= tMenor 
            {
              NodoOpLog RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol men = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.MENOR, extractLine(men),extractColumn(men)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_LOG ::= tIgualMay 
            {
              NodoOpLog RESULT =null;
		int imayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int imayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol imay = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALMAYOR,extractLine(imay),extractColumn(imay)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_LOG ::= tIgualMenor 
            {
              NodoOpLog RESULT =null;
		int imenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int imenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol imen = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALMENOR,extractLine(imen),extractColumn(imen)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_LOG ::= tIgualIgual 
            {
              NodoOpLog RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol ii = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpLog(TipoLog.IGUALIGUAL,extractLine(ii),extractColumn(ii)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_ARIT ::= tSuma 
            {
              NodoOpArit RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.SUMA, extractLine(s),extractColumn(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_ARIT ::= tResta 
            {
              NodoOpArit RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.RESTA, extractLine(r),extractColumn(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_ARIT ::= tMult 
            {
              NodoOpArit RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int muright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol mu = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.MULT, extractLine(mu),extractColumn(mu)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_ARIT ::= tDiv 
            {
              NodoOpArit RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol d = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.DIV, extractLine(d),extractColumn(d)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_ARIT ::= tMod 
            {
              NodoOpArit RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol m = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpArit(TipoArit.MOD, extractLine(m),extractColumn(m)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_RAPIDOS ::= OP_RAPIDO_S 
            {
              NodoOpRapidos RESULT =null;
		int rapidossumaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rapidossumaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOpRapidosSuma rapidossuma = (NodoOpRapidosSuma)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpRapidos(rapidossuma, rapidossuma.getLine(), rapidossuma.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_RAPIDOS ::= OP_RAPIDO_R 
            {
              NodoOpRapidos RESULT =null;
		int rapidosrestaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rapidosrestaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoOpRapidosResta rapidosresta = (NodoOpRapidosResta)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoOpRapidos(rapidosresta ,rapidosresta.getLine(), rapidosresta.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_RAPIDO_S ::= ID tSuma tSuma 
            {
              NodoOpRapidosSuma RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOpRapidosSuma(tid, tid.getLine(), tid.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_S",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_RAPIDO_R ::= ID tResta tResta 
            {
              NodoOpRapidosResta RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoId tid = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new NodoOpRapidosResta(tid, tid.getLine(), tid.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_R",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TERMINO_1 ::= ID 
            {
              NodoTermino RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(id,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TERMINO_1 ::= SIGNO tEntero 
            {
              NodoTermino RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal entero = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino((int) entero.getLiteral(), s , entero.getLinea(), entero.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TERMINO_1 ::= LLAMADA_FUNC 
            {
              NodoTermino RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(funcCall,funcCall.getLine(),funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TERMINO_1 ::= SIGNO tDecimal 
            {
              NodoTermino RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal decimal = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino((float) decimal.getLiteral() , s , s.getLine(),s.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TERMINO_2 ::= ID 
            {
              NodoTermino RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(id,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TERMINO_2 ::= SIGNO tEntero 
            {
              NodoTermino RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal entero = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino((int) entero.getLiteral(), s, entero.getLinea(), entero.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TERMINO_2 ::= LLAMADA_FUNC 
            {
              NodoTermino RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino(funcCall,funcCall.getLine(),funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TERMINO_2 ::= SIGNO tDecimal 
            {
              NodoTermino RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal decimal = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTermino((float) decimal.getLiteral(), s, s.getLine(),s.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TERMINOLOG_1 ::= ID 
            {
              NodoTerminoLog RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(id,-1,null,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TERMINOLOG_1 ::= tTrue 
            {
              NodoTerminoLog RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal t = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null,1,null,t.getLinea(),t.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TERMINOLOG_1 ::= tFalse 
            {
              NodoTerminoLog RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal f = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null,0,null,f.getLinea(),f.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TERMINOLOG_1 ::= LLAMADA_FUNC 
            {
              NodoTerminoLog RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TERMINOLOG_2 ::= ID 
            {
              NodoTerminoLog RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(id,-1,null,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TERMINOLOG_2 ::= tTrue 
            {
              NodoTerminoLog RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal t = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null,1,null,t.getLinea(),t.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TERMINOLOG_2 ::= tFalse 
            {
              NodoTerminoLog RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal f = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null,0,null,f.getLinea(),f.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TERMINOLOG_2 ::= LLAMADA_FUNC 
            {
              NodoTerminoLog RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoTerminoLog(null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION_ARITM ::= TERMINO_1 OP_ARIT TERMINO_2 
            {
              NodoExpresionArit RESULT =null;
		int term1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoTermino term1 = (NodoTermino)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOpArit oparit = (NodoOpArit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoTermino term2 = (NodoTermino)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoExpresionArit(term1,oparit,term2,term1.getLine(),term2.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITM",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION_LOG ::= TERMINOLOG_1 OP_LOG TERMINOLOG_2 
            {
              NodoExpresionLog RESULT =null;
		int tlog1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tlog1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoTerminoLog tlog1 = (NodoTerminoLog)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoOpLog oplog = (NodoOpLog)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tlog2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tlog2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoTerminoLog tlog2 = (NodoTerminoLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoExpresionLog(tlog1,oplog,tlog2,tlog1.getLine(),tlog1.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= tLparen EXPRESION tRparen 
            {
              NodoExpresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NodoExpresion(e, null, null, null,null, null, -1, null, extractLine(v),extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= tNot EXPRESION 
            {
              NodoExpresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ComplexSymbol v = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, e, null, null,null, null, -1, null, extractLine(v),extractColumn(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPRESION_LOG 
            {
              NodoExpresion RESULT =null;
		int elogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresionLog elog = (NodoExpresionLog)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, elog,null, null, -1, null, elog.getLine(), elog.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPRESION_ARITM 
            {
              NodoExpresion RESULT =null;
		int earitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresionArit earit = (NodoExpresionArit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, earit, null,null, null, -1, null, earit.getLine(), earit.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= ID 
            {
              NodoExpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, null,id, null, -1, null, id.getLine(), id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= LITERAL 
            {
              NodoExpresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLiteral l = (NodoLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, null,null, l, -1, null, l.getLine(), l.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= LLAMADA_FUNC 
            {
              NodoExpresion RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoLlamadaFunc funcCall = (NodoLlamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoExpresion(null, null, null, null,null, null, -1, funcCall, funcCall.getLine(), funcCall.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LITERAL ::= SIGNO tEntero 
            {
              NodoLiteral RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal i = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(s,(String) i.getLiteral(), Tipo.tsb_int, i.getLinea(), i.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LITERAL ::= SIGNO tDecimal 
            {
              NodoLiteral RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoSigno s = (NodoSigno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal d = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(s,(String) d.getLiteral(), Tipo.tsb_float, d.getLinea(),d.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LITERAL ::= tCaracter 
            {
              NodoLiteral RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal c = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,(String) c.getLiteral(),Tipo.tsb_char,c.getLinea(),c.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LITERAL ::= tLinea 
            {
              NodoLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,(String) l.getLiteral(),Tipo.tsb_str,l.getLinea(),l.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LITERAL ::= tTrue 
            {
              NodoLiteral RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal t = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,"-1",Tipo.tsb_bool,t.getLinea(),t.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LITERAL ::= tFalse 
            {
              NodoLiteral RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal f = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoLiteral(null,"0",Tipo.tsb_bool,f.getLinea(),f.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LLAMADA_FUNC ::= ID tLparen PARAMETROS tRparen 
            {
              NodoLlamadaFunc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NodoId id = (NodoId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NodoParametros param = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new NodoLlamadaFunc(id,param,id.getLine(),id.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNC",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PARAMETROS ::= PARAM_SIMPLE 
            {
              NodoParametros RESULT =null;
		int simpleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simpleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoParamSimple simple = (NodoParamSimple)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParametros(simple,simple.getLine(),simple.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PARAMETROS ::= PARAM_COMPUESTO 
            {
              NodoParametros RESULT =null;
		int compuestoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int compuestoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoParamCompuesto compuesto = (NodoParamCompuesto)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParametros(compuesto, compuesto.getLine(),compuesto.getColumn());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PARAM_SIMPLE ::= EXPRESION 
            {
              NodoParamSimple RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParamSimple(exp,exp.getLine(),exp.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_SIMPLE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PARAM_COMPUESTO ::= PARAMETROS tComa EXPRESION 
            {
              NodoParamCompuesto RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NodoParametros param = (NodoParametros)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new NodoParamCompuesto(param,exp,param.getLine(),param.getColumn()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_COMPUESTO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ID ::= tId 
            {
              NodoId RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal valor = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoId((String)valor.getLiteral(), valor.getLinea(),valor.getColumna()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SIGNO ::= tSuma 
            {
              NodoSigno RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol s = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoSigno(1, extractLine(s),extractColumn(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SIGNO ::= tResta 
            {
              NodoSigno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ComplexSymbol r = (ComplexSymbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NodoSigno(-1, extractLine(r),extractColumn(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SIGNO ::= 
            {
              NodoSigno RESULT =null;
		 RESULT = new NodoSigno(1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIGNO",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
