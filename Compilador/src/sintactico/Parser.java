
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\005\000\002\003" +
    "\007\000\002\004\004\000\002\004\002\000\002\005\007" +
    "\000\002\006\005\000\002\006\002\000\002\007\004\000" +
    "\002\007\002\000\002\010\003\000\002\010\003\000\002" +
    "\011\003\000\002\012\005\000\002\013\006\000\002\013" +
    "\002\000\002\014\006\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\016\000\002\052\005\000\002" +
    "\052\002\000\002\047\003\000\002\047\002\000\002\050" +
    "\003\000\002\050\005\000\002\051\005\000\002\017\004" +
    "\000\002\017\002\000\002\020\004\000\002\020\002\000" +
    "\002\021\003\000\002\021\003\000\002\022\012\000\002" +
    "\022\011\000\002\022\015\000\002\022\011\000\002\022" +
    "\007\000\002\022\007\000\002\022\004\000\002\046\012" +
    "\000\002\046\006\000\002\046\002\000\002\023\011\000" +
    "\002\023\003\000\002\023\002\000\002\024\007\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\003\000\002\030" +
    "\003\000\002\031\005\000\002\032\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\037\005\000" +
    "\002\040\005\000\002\041\005\000\002\041\004\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\006\000\002\043\003\000\002\043\003\000\002" +
    "\044\003\000\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\020\005\ufffd\042\011\043\005\044\007\045" +
    "\006\051\010\074\013\001\002\000\004\002\305\001\002" +
    "\000\010\057\ufff0\066\ufff0\070\ufff0\001\002\000\010\057" +
    "\uffec\066\uffec\070\uffec\001\002\000\010\057\uffed\066\uffed" +
    "\070\uffed\001\002\000\010\057\uffef\066\uffef\070\uffef\001" +
    "\002\000\010\057\uffee\066\uffee\070\uffee\001\002\000\004" +
    "\057\266\001\002\000\010\057\uffeb\066\uffeb\070\uffeb\001" +
    "\002\000\042\004\ufffd\005\ufffd\033\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\042\011\043\005\044\007\045\006\051\010\055" +
    "\ufffd\056\ufffd\057\ufffd\063\ufffd\074\013\001\002\000\004" +
    "\005\016\001\002\000\004\064\261\001\002\000\006\002" +
    "\uffe1\006\uffe1\001\002\000\006\002\000\006\022\001\002" +
    "\000\006\002\uffe2\006\uffe2\001\002\000\016\042\011\043" +
    "\005\044\007\045\006\051\010\074\013\001\002\000\006" +
    "\057\ufffa\066\ufffa\001\002\000\006\057\026\066\025\001" +
    "\002\000\004\065\260\001\002\000\004\062\027\001\002" +
    "\000\020\042\011\043\005\044\007\045\006\051\010\061" +
    "\uffe6\074\013\001\002\000\004\061\uffe7\001\002\000\004" +
    "\057\256\001\002\000\006\061\uffe5\067\254\001\002\000" +
    "\004\061\034\001\002\000\004\064\035\001\002\000\040" +
    "\004\ufffd\033\ufffd\036\ufffd\037\ufffd\040\ufffd\042\011\043" +
    "\005\044\007\045\006\051\010\055\ufffd\056\ufffd\057\ufffd" +
    "\063\ufffd\074\013\001\002\000\024\004\uffdf\033\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\055\uffdf\056\uffdf\057\uffdf\063\uffdf" +
    "\001\002\000\024\004\040\033\043\036\052\037\044\040" +
    "\054\055\042\056\046\057\045\063\uffe8\001\002\000\024" +
    "\013\116\041\115\050\125\052\114\053\120\054\113\057" +
    "\121\060\117\062\110\001\002\000\004\070\251\001\002" +
    "\000\004\062\245\001\002\000\004\062\222\001\002\000" +
    "\004\062\201\001\002\000\006\014\176\062\143\001\002" +
    "\000\004\062\172\001\002\000\026\004\uffe0\031\uffe0\033" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\055\uffe0\056\uffe0\057\uffe0" +
    "\063\uffe0\001\002\000\026\004\uffdd\031\uffdd\033\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\055\uffdd\056\uffdd\057\uffdd\063\uffdd" +
    "\001\002\000\026\004\uffde\031\uffde\033\uffde\036\uffde\037" +
    "\uffde\040\uffde\055\uffde\056\uffde\057\uffde\063\uffde\001\002" +
    "\000\004\062\103\001\002\000\004\063\102\001\002\000" +
    "\004\062\055\001\002\000\004\057\056\001\002\000\004" +
    "\061\057\001\002\000\004\064\060\001\002\000\010\030" +
    "\uffd0\032\061\063\uffd0\001\002\000\004\072\076\001\002" +
    "\000\006\030\064\063\065\001\002\000\006\030\uffd1\063" +
    "\uffd1\001\002\000\010\050\071\051\070\060\067\001\002" +
    "\000\026\004\uffd9\031\uffd9\033\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\063\uffd9\001\002\000\004" +
    "\072\072\001\002\000\004\072\uffce\001\002\000\004\072" +
    "\uffcc\001\002\000\004\072\uffcd\001\002\000\022\031\uffdf" +
    "\033\uffdf\036\uffdf\037\uffdf\040\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\001\002\000\022\031\074\033\043\036\052\037\044" +
    "\040\054\055\042\056\046\057\045\001\002\000\004\070" +
    "\075\001\002\000\006\030\uffd2\063\uffd2\001\002\000\022" +
    "\031\uffdf\033\uffdf\036\uffdf\037\uffdf\040\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\001\002\000\022\031\100\033\043\036\052" +
    "\037\044\040\054\055\042\056\046\057\045\001\002\000" +
    "\004\070\101\001\002\000\006\030\uffcf\063\uffcf\001\002" +
    "\000\006\002\uffea\006\uffea\001\002\000\024\013\116\041" +
    "\115\050\125\052\114\053\120\054\113\057\121\060\117" +
    "\062\110\001\002\000\006\061\uff9b\067\uff9b\001\002\000" +
    "\006\061\uff9c\067\uff9c\001\002\000\042\011\uffb0\012\uffb0" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\061\uff9e\065\uff9e\067\uff9e" +
    "\070\uff9e\001\002\000\012\061\uffa7\065\uffa7\067\uffa7\070" +
    "\uffa7\001\002\000\024\013\116\041\115\050\125\052\114" +
    "\053\120\054\113\057\121\060\117\062\110\001\002\000" +
    "\014\015\155\016\156\017\160\020\161\021\157\001\002" +
    "\000\006\061\151\067\146\001\002\000\030\011\uffb1\012" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\061\uff9f" +
    "\065\uff9f\067\uff9f\070\uff9f\001\002\000\024\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\061\uffa3\065\uffa3\067\uffa3" +
    "\070\uffa3\001\002\000\012\061\uffa2\065\uffa2\067\uffa2\070" +
    "\uffa2\001\002\000\024\013\116\041\115\050\125\052\114" +
    "\053\120\054\113\057\121\060\117\062\110\001\002\000" +
    "\024\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\061\uffa4" +
    "\065\uffa4\067\uffa4\070\uffa4\001\002\000\030\011\uffb2\012" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\061\uffa0" +
    "\065\uffa0\067\uffa0\070\uffa0\001\002\000\044\011\uffb3\012" +
    "\uffb3\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\061\uffa5\062\143\065" +
    "\uffa5\067\uffa5\070\uffa5\001\002\000\020\011\130\012\132" +
    "\022\134\023\133\024\126\025\131\026\127\001\002\000" +
    "\012\061\uffa6\065\uffa6\067\uffa6\070\uffa6\001\002\000\006" +
    "\061\uff9a\067\uff9a\001\002\000\012\061\uffa1\065\uffa1\067" +
    "\uffa1\070\uffa1\001\002\000\010\053\uffc7\054\uffc7\057\uffc7" +
    "\001\002\000\010\053\uffc5\054\uffc5\057\uffc5\001\002\000" +
    "\010\053\uffcb\054\uffcb\057\uffcb\001\002\000\010\053\uffc6" +
    "\054\uffc6\057\uffc6\001\002\000\010\053\uffca\054\uffca\057" +
    "\uffca\001\002\000\010\053\uffc8\054\uffc8\057\uffc8\001\002" +
    "\000\010\053\uffc9\054\uffc9\057\uffc9\001\002\000\010\053" +
    "\141\054\137\057\142\001\002\000\012\061\uffac\065\uffac" +
    "\067\uffac\070\uffac\001\002\000\012\061\uffad\065\uffad\067" +
    "\uffad\070\uffad\001\002\000\012\061\uffaa\065\uffaa\067\uffaa" +
    "\070\uffaa\001\002\000\012\061\uffae\065\uffae\067\uffae\070" +
    "\uffae\001\002\000\014\061\uffaf\062\143\065\uffaf\067\uffaf" +
    "\070\uffaf\001\002\000\024\013\116\041\115\050\125\052" +
    "\114\053\120\054\113\057\121\060\117\062\110\001\002" +
    "\000\006\061\145\067\146\001\002\000\042\011\uff9d\012" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\061\uff9d\065\uff9d\067" +
    "\uff9d\070\uff9d\001\002\000\024\013\116\041\115\050\125" +
    "\052\114\053\120\054\113\057\121\060\117\062\110\001" +
    "\002\000\006\061\uff99\067\uff99\001\002\000\012\061\uffa8" +
    "\065\uffa8\067\uffa8\070\uffa8\001\002\000\004\064\152\001" +
    "\002\000\022\033\uffdf\036\uffdf\037\uffdf\040\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\063\uffdf\001\002\000\022\033\043\036" +
    "\052\037\044\040\054\055\042\056\046\057\045\063\154" +
    "\001\002\000\026\004\uffdb\031\uffdb\033\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\055\uffdb\056\uffdb\057\uffdb\063\uffdb\001\002" +
    "\000\010\052\uffc4\057\uffc4\060\uffc4\001\002\000\010\052" +
    "\uffc3\057\uffc3\060\uffc3\001\002\000\010\052\uffc0\057\uffc0" +
    "\060\uffc0\001\002\000\010\052\uffc2\057\uffc2\060\uffc2\001" +
    "\002\000\010\052\uffc1\057\uffc1\060\uffc1\001\002\000\010" +
    "\052\166\057\167\060\165\001\002\000\012\061\uffab\065" +
    "\uffab\067\uffab\070\uffab\001\002\000\012\061\uffb5\065\uffb5" +
    "\067\uffb5\070\uffb5\001\002\000\012\061\uffb6\065\uffb6\067" +
    "\uffb6\070\uffb6\001\002\000\012\061\uffb4\065\uffb4\067\uffb4" +
    "\070\uffb4\001\002\000\014\061\uffb7\062\143\065\uffb7\067" +
    "\uffb7\070\uffb7\001\002\000\004\061\171\001\002\000\012" +
    "\061\uffa9\065\uffa9\067\uffa9\070\uffa9\001\002\000\024\013" +
    "\116\041\115\050\125\052\114\053\120\054\113\057\121" +
    "\060\117\062\110\001\002\000\004\061\174\001\002\000" +
    "\004\070\175\001\002\000\026\004\uffd7\031\uffd7\033\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\055\uffd7\056\uffd7\057\uffd7\063" +
    "\uffd7\001\002\000\024\013\116\041\115\050\125\052\114" +
    "\053\120\054\113\057\121\060\117\062\110\001\002\000" +
    "\004\070\200\001\002\000\026\004\ufff1\031\ufff1\033\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\055\ufff1\056\ufff1\057\ufff1\063" +
    "\ufff1\001\002\000\004\057\202\001\002\000\004\070\203" +
    "\001\002\000\024\013\116\041\115\050\125\052\114\053" +
    "\120\054\113\057\121\060\117\062\110\001\002\000\004" +
    "\070\205\001\002\000\004\057\211\001\002\000\004\061" +
    "\uffbe\001\002\000\004\061\216\001\002\000\004\061\uffbf" +
    "\001\002\000\006\015\212\016\213\001\002\000\004\015" +
    "\215\001\002\000\004\016\214\001\002\000\004\061\uffbc" +
    "\001\002\000\004\061\uffbd\001\002\000\004\064\217\001" +
    "\002\000\022\033\uffdf\036\uffdf\037\uffdf\040\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\063\uffdf\001\002\000\022\033\043\036" +
    "\052\037\044\040\054\055\042\056\046\057\045\063\221" +
    "\001\002\000\026\004\uffda\031\uffda\033\uffda\036\uffda\037" +
    "\uffda\040\uffda\055\uffda\056\uffda\057\uffda\063\uffda\001\002" +
    "\000\024\013\116\041\115\050\125\052\114\053\120\054" +
    "\113\057\121\060\117\062\110\001\002\000\006\061\224" +
    "\067\146\001\002\000\004\064\225\001\002\000\022\033" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\063\uffdf\001\002\000\022\033\043\036\052\037\044\040" +
    "\054\055\042\056\046\057\045\063\227\001\002\000\032" +
    "\004\uffd3\031\uffd3\033\uffd3\034\230\035\231\036\uffd3\037" +
    "\uffd3\040\uffd3\055\uffd3\056\uffd3\057\uffd3\063\uffd3\001\002" +
    "\000\004\064\242\001\002\000\004\062\233\001\002\000" +
    "\026\004\uffdc\031\uffdc\033\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\055\uffdc\056\uffdc\057\uffdc\063\uffdc\001\002\000\024\013" +
    "\116\041\115\050\125\052\114\053\120\054\113\057\121" +
    "\060\117\062\110\001\002\000\004\061\235\001\002\000" +
    "\004\064\236\001\002\000\022\033\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\055\uffdf\056\uffdf\057\uffdf\063\uffdf\001\002\000" +
    "\022\033\043\036\052\037\044\040\054\055\042\056\046" +
    "\057\045\063\240\001\002\000\032\004\uffd3\031\uffd3\033" +
    "\uffd3\034\230\035\231\036\uffd3\037\uffd3\040\uffd3\055\uffd3" +
    "\056\uffd3\057\uffd3\063\uffd3\001\002\000\026\004\uffd5\031" +
    "\uffd5\033\uffd5\036\uffd5\037\uffd5\040\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\063\uffd5\001\002\000\022\033\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\055\uffdf\056\uffdf\057\uffdf\063\uffdf\001\002" +
    "\000\022\033\043\036\052\037\044\040\054\055\042\056" +
    "\046\057\045\063\244\001\002\000\026\004\uffd4\031\uffd4" +
    "\033\uffd4\036\uffd4\037\uffd4\040\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\063\uffd4\001\002\000\024\013\116\041\115\050\125" +
    "\052\114\053\120\054\113\057\121\060\117\062\110\001" +
    "\002\000\004\061\247\001\002\000\004\070\250\001\002" +
    "\000\026\004\uffd8\031\uffd8\033\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\063\uffd8\001\002\000\026" +
    "\004\uffd6\031\uffd6\033\uffd6\036\uffd6\037\uffd6\040\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\063\uffd6\001\002\000\004\070\253" +
    "\001\002\000\004\063\uffe9\001\002\000\016\042\011\043" +
    "\005\044\007\045\006\051\010\074\013\001\002\000\004" +
    "\061\uffe4\001\002\000\010\061\ufffa\066\ufffa\067\ufffa\001" +
    "\002\000\010\061\uffe3\066\025\067\uffe3\001\002\000\016" +
    "\014\ufffb\057\ufffb\061\ufffb\066\ufffb\067\ufffb\070\ufffb\001" +
    "\002\000\036\033\ufffd\036\ufffd\037\ufffd\040\ufffd\042\011" +
    "\043\005\044\007\045\006\051\010\055\ufffd\056\ufffd\057" +
    "\ufffd\063\ufffd\074\013\001\002\000\022\033\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\055\uffdf\056\uffdf\057\uffdf\063\uffdf\001" +
    "\002\000\022\033\043\036\052\037\044\040\054\055\042" +
    "\056\046\057\045\063\264\001\002\000\006\002\uffff\006" +
    "\uffff\001\002\000\026\004\ufffe\005\ufffe\033\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\055\ufffe\056\ufffe\057\ufffe\063\ufffe\001" +
    "\002\000\010\014\ufffa\066\ufffa\070\ufffa\001\002\000\010" +
    "\014\271\066\025\070\ufff8\001\002\000\004\070\304\001" +
    "\002\000\026\013\116\027\272\041\115\050\125\052\114" +
    "\053\120\054\113\057\121\060\117\062\110\001\002\000" +
    "\016\042\011\043\005\044\007\045\006\051\010\074\013" +
    "\001\002\000\004\070\ufff7\001\002\000\004\070\ufff6\001" +
    "\002\000\004\070\ufff5\001\002\000\004\070\ufff9\001\002" +
    "\000\006\066\ufff2\070\ufff2\001\002\000\006\066\301\070" +
    "\ufff4\001\002\000\024\013\116\041\115\050\125\052\114" +
    "\053\120\054\113\057\121\060\117\062\110\001\002\000" +
    "\004\065\303\001\002\000\006\066\ufff3\070\ufff3\001\002" +
    "\000\042\004\ufffc\005\ufffc\033\ufffc\036\ufffc\037\ufffc\040" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\051\ufffc\055\ufffc" +
    "\056\ufffc\057\ufffc\063\ufffc\074\ufffc\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\012\002\003\004\014\005\013\015\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\264\005\013" +
    "\015\011\001\001\000\004\003\016\001\001\000\002\001" +
    "\001\000\004\017\017\001\001\000\004\016\020\001\001" +
    "\000\002\001\001\000\004\015\022\001\001\000\004\006" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\030\047\032\050\027\051\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\035\005" +
    "\013\015\011\001\001\000\004\020\036\001\001\000\014" +
    "\014\047\021\046\022\050\042\040\052\052\001\001\000" +
    "\016\033\110\035\121\037\122\040\106\041\251\042\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\061\024\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\072\001\001\000\012\014" +
    "\047\021\046\022\050\042\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\076\001\001\000\012\014" +
    "\047\021\046\022\050\042\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\033\110\035" +
    "\121\037\122\040\106\041\123\042\105\043\111\044\104" +
    "\045\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\033\110\035\121" +
    "\037\122\040\106\041\167\042\105\001\001\000\004\027" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\033\110\035\121\037" +
    "\122\040\106\041\147\042\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\137\042\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\033\110\035\121\037\122\040" +
    "\106\041\123\042\105\043\143\044\104\045\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\033\110\035" +
    "\121\037\122\040\106\041\146\042\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\152\001\001\000\012\014\047\021\046\022\050\042\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\162\042\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\033" +
    "\110\035\121\037\122\040\106\041\172\042\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\033\110\035\121\037\122\040\106\041\176\042\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\033\110\035\121\037\122" +
    "\040\106\041\203\042\105\001\001\000\002\001\001\000" +
    "\010\030\206\031\207\032\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\217\001\001\000" +
    "\012\014\047\021\046\022\050\042\040\001\001\000\002" +
    "\001\001\000\024\033\110\035\121\037\122\040\106\041" +
    "\123\042\105\043\222\044\104\045\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\225\001\001\000" +
    "\012\014\047\021\046\022\050\042\040\001\001\000\004" +
    "\046\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\033\110\035\121\037\122\040\106" +
    "\041\233\042\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\236\001\001\000\012\014\047\021\046" +
    "\022\050\042\040\001\001\000\004\046\240\001\001\000" +
    "\002\001\001\000\004\020\242\001\001\000\012\014\047" +
    "\021\046\022\050\042\040\001\001\000\002\001\001\000" +
    "\016\033\110\035\121\037\122\040\106\041\245\042\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\030\050\254\051\031\001\001\000\002\001" +
    "\001\000\004\006\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\261\005\013\015\011\001\001\000" +
    "\004\020\262\001\001\000\012\014\047\021\046\022\050" +
    "\042\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\266\001\001\000\004\007\267\001\001\000\002" +
    "\001\001\000\024\010\275\011\272\012\273\033\110\035" +
    "\121\037\122\040\106\041\274\042\105\001\001\000\004" +
    "\015\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\277\001\001" +
    "\000\002\001\001\000\016\033\110\035\121\037\122\040" +
    "\106\041\301\042\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/*
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DECL_VARS MAIN DECL_FUNCIONES 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= tMain tLbracket DECL_VARS SENTS tRbracket 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECL_VARS ::= DECL_VAR DECL_VARS 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL_VARS ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VARS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL_VAR ::= TIPO tId DECL_ARRAY ASIGN tPuntocoma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL_ARRAY ::= DECL_ARRAY tLcorchete tRcorchete 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL_ARRAY ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ARRAY",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGN ::= tIgual T_ASIGN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGN ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // T_ASIGN ::= ASIGN_NORMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // T_ASIGN ::= ASIGN_ARRAY 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_ASIGN",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASIGN_NORMAL ::= EXPRESION 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_NORMAL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASIGN_ARRAY ::= tNew TIPO DIM_ARRAY 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGN_ARRAY",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DIM_ARRAY ::= DIM_ARRAY tLcorchete EXPRESION tRcorchete 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DIM_ARRAY ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIM_ARRAY",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // REAL_ASIGN ::= tId tIgual EXPRESION tPuntocoma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REAL_ASIGN",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= tInt 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= tCaracter 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= tFloat 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= tBool 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= tStr 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= tVoid 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= tFun TIPO DECL_ARRAY tId tLparen DECL_FUNCP tRparen tLbracket DECL_VARS SENTS RETURN tRbracket 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RETURN ::= tReturn EXPRESION tPuntocoma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RETURN ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECL_FUNCP ::= DECL_FUNCPARAMS 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECL_FUNCP ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECL_FUNCPARAMS ::= DECL_FUNCPARAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAMS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECL_FUNCPARAMS ::= DECL_FUNCPARAM tComa DECL_FUNCPARAMS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAMS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECL_FUNCPARAM ::= TIPO tId DECL_ARRAY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCPARAM",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECL_FUNCIONES ::= DECL_FUNCIONES FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECL_FUNCIONES ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_FUNCIONES",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTS ::= SENTS SENT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTS ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT ::= OTRAS_SENTS 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= REAL_ASIGN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OTRAS_SENTS ::= tIf tLparen PARAMETROS tRparen tLbracket SENTS tRbracket ELSE_COND 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OTRAS_SENTS ::= tWhile tLparen PARAMETROS tRparen tLbracket SENTS tRbracket 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OTRAS_SENTS ::= tFor tLparen tId tPuntocoma EXPRESION tPuntocoma OP_RAPIDOS tRparen tLbracket SENTS tRbracket 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OTRAS_SENTS ::= tSwitch tLparen tId tRparen tLbracket CASOS tRbracket 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OTRAS_SENTS ::= tPrint tLparen EXPRESION tRparen tPuntocoma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OTRAS_SENTS ::= tPrintln tLparen EXPRESION tRparen tPuntocoma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OTRAS_SENTS ::= LLAMADA_FUNC tPuntocoma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTRAS_SENTS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSE_COND ::= tElif tLparen EXPRESION tRparen tLbracket SENTS tRbracket ELSE_COND 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSE_COND ::= tElse tLbracket SENTS tRbracket 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE_COND ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_COND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASOS ::= CASOS tCase INIT_CASES tDospuntos SENTS tBreak tPuntocoma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CASOS ::= CASO_DEFAULT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASOS ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASO_DEFAULT ::= tDefault tDospuntos SENTS tBreak tPuntocoma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO_DEFAULT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INIT_CASES ::= tEntero 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INIT_CASES ::= tLinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INIT_CASES ::= tCaracter 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT_CASES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP_LOG ::= tAnd 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP_LOG ::= tOr 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP_LOG ::= tMayor 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP_LOG ::= tMenor 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_LOG ::= tIgualMay 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_LOG ::= tIgualMenor 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_LOG ::= tIgualIgual 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_LOG",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_ARIT ::= tSuma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_ARIT ::= tResta 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_ARIT ::= tMult 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_ARIT ::= tDiv 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_ARIT ::= tMod 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_RAPIDOS ::= OP_RAPIDO_S 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_RAPIDOS ::= OP_RAPIDO_R 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDOS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_RAPIDO_S ::= tId tSuma tSuma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_S",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_RAPIDO_R ::= tId tResta tResta 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_RAPIDO_R",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TERMINO_1 ::= tId 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TERMINO_1 ::= tEntero 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TERMINO_1 ::= LLAMADA_FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TERMINO_1 ::= tDecimal 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TERMINO_2 ::= tId 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TERMINO_2 ::= tEntero 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TERMINO_2 ::= LLAMADA_FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TERMINO_2 ::= tDecimal 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINO_2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TERMINOLOG_1 ::= tId 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TERMINOLOG_1 ::= tTrue 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TERMINOLOG_1 ::= tFalse 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TERMINOLOG_1 ::= LLAMADA_FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TERMINOLOG_2 ::= tId 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TERMINOLOG_2 ::= tTrue 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TERMINOLOG_2 ::= tFalse 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TERMINOLOG_2 ::= LLAMADA_FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMINOLOG_2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION_ARITM ::= TERMINO_1 OP_ARIT TERMINO_2 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITM",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION_LOG ::= TERMINOLOG_1 OP_LOG TERMINOLOG_2 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOG",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= tLparen EXPRESION tRparen 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= tNot EXPRESION 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION_LOG 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION_ARITM 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= tId 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= tEntero 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= tDecimal 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= tChar 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= tLinea 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= tTrue 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= tFalse 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= LLAMADA_FUNC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LLAMADA_FUNC ::= tId tLparen PARAMETROS tRparen 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNC",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMETROS ::= PARAM_SIMPLE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMETROS ::= PARAM_COMPUESTO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAM_SIMPLE ::= EXPRESION 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_SIMPLE",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAM_COMPUESTO ::= PARAMETROS tComa EXPRESION 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM_COMPUESTO",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
