000206E2 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 05/02/2024 10:48:52

00000000                             1      INCLUDE library/MACRO.X68
00000000                             2              OPT     $1000
00000000                             3              OPT     MEX
00000000                             4    
00000000                             5  ;A AND B, VALUE IN D1
00000000                             6  CLRH:       MACRO
00000000                             7              SWAP    \1
00000000                             8              CLR.W   \1
00000000                             9              SWAP    \1
00000000                            10              ENDM
00000000                            11  
00000000                            12  ANDM:       MACRO
00000000                            13              MOVE.L  D0, -(A7)
00000000                            14              MOVE.L  \1, D0
00000000                            15              MOVE.L  \2, D1
00000000                            16              AND.L   D0, D1
00000000                            17              MOVE.L  (A7)+, D0
00000000                            18              ENDM
00000000                            19  
00000000                            20  ;A OR B, VALUE IN D1
00000000                            21  
00000000                            22  ORM:        MACRO
00000000                            23              MOVE.L  D0, -(A7)
00000000                            24              MOVE.L  \1, D0
00000000                            25              MOVE.L  \2, D1
00000000                            26              OR.L    D0, D1
00000000                            27              MOVE.L  (A7)+, D0
00000000                            28              ENDM
00000000                            29              
00000000                            30  ;NOT A, VALUE IN D1
00000000                            31  
00000000                            32  NOTM:       MACRO
00000000                            33              MOVE.L  \1, D1
00000000                            34              NOT.L   D1
00000000                            35              ENDM
00000000                            36              
00000000                            37  ;A + B, VALUE IN D1
00000000                            38  
00000000                            39  ADDM:       MACRO
00000000                            40              MOVE.L  D0, -(A7)
00000000                            41              MOVE.L  \1, D0
00000000                            42              MOVE.L  \2, D1
00000000                            43              ADD.L   D0, D1
00000000                            44              MOVE.L  (A7)+, D0
00000000                            45              ENDM
00000000                            46              
00000000                            47  ;A - B, VALUE IN D1
00000000                            48  
00000000                            49  SUBM:       MACRO
00000000                            50              MOVE.L  D0, -(A7)
00000000                            51              MOVE.L  \1, D0
00000000                            52              MOVE.L  \2, D1
00000000                            53              SUB.L   D1, D0
00000000                            54              MOVE.L  D0, D1
00000000                            55              ENDM
00000000                            56              
00000000                            57  ;A / B, VALUE IN D1
00000000                            58  
00000000                            59  DIVM:       MACRO
00000000                            60              MOVE.L  D0, -(A7)
00000000                            61              MOVE.L  \1, D1
00000000                            62              MOVE.L  \2, D0
00000000                            63              DIVS    D1, D0                  ; 68K ONLY SUPPORTS WORD DIVISION
00000000                            64              MOVE.L  D0, D1
00000000                            65              MOVE.L  (A7)+, D0
00000000                            66              ENDM
00000000                            67              
00000000                            68  ;A MOD B, VALUE IN D1
00000000                            69  
00000000                            70  MODM:       MACRO
00000000                            71              MOVE.L  D0, -(A7)
00000000                            72              MOVE.L  \1, D1
00000000                            73              MOVE.L  \2, D0
00000000                            74              DIVU    D1, D0
00000000                            75              CLR.W   D0                      ; CLEAR LOWER PART
00000000                            76              SWAP    D0                      ; MODULUS TO LOWER (UPPER IS CLEAR)
00000000                            77              MOVE.L  D0, D1
00000000                            78              MOVE.L  (A7)+, D0
00000000                            79              ENDM
00000000                            80              
00000000                            81  ;A * B, VALUE IN D1
00000000                            82  
00000000                            83  MULTM:      MACRO
00000000                            84              MOVE.L  D0, -(A7)
00000000                            85              MOVE.L  \1, D0
00000000                            86              MOVE.L  \2, D1
00000000                            87              MULU    D0, D1
00000000                            88              MOVE.L  (A7)+, D0
00000000                            89              ENDM
00000000                            90              
00000000                            91  ;-A, VALUE IN D1
00000000                            92  
00000000                            93  NEGM:       MACRO
00000000                            94              MOVE.L  \1, D1
00000000                            95              NEG.L   D1
00000000                            96              ENDM
00000000                            97              
00000000                            98  
00000000                            99  
00000000                           100  
00000000                           101  
00000000                           102  
00000000                           103  
00000000                           104  
00000000                           105  
00000000                           106  
00000000                           107  
00000000                           108  
00000000                           109  -------------------- end include --------------------
00000000                           110      INCLUDE library/CONST.X68
00000000                           111  
00000000  =00001000                112  MINIT   EQU $1000
00000000                           113  
00000000                           114  ;INSTRUCTION TYPE CONSTANTS (AS ENUMERATED IN THEIR ENUM)
00000000                           115  ;-----------------------------------------------------------
00000000  =00000000                116  CLONE   EQU 0
00000000  =00000001                117  ADD     EQU 1
00000000  =00000002                118  SUB     EQU 2
00000000  =00000003                119  MUL     EQU 3
00000000  =00000004                120  DIV     EQU 4
00000000  =00000005                121  MOD     EQU 5
00000000  =00000006                122  NEG     EQU 6
00000000  =00000007                123  INCR    EQU 7
00000000  =00000008                124  DECR    EQU 8
00000000  =00000009                125  AND     EQU 9
00000000  =0000000A                126  OR      EQU 10
00000000  =0000000B                127  NOT     EQU 11
00000000  =0000000C                128  EXP     EQU 12
00000000  =0000000D                129  ASSIG   EQU 13
00000000  =0000000E                130  SKIP    EQU 14
00000000  =0000000F                131  GOTO    EQU 15
00000000  =00000010                132  LT      EQU 16
00000000  =00000011                133  LE      EQU 17
00000000  =00000012                134  GT      EQU 18
00000000  =00000013                135  GE      EQU 19
00000000  =00000014                136  EQ      EQU 20
00000000  =00000015                137  NEQ     EQU 21
00000000  =00000016                138  INIT    EQU 22
00000000  =00000017                139  CALL    EQU 23
00000000  =00000018                140  RETURN  EQU 24
00000000  =00000019                141  SIMPLE  EQU 25
00000000  =0000001A                142  COMPLEX EQU 26
00000000  =0000001B                143  READ    EQU 27
00000000  =0000001C                144  PRINT   EQU 28
00000000  =0000001D                145  PRINTLN EQU 29
00000000                           146  ;------------------------------------------------------------------------------
00000000                           147  
00000000                           148  
00000000                           149  ; --- DYNAMIC MEMORY CONSTANTS ------------------------------------------------
00000000                           150  
00000000  =00000400                151  DMMBSIZE    EQU     1024                    ; BLOCK SIZE (BYTES). POWER OF TWO
00000000  =00000080                152  DMMBNUM     EQU     128                     ; NUMBER OF BLOCKS
00000000  =00000000                153  DMMSYSID    EQU     0                       ; SYSTEM OWNER ID (MUST BE 0)
00000000  =FFFFFFFF                154  DMMPRCID    EQU     -1                      ; -1 SO WE CAN USE 0
00000000  =000001F6                155  PARSPACE    EQU     DMMBSIZE/2-10           ; TEMPORARELY HALF PARAMETERS
00000000  =0000020A                156  VARSPACE    EQU     DMMBSIZE-PARSPACE       ; WE SUBSTRACT PARAMETER SPACE AND
00000000                           157                                              ; OTHER VALUES (RETURN, BP, DISP)
00000000                           158  
00000000                           159  
00000000                           160  ; --- TP CONSTANTS ------------------------------------------------------------
00000000                           161  
00000000  =00000028                162  VARSIZE     EQU     10*4
00000000                           163  
00000000                           164  ; USED FOR OFFSET PURPOUSES, AS GETTING THE CORRECT VALUE WHEN CHECKING THE TP 
00000000                           165  
00000000                           166  DISP        DS.L    10                      ; DISP allows 10 as max profundity ([0-9])
00000028                           167  
00000028                           168  
00000028                           169  
00000028                           170  
00000028                           171  
00000028                           172  
00000028                           173  
00000028                           174  
00000028                           175  -------------------- end include --------------------
00000028                           176      INCLUDE library/VAR.X68
00000028                           177  ; --- DYNAMIC MEMORY VARIABLES ------------------------------------------------
00000028                           178  
00000400                           179              ORG     (*+DMMBSIZE-1)&-DMMBSIZE    ; ALIGN TO DMMBSIZE
00000400                           180  DMMDATA     DS.B    DMMBSIZE*DMMBNUM            ; DYNAMIC MEMORY ALLOCATION SPACE
00020400                           181              DS.W    0                           ; JUST IN CASE (SIZE IS POW OF TWO)
00020400                           182  
00020400                           183  
00020400                           184  
00020400                           185  
00020400                           186  
00020400                           187  
00020400                           188  -------------------- end include --------------------
00020400                           189  ;-----------------------------------------------------------
00020400                           190  ;-----------------------------------------------------------
00020400                           191  ; Initial program lines, main                               
00020400                           192  ;-----------------------------------------------------------
00020400                           193  ; Labels to memory space reserved for variables:            
00020400                           194  ;-----------------------------------------------------------
00020400                           195  Variable0   DS.L 1
00020404                           196  Variable1   DS.L 1
00020408                           197  Variable2   DS.L 1
0002040C                           198  Variable3   DS.L 1
00020410                           199  Variable4   DS.L 1
00020414= 4D 65 6E 6F 72 00        200  Variable5   DC.B 'Menor',0
0002041A                           201  Variable6   DS.L 1
0002041E                           202  Variable7   DS.L 1
00020422                           203  Variable8   DS.L 1
00020426= 4D 61 79 6F 72 00        204  Variable9   DC.B 'Mayor',0
0002042C= 49 67 75 61 6C 65 ...    205  Variable10  DC.B 'Iguales',0
00020434                           206  SParam0 DS.B 128
000204B4= 00                       207      DC.B 0
000204B5                           208  SParam1 DS.B 128
00020535= 00                       209      DC.B 0
00020536                           210  SParam2 DS.B 128
000205B6= 00                       211      DC.B 0
000205B7                           212  SParam3 DS.B 128
00020637= 00                       213      DC.B 0
00020638                           214  SParam4 DS.B 128
000206B8= 00                       215      DC.B 0
000206BA                           216  Param0  DS.L 1
000206BE                           217  Param1  DS.L 1
000206C2                           218  Param2  DS.L 1
000206C6                           219  Param3  DS.L 1
000206CA                           220  Param4  DS.L 1
000206CE                           221  Param5  DS.L 1
000206D2                           222  Param6  DS.L 1
000206D6                           223  Param7  DS.L 1
000206DA                           224  Param8  DS.L 1
000206DE                           225  Param9  DS.L 1
000206E2                           226  ;-----------------------------------------------------------
000206E2                           227      DS.W 0
000206E2                           228  ;-----------------------------------------------------------
000206E2                           229  globals:
000206E2                           230  ; Instruction of type: COPIA
000206E2                           231  ;Operator 1 -> -2, Store in -> 0
000206E2                           232  
000206E2  7000                     233      MOVE.L #0, D0 ; Load variable
000206E4  23C0 00020400            234      MOVE.L D0, (Variable0) ; Store local variable
000206EA                           235  ; Instruction of type: COPIA
000206EA                           236  ;Operator 1 -> -2, Store in -> 1
000206EA                           237  
000206EA  7001                     238      MOVE.L #1, D0 ; Load variable
000206EC  23C0 00020404            239      MOVE.L D0, (Variable1) ; Store local variable
000206F2                           240  ; Instruction of type: CALL
000206F2                           241  ;Operator 1 -> -2
000206F2                           242  
000206F2  4EF9 000206F8            243      JMP main ; Declared all globals
000206F8                           244  main:                                                       
000206F8  2C4F                     245      MOVE.L A7, A6
000206FA                           246  ; Instruction of type: IFMAYORIGUAL
000206FA                           247  ;Operator 1 -> 0, Operator 2 -> t1, Store in -> 4
000206FA                           248  
000206FA  2039 00020400            249      MOVE.L (Variable0), D0 ; Load variable
00020700  2239 00020404            250      MOVE.L (Variable1), D1 ; Load variable
00020706  B081                     251      CMP.L D1, D0
00020708  6C00 0010                252      BGE salto0
0002070C  7000                     253      MOVE.L #0, D0 ; Load variable
0002070E  23C0 00020410            254      MOVE.L D0, (Variable4) ; Store local variable
00020714  4EF9 00020722            255      JMP fsalto0 ; Instruction of type: SKIP
0002071A                           256  salto0:
0002071A  70FF                     257      MOVE.L #-1, D0 ; Load variable
0002071C  23C0 00020410            258      MOVE.L D0, (Variable4) ; Store local variable
00020722                           259  ; Instruction of type: SKIP
00020722                           260  fsalto0:
00020722                           261  
00020722                           262  ; Instruction of type: IFTRUEGOTO
00020722                           263  ;Operator 1 -> 4, Operator 2 -> 0, Store in -> -2
00020722                           264  
00020722  2039 00020410            265      MOVE.L (Variable4), D0 ; Load variable
00020728  72FF                     266      MOVE.L #-1,D1
0002072A  B081                     267      CMP.L D1, D0
0002072C  6700 0032                268      BEQ e1
00020730                           269  ; Instruction of type: COPIA
00020730                           270  ;Operator 1 -> -2, Store in -> 5
00020730                           271  
00020730  41F9 00020414            272      LEA Variable5, A0
00020736  2008                     273      MOVE.L A0, D0 ; Load variable
00020738                           274  ; Instruction of type: PRINTLN
00020738                           275  ;, Store in -> 5
00020738                           276  
00020738  41F9 00020414            277      LEA Variable5, A0 ; Cargar la string
0002073E  2248                     278      MOVE.L A0, A1 ; Ready text
00020740  700E                     279      MOVE.L #14, D0 ; Prepare display
00020742  4E4F                     280      TRAP #15
00020744                           281   ; Expect screen visualization
00020744  103C 000B                282      MOVE.B #11, D0 ; Next line prepare
00020748  223C 000000FF            283      MOVE.L #$00FF, D1 ; Request current coordinates
0002074E  4E4F                     284      TRAP #15 ; Get them in D1.L (HIGH=COL, LOW = ROW)
00020750  C2BC 000000FF            285      AND.L #$00FF, D1 ; We want always column = 0
00020756  5201                     286      ADDQ.B #1, D1 ; We increment the current row by 1
00020758  4E4F                     287      TRAP #15 ; Set new coordinates (next line ready)
0002075A                           288  ; Instruction of type: GOTO
0002075A                           289  ;, Store in -> -2
0002075A                           290  
0002075A  4EF9 000207F0            291      JMP e2
00020760                           292  ; Instruction of type: SKIP
00020760                           293  ;, Store in -> -2
00020760                           294  
00020760                           295  e1:
00020760                           296  ; Instruction of type: IFMENORIGUAL
00020760                           297  ;Operator 1 -> 0, Operator 2 -> t1, Store in -> 8
00020760                           298  
00020760  2039 00020400            299      MOVE.L (Variable0), D0 ; Load variable
00020766  2239 00020404            300      MOVE.L (Variable1), D1 ; Load variable
0002076C  B081                     301      CMP.L D1, D0
0002076E  6F00 0010                302      BLE salto1
00020772  7000                     303      MOVE.L #0, D0 ; Load variable
00020774  23C0 00020422            304      MOVE.L D0, (Variable8) ; Store local variable
0002077A  4EF9 00020788            305      JMP fsalto1 ; Instruction of type: SKIP
00020780                           306  salto1:
00020780  70FF                     307      MOVE.L #-1, D0 ; Load variable
00020782  23C0 00020422            308      MOVE.L D0, (Variable8) ; Store local variable
00020788                           309  ; Instruction of type: SKIP
00020788                           310  fsalto1:
00020788                           311  
00020788                           312  ; Instruction of type: IFTRUEGOTO
00020788                           313  ;Operator 1 -> 8, Operator 2 -> 0, Store in -> -2
00020788                           314  
00020788  2039 00020422            315      MOVE.L (Variable8), D0 ; Load variable
0002078E  72FF                     316      MOVE.L #-1,D1
00020790  B081                     317      CMP.L D1, D0
00020792  6700 0032                318      BEQ e4
00020796                           319  ; Instruction of type: COPIA
00020796                           320  ;Operator 1 -> -2, Store in -> 9
00020796                           321  
00020796  41F9 00020426            322      LEA Variable9, A0
0002079C  2008                     323      MOVE.L A0, D0 ; Load variable
0002079E                           324  ; Instruction of type: PRINTLN
0002079E                           325  ;, Store in -> 9
0002079E                           326  
0002079E  41F9 00020426            327      LEA Variable9, A0 ; Cargar la string
000207A4  2248                     328      MOVE.L A0, A1 ; Ready text
000207A6  700E                     329      MOVE.L #14, D0 ; Prepare display
000207A8  4E4F                     330      TRAP #15
000207AA                           331   ; Expect screen visualization
000207AA  103C 000B                332      MOVE.B #11, D0 ; Next line prepare
000207AE  223C 000000FF            333      MOVE.L #$00FF, D1 ; Request current coordinates
000207B4  4E4F                     334      TRAP #15 ; Get them in D1.L (HIGH=COL, LOW = ROW)
000207B6  C2BC 000000FF            335      AND.L #$00FF, D1 ; We want always column = 0
000207BC  5201                     336      ADDQ.B #1, D1 ; We increment the current row by 1
000207BE  4E4F                     337      TRAP #15 ; Set new coordinates (next line ready)
000207C0                           338  ; Instruction of type: GOTO
000207C0                           339  ;, Store in -> -2
000207C0                           340  
000207C0  4EF9 000207F0            341      JMP e2
000207C6                           342  ; Instruction of type: SKIP
000207C6                           343  ;, Store in -> -2
000207C6                           344  
000207C6                           345  e4:
000207C6                           346  ; Instruction of type: COPIA
000207C6                           347  ;Operator 1 -> -2, Store in -> 10
000207C6                           348  
000207C6  41F9 0002042C            349      LEA Variable10, A0
000207CC  2008                     350      MOVE.L A0, D0 ; Load variable
000207CE                           351  ; Instruction of type: PRINTLN
000207CE                           352  ;, Store in -> 10
000207CE                           353  
000207CE  41F9 0002042C            354      LEA Variable10, A0 ; Cargar la string
000207D4  2248                     355      MOVE.L A0, A1 ; Ready text
000207D6  700E                     356      MOVE.L #14, D0 ; Prepare display
000207D8  4E4F                     357      TRAP #15
000207DA                           358   ; Expect screen visualization
000207DA  103C 000B                359      MOVE.B #11, D0 ; Next line prepare
000207DE  223C 000000FF            360      MOVE.L #$00FF, D1 ; Request current coordinates
000207E4  4E4F                     361      TRAP #15 ; Get them in D1.L (HIGH=COL, LOW = ROW)
000207E6  C2BC 000000FF            362      AND.L #$00FF, D1 ; We want always column = 0
000207EC  5201                     363      ADDQ.B #1, D1 ; We increment the current row by 1
000207EE  4E4F                     364      TRAP #15 ; Set new coordinates (next line ready)
000207F0                           365  ; Instruction of type: SKIP
000207F0                           366  ;, Store in -> -2
000207F0                           367  
000207F0                           368  e2:
000207F0                           369      END globals

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1
ADDM                1E8
AND                 9
ANDM                5A
ASSIG               D
CALL                17
CLONE               0
CLRH                0
COMPLEX             1A
DECR                8
DISP                0
DIV                 4
DIVM                32D
DMMBNUM             80
DMMBSIZE            400
DMMDATA             400
DMMPRCID            FFFFFFFF
DMMSYSID            0
E1                  20760
E2                  207F0
E4                  207C6
EQ                  14
EXP                 C
FSALTO0             20722
FSALTO1             20788
GE                  13
GLOBALS             206E2
GOTO                F
GT                  12
INCR                7
INIT                16
LE                  11
LT                  10
MAIN                206F8
MINIT               1000
MOD                 5
MODM                420
MUL                 3
MULTM               571
NEG                 6
NEGM                615
NEQ                 15
NOT                 B
NOTM                1A2
OR                  A
ORM                 FE
PARAM0              206BA
PARAM1              206BE
PARAM2              206C2
PARAM3              206C6
PARAM4              206CA
PARAM5              206CE
PARAM6              206D2
PARAM7              206D6
PARAM8              206DA
PARAM9              206DE
PARSPACE            1F6
PRINT               1C
PRINTLN             1D
READ                1B
RETURN              18
SALTO0              2071A
SALTO1              20780
SIMPLE              19
SKIP                E
SPARAM0             20434
SPARAM1             204B5
SPARAM2             20536
SPARAM3             205B7
SPARAM4             20638
SUB                 2
SUBM                28C
VARIABLE0           20400
VARIABLE1           20404
VARIABLE10          2042C
VARIABLE2           20408
VARIABLE3           2040C
VARIABLE4           20410
VARIABLE5           20414
VARIABLE6           2041A
VARIABLE7           2041E
VARIABLE8           20422
VARIABLE9           20426
VARSIZE             28
VARSPACE            20A
